[
    {
        "func": "approve(spender,value)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(spender != address(0))",
            "VeriSol.Requires(msg.sender != address(0))"
        ],
        "postconditions": [
            "VeriSol.Ensures(value == _allowances[msg.sender][spender])",
            "VeriSol.Ensures(VeriSol.Old(_totalSupply) == _totalSupply)",
            "VeriSol.Ensures(!(value == VeriSol.Old(_allowances[msg.sender][spender]) ) || ( _allowances[msg.sender][spender] == VeriSol.Old(_allowances[msg.sender][spender])))",
            "VeriSol.Ensures(!(value > VeriSol.Old(_allowances[msg.sender][spender]) ) || ( _allowances[msg.sender][spender] > 0))",
            "VeriSol.Ensures(!(VeriSol.Old(_allowances[msg.sender][spender]) == 0 ) || ( _allowances[msg.sender][spender] >= VeriSol.Old(_allowances[msg.sender][spender])))",
            "VeriSol.Ensures(!(value >= VeriSol.Old(_allowances[msg.sender][spender]) && value != VeriSol.Old(_allowances[msg.sender][spender]) ) || ( _allowances[msg.sender][spender] > 0))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "increaseAllowance(spender,addedValue)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(spender != address(0))",
            "VeriSol.Requires(msg.sender != address(0))"
        ],
        "postconditions": [
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) <= VeriSol.SumMapping(_balances))",
            "VeriSol.Ensures(_allowances[msg.sender][spender] >= VeriSol.Old(_allowances[msg.sender][spender]))",
            "VeriSol.Ensures(_allowances[msg.sender][spender] >= addedValue)",
            "VeriSol.Ensures(VeriSol.Old(_totalSupply) == _totalSupply)",
            "VeriSol.Ensures(addedValue + VeriSol.Old(_allowances[msg.sender][spender]) == _allowances[msg.sender][spender])",
            "VeriSol.Ensures(!(VeriSol.Old(_allowances[msg.sender][spender]) != addedValue ) || ( _allowances[msg.sender][spender] > 0))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "decreaseAllowance(spender,subtractedValue)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(spender != address(0))",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(subtractedValue <= VeriSol.Old(_allowances[msg.sender][spender]))"
        ],
        "postconditions": [
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances))",
            "VeriSol.Ensures(_allowances[msg.sender][spender] <= VeriSol.Old(_allowances[msg.sender][spender]))",
            "VeriSol.Ensures(VeriSol.Old(_totalSupply) == _totalSupply)",
            "VeriSol.Ensures(VeriSol.Old(_allowances[msg.sender][spender]) - subtractedValue == _allowances[msg.sender][spender])",
            "VeriSol.Ensures(!(subtractedValue != VeriSol.Old(_allowances[msg.sender][spender]) ) || ( _allowances[msg.sender][spender] > 0))",
            "VeriSol.Ensures(!(VeriSol.Old(_allowances[msg.sender][spender]) > 0 ) || ( _allowances[msg.sender][spender] != subtractedValue || _allowances[msg.sender][spender] < VeriSol.Old(_allowances[msg.sender][spender])))",
            "VeriSol.Ensures(!(VeriSol.Old(_allowances[msg.sender][spender]) > 0 ) || ( _allowances[msg.sender][spender] > subtractedValue || _allowances[msg.sender][spender] != subtractedValue || _allowances[msg.sender][spender] < VeriSol.Old(_allowances[msg.sender][spender]) || _allowances[msg.sender][spender] != VeriSol.Old(_allowances[msg.sender][spender])))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": null,
        "type": "PptType.CONTRACT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [
            "VeriSol.Ensures(_totalSupply == VeriSol.SumMapping(_balances))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    }
]