Daikon version 5.8.6, released December 2, 2020; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:
Warning: Daikon is using a dataflow hierarchy analysis on a data trace that does not appear to be over a program execution, consider running Daikon with the --nohierarchy flag.

===========================================================================
SocialMoney.approve(address,uint256):::EXIT1
this == orig(this)
this._balances == orig(this._balances)
this._allowed == orig(this._allowed)
this._totalSupply == this.decimals
this._totalSupply == msg.value
this._totalSupply == orig(this._totalSupply)
this._totalSupply == orig(this.decimals)
this._totalSupply == orig(msg.value)
this._totalSupply == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
this.decimals == msg.value
this.decimals == orig(this._totalSupply)
this.decimals == orig(this.decimals)
this.decimals == orig(msg.value)
this.decimals == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
spender == orig(spender)
value == orig(value)
value == this._allowed[pair(msg.sender,spender)].getSubValue()
msg.sender == orig(msg.sender)
msg.value == orig(this._totalSupply)
msg.value == orig(this.decimals)
msg.value == orig(msg.value)
msg.value == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
block.timestamp == orig(block.timestamp)
orig(this._totalSupply) == orig(this.decimals)
orig(this._totalSupply) == orig(msg.value)
orig(this._totalSupply) == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
orig(this.decimals) == orig(msg.value)
orig(this.decimals) == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
orig(value) == this._allowed[pair(msg.sender,spender)].getSubValue()
orig(msg.value) == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
sum(this._balances[].getValue()) == sum(orig(this._balances[].getValue()))
orig(this._allowed[post(pair(spender,msg.sender))].getSubValue()) == orig(this._allowed[post(pair(msg.sender,spender))].getSubValue())
this._balances == null
this._balances[].getValue() elements >= 0
this._allowed has only one value
this._allowed[].getSubLength() elements one of { 1, 2 }
this._allowed[].getSubValue() elements >= 0
this._totalSupply == 0
this.decimals == 0
value >= 0
msg.value == 0
orig(this) has only one value
orig(this) != null
orig(this._allowed[].getSubLength()) elements one of { 1, 2 }
orig(this._allowed[].getSubValue()) elements >= 0
orig(this._totalSupply) == 0
orig(this.decimals) == 0
orig(value) >= 0
orig(msg.value) == 0
sum(this._balances[].getValue()) one of { 32000000000, 100000000000 }
sum(orig(this._balances[].getValue())) one of { 32000000000, 100000000000 }
this._balances[orig(spender)].getValue() one of { 7000000, 14000000 }
this._allowed[pair(msg.sender,spender)].getSubValue() >= 0
orig(this._allowed[post(pair(spender,msg.sender))].getSubValue()) == 0
orig(this._allowed[post(pair(msg.sender,spender))].getSubValue()) one of { 0, 115792089237316195423570985008687907853269984665640564039457584007913122639935, 115792089237316195423570985008687907853269984665640564039457584007913125139935 }
this._allowed[].getSubLength() >= orig(this._allowed[].getSubLength()) (lexically)
this._allowed[].getSubLength() elements <= sum(this._allowed[].getSubLength())
this._totalSupply <= value
this._totalSupply < block.timestamp
this._totalSupply <= orig(value)
this._totalSupply < orig(block.timestamp)
this._totalSupply < sum(this._balances[].getValue())
this._totalSupply < sum(this._allowed[].getSubValue())
this._totalSupply < sum(orig(this._balances[].getValue()))
this._totalSupply <= sum(orig(this._allowed[].getSubValue()))
this._totalSupply < this._balances[orig(msg.sender)].getValue()
this._totalSupply <= this._allowed[pair(msg.sender,spender)].getSubValue()
this._totalSupply <= orig(this._allowed[post(pair(msg.sender,spender))].getSubValue())
this.decimals <= value
this.decimals < block.timestamp
this.decimals <= orig(value)
this.decimals < orig(block.timestamp)
this.decimals < sum(this._balances[].getValue())
this.decimals < sum(this._allowed[].getSubValue())
this.decimals < sum(orig(this._balances[].getValue()))
this.decimals <= sum(orig(this._allowed[].getSubValue()))
this.decimals < this._balances[orig(msg.sender)].getValue()
this.decimals <= this._allowed[pair(msg.sender,spender)].getSubValue()
this.decimals <= orig(this._allowed[post(pair(msg.sender,spender))].getSubValue())
value <= sum(this._allowed[].getSubValue())
msg.value < block.timestamp
msg.value <= orig(value)
msg.value < orig(block.timestamp)
msg.value < sum(this._balances[].getValue())
msg.value < sum(this._allowed[].getSubValue())
msg.value < sum(orig(this._balances[].getValue()))
msg.value <= sum(orig(this._allowed[].getSubValue()))
msg.value < this._balances[orig(msg.sender)].getValue()
msg.value <= this._allowed[pair(msg.sender,spender)].getSubValue()
msg.value <= orig(this._allowed[post(pair(msg.sender,spender))].getSubValue())
block.timestamp < sum(this._balances[].getValue())
block.timestamp < sum(this._allowed[].getSubValue())
block.timestamp < sum(orig(this._balances[].getValue()))
orig(this._allowed[].getSubLength()) elements < sum(this._allowed[].getSubLength())
orig(this._allowed[].getSubLength()) elements <= sum(orig(this._allowed[].getSubLength()))
orig(this._totalSupply) <= orig(value)
orig(this._totalSupply) < orig(block.timestamp)
orig(this._totalSupply) < sum(this._balances[].getValue())
orig(this._totalSupply) < sum(this._allowed[].getSubValue())
orig(this._totalSupply) < sum(orig(this._balances[].getValue()))
orig(this._totalSupply) <= sum(orig(this._allowed[].getSubValue()))
orig(this._totalSupply) < this._balances[orig(msg.sender)].getValue()
orig(this._totalSupply) <= this._allowed[pair(msg.sender,spender)].getSubValue()
orig(this._totalSupply) <= orig(this._allowed[post(pair(msg.sender,spender))].getSubValue())
orig(this.decimals) <= orig(value)
orig(this.decimals) < orig(block.timestamp)
orig(this.decimals) < sum(this._balances[].getValue())
orig(this.decimals) < sum(this._allowed[].getSubValue())
orig(this.decimals) < sum(orig(this._balances[].getValue()))
orig(this.decimals) <= sum(orig(this._allowed[].getSubValue()))
orig(this.decimals) < this._balances[orig(msg.sender)].getValue()
orig(this.decimals) <= this._allowed[pair(msg.sender,spender)].getSubValue()
orig(this.decimals) <= orig(this._allowed[post(pair(msg.sender,spender))].getSubValue())
orig(spender) != orig(msg.sender)
orig(value) <= sum(this._allowed[].getSubValue())
orig(msg.value) < orig(block.timestamp)
orig(msg.value) < sum(this._balances[].getValue())
orig(msg.value) < sum(this._allowed[].getSubValue())
orig(msg.value) < sum(orig(this._balances[].getValue()))
orig(msg.value) <= sum(orig(this._allowed[].getSubValue()))
orig(msg.value) < this._balances[orig(msg.sender)].getValue()
orig(msg.value) <= this._allowed[pair(msg.sender,spender)].getSubValue()
orig(msg.value) <= orig(this._allowed[post(pair(msg.sender,spender))].getSubValue())
orig(block.timestamp) < sum(this._balances[].getValue())
orig(block.timestamp) < sum(this._allowed[].getSubValue())
orig(block.timestamp) < sum(orig(this._balances[].getValue()))
sum(this._balances[].getValue()) < sum(this._allowed[].getSubValue())
sum(this._allowed[].getSubLength()) >= sum(orig(this._allowed[].getSubLength()))
this._allowed[pair(msg.sender,spender)].getSubValue() > orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
===========================================================================
SocialMoney.transfer(address,uint256):::EXIT1
this == orig(this)
this._balances == orig(this._balances)
this._allowed == orig(this._allowed)
this._allowed[].getSubLength() == orig(this._allowed[].getSubLength())
this._totalSupply == this.decimals
this._totalSupply == msg.value
this._totalSupply == orig(this._totalSupply)
this._totalSupply == orig(this.decimals)
this._totalSupply == orig(msg.value)
this._totalSupply == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
this.decimals == msg.value
this.decimals == orig(this._totalSupply)
this.decimals == orig(this.decimals)
this.decimals == orig(msg.value)
this.decimals == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
to == orig(to)
value == orig(value)
msg.sender == orig(msg.sender)
msg.value == orig(this._totalSupply)
msg.value == orig(this.decimals)
msg.value == orig(msg.value)
msg.value == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
block.timestamp == orig(block.timestamp)
orig(this._totalSupply) == orig(this.decimals)
orig(this._totalSupply) == orig(msg.value)
orig(this._totalSupply) == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
orig(this.decimals) == orig(msg.value)
orig(this.decimals) == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
orig(msg.value) == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
sum(this._allowed[].getSubLength()) == sum(orig(this._allowed[].getSubLength()))
sum(this._allowed[].getSubValue()) == sum(orig(this._allowed[].getSubValue()))
this._balances == null
this._balances[].getValue() elements >= 0
this._allowed has only one value
this._allowed[].getSubLength() elements one of { 1, 2 }
this._allowed[].getSubValue() elements >= 0
this._totalSupply == 0
this.decimals == 0
msg.value == 0
orig(this) has only one value
orig(this) != null
orig(this._balances[].getValue()) elements >= 0
orig(this._totalSupply) == 0
orig(this.decimals) == 0
orig(msg.value) == 0
sum(this._balances[].getValue()) one of { 32000000000, 100000000000 }
sum(this._allowed[].getSubLength()) >= 0
sum(this._allowed[].getSubValue()) >= 0
sum(orig(this._balances[].getValue())) one of { 0, 32000000000, 100000000000 }
sum(orig(this._allowed[].getSubValue())) >= 0
this._balances[orig(msg.sender)].getValue() >= 0
orig(this._balances[post(to)].getValue()) >= 0
orig(this._allowed[post(pair(to,msg.sender))].getSubValue()) == 0
this._allowed[].getSubLength() elements <= sum(this._allowed[].getSubLength())
this._totalSupply < value
this._totalSupply < block.timestamp
this._totalSupply < orig(value)
this._totalSupply < orig(block.timestamp)
this._totalSupply < sum(this._balances[].getValue())
this._totalSupply <= sum(this._allowed[].getSubValue())
this._totalSupply <= sum(orig(this._balances[].getValue()))
this._totalSupply <= sum(orig(this._allowed[].getSubValue()))
this._totalSupply < this._balances[orig(to)].getValue()
this._totalSupply <= this._balances[orig(msg.sender)].getValue()
this._totalSupply <= orig(this._balances[post(to)].getValue())
this._totalSupply < orig(this._balances[post(msg.sender)].getValue())
this.decimals < value
this.decimals < block.timestamp
this.decimals < orig(value)
this.decimals < orig(block.timestamp)
this.decimals < sum(this._balances[].getValue())
this.decimals <= sum(this._allowed[].getSubValue())
this.decimals <= sum(orig(this._balances[].getValue()))
this.decimals <= sum(orig(this._allowed[].getSubValue()))
this.decimals < this._balances[orig(to)].getValue()
this.decimals <= this._balances[orig(msg.sender)].getValue()
this.decimals <= orig(this._balances[post(to)].getValue())
this.decimals < orig(this._balances[post(msg.sender)].getValue())
value < sum(this._balances[].getValue())
value <= this._balances[orig(to)].getValue()
value <= orig(this._balances[post(msg.sender)].getValue())
msg.value < block.timestamp
msg.value < orig(value)
msg.value < orig(block.timestamp)
msg.value < sum(this._balances[].getValue())
msg.value <= sum(this._allowed[].getSubValue())
msg.value <= sum(orig(this._balances[].getValue()))
msg.value <= sum(orig(this._allowed[].getSubValue()))
msg.value < this._balances[orig(to)].getValue()
msg.value <= this._balances[orig(msg.sender)].getValue()
msg.value <= orig(this._balances[post(to)].getValue())
msg.value < orig(this._balances[post(msg.sender)].getValue())
block.timestamp < sum(this._balances[].getValue())
orig(this._totalSupply) < orig(value)
orig(this._totalSupply) < orig(block.timestamp)
orig(this._totalSupply) < sum(this._balances[].getValue())
orig(this._totalSupply) <= sum(this._allowed[].getSubValue())
orig(this._totalSupply) <= sum(orig(this._balances[].getValue()))
orig(this._totalSupply) <= sum(orig(this._allowed[].getSubValue()))
orig(this._totalSupply) < this._balances[orig(to)].getValue()
orig(this._totalSupply) <= this._balances[orig(msg.sender)].getValue()
orig(this._totalSupply) <= orig(this._balances[post(to)].getValue())
orig(this._totalSupply) < orig(this._balances[post(msg.sender)].getValue())
orig(this.decimals) < orig(value)
orig(this.decimals) < orig(block.timestamp)
orig(this.decimals) < sum(this._balances[].getValue())
orig(this.decimals) <= sum(this._allowed[].getSubValue())
orig(this.decimals) <= sum(orig(this._balances[].getValue()))
orig(this.decimals) <= sum(orig(this._allowed[].getSubValue()))
orig(this.decimals) < this._balances[orig(to)].getValue()
orig(this.decimals) <= this._balances[orig(msg.sender)].getValue()
orig(this.decimals) <= orig(this._balances[post(to)].getValue())
orig(this.decimals) < orig(this._balances[post(msg.sender)].getValue())
orig(to) != orig(msg.sender)
orig(value) < sum(this._balances[].getValue())
orig(value) <= this._balances[orig(to)].getValue()
orig(value) <= orig(this._balances[post(msg.sender)].getValue())
orig(msg.value) < orig(block.timestamp)
orig(msg.value) < sum(this._balances[].getValue())
orig(msg.value) <= sum(this._allowed[].getSubValue())
orig(msg.value) <= sum(orig(this._balances[].getValue()))
orig(msg.value) <= sum(orig(this._allowed[].getSubValue()))
orig(msg.value) < this._balances[orig(to)].getValue()
orig(msg.value) <= this._balances[orig(msg.sender)].getValue()
orig(msg.value) <= orig(this._balances[post(to)].getValue())
orig(msg.value) < orig(this._balances[post(msg.sender)].getValue())
orig(block.timestamp) < sum(this._balances[].getValue())
this._balances[orig(msg.sender)].getValue() < orig(this._balances[post(msg.sender)].getValue())
value - this._balances[orig(to)].getValue() + orig(this._balances[post(to)].getValue()) == 0
value + this._balances[orig(msg.sender)].getValue() - orig(this._balances[post(msg.sender)].getValue()) == 0
orig(value) - this._balances[orig(to)].getValue() + orig(this._balances[post(to)].getValue()) == 0
orig(value) + this._balances[orig(msg.sender)].getValue() - orig(this._balances[post(msg.sender)].getValue()) == 0
===========================================================================
SocialMoney.transferFrom(address,address,uint256):::EXIT1
this == orig(this)
this._balances == orig(this._balances)
this._allowed == orig(this._allowed)
this._allowed[].getSubLength() == orig(this._allowed[].getSubLength())
this._totalSupply == this.decimals
this._totalSupply == msg.value
this._totalSupply == orig(msg.value)
this._totalSupply == this._allowed[pair(from,to)].getSubValue()
this._totalSupply == orig(this._allowed[post(pair(to,from))].getSubValue())
this.decimals == msg.value
this.decimals == orig(msg.value)
this.decimals == this._allowed[pair(from,to)].getSubValue()
this.decimals == orig(this._allowed[post(pair(to,from))].getSubValue())
from == orig(from)
to == orig(to)
value == orig(value)
value == orig(this._allowed[post(pair(from,to))].getSubValue())
msg.sender == orig(to)
msg.value == orig(msg.value)
msg.value == this._allowed[pair(from,to)].getSubValue()
msg.value == orig(this._allowed[post(pair(to,from))].getSubValue())
block.timestamp == orig(block.timestamp)
orig(to) == orig(msg.sender)
orig(value) == orig(this._allowed[post(pair(from,to))].getSubValue())
orig(msg.value) == this._allowed[pair(from,to)].getSubValue()
orig(msg.value) == orig(this._allowed[post(pair(to,from))].getSubValue())
sum(this._balances[].getValue()) == sum(orig(this._balances[].getValue()))
sum(this._allowed[].getSubLength()) == sum(orig(this._allowed[].getSubLength()))
this._allowed[pair(from,to)].getSubValue() == orig(this._allowed[post(pair(to,from))].getSubValue())
this._balances == null
this._balances[].getValue() elements >= 0
this._allowed has only one value
this._allowed[].getSubLength() elements one of { 1, 2 }
this._allowed[].getSubValue() elements >= 0
this._totalSupply == 0
this.decimals == 0
value one of { 7000000, 8000000 }
msg.value == 0
block.timestamp one of { 1638934869, 1640265508, 1646169473 }
orig(this) has only one value
orig(this._balances[].getValue()) elements >= 0
orig(this._allowed[].getSubValue()) elements >= 0
orig(value) one of { 7000000, 8000000 }
orig(msg.value) == 0
orig(block.timestamp) one of { 1638934869, 1640265508, 1646169473 }
sum(this._balances[].getValue()) == 100000000000
sum(this._allowed[].getSubLength()) == 22
sum(this._allowed[].getSubValue()) one of { 2084257606271691517624277730156382341358859723981530152710236512142436134793830, 2200049695509007713047848715165070249212129708647170716749694096150349257433765 }
sum(orig(this._balances[].getValue())) == 100000000000
sum(orig(this._allowed[].getSubValue())) one of { 2084257606271691517624277730156382341358859723981530152710236512142436142793830, 2200049695509007713047848715165070249212129708647170716749694096150349264433765 }
this._balances[orig(from)].getValue() one of { 63125000, 70125000, 10048825000 }
this._balances[orig(to)].getValue() one of { 7000000, 14000000, 22000000 }
orig(this._balances[post(from)].getValue()) one of { 70125000, 77125000, 10056825000 }
orig(this._balances[post(to)].getValue()) one of { 7000000, 14000000 }
this._allowed[pair(from,to)].getSubValue() == 0
orig(this._allowed[post(pair(from,to))].getSubValue()) one of { 7000000, 8000000 }
orig(this._allowed[post(pair(to,from))].getSubValue()) == 0
Exiting Daikon.
