Daikon version 5.8.6, released December 2, 2020; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:
Warning: Daikon is using a dataflow hierarchy analysis on a data trace that does not appear to be over a program execution, consider running Daikon with the --nohierarchy flag.

===========================================================================
SocialMoney.approve(address,uint256):::EXIT1
this == orig(this)
this._balances == orig(this._balances)
this._allowed == orig(this._allowed)
this._totalSupply == this.decimals
this._totalSupply == msg.value
this._totalSupply == orig(this._totalSupply)
this._totalSupply == orig(msg.value)
this._totalSupply == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
this.decimals == msg.value
this.decimals == orig(this._totalSupply)
this.decimals == orig(msg.value)
this.decimals == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
spender == orig(spender)
value == orig(value)
value == this._allowed[pair(msg.sender,spender)].getSubValue()
msg.sender == orig(msg.sender)
msg.value == orig(this._totalSupply)
msg.value == orig(msg.value)
msg.value == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
block.timestamp == orig(block.timestamp)
orig(this._totalSupply) == orig(msg.value)
orig(this._totalSupply) == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
orig(value) == this._allowed[pair(msg.sender,spender)].getSubValue()
orig(msg.value) == orig(this._allowed[post(pair(spender,msg.sender))].getSubValue())
sum(this._balances[].getValue()) == sum(orig(this._balances[].getValue()))
this._balances == null
this._balances[].getValue() elements >= 0
this._allowed has only one value
this._allowed[].getSubLength() elements one of { 1, 2 }
this._totalSupply == 0
this.decimals == 0
value one of { 12500000000, 115792089237316195423570985008687907853269984665640564039457584007913129639935 }
msg.value == 0
orig(this) has only one value
orig(this._allowed[].getSubLength()) elements one of { 1, 2 }
orig(this._totalSupply) == 0
orig(value) one of { 12500000000, 115792089237316195423570985008687907853269984665640564039457584007913129639935 }
orig(msg.value) == 0
sum(this._balances[].getValue()) == 100000000000
sum(orig(this._balances[].getValue())) == 100000000000
this._balances[orig(msg.sender)].getValue() one of { 1009800, 433977100, 38368588900 }
this._allowed[pair(msg.sender,spender)].getSubValue() one of { 12500000000, 115792089237316195423570985008687907853269984665640564039457584007913129639935 }
orig(this._allowed[post(pair(spender,msg.sender))].getSubValue()) == 0
sum(this._allowed[].getSubLength()) - sum(orig(this._allowed[].getSubLength())) - 1 == 0
===========================================================================
SocialMoney.transfer(address,uint256):::EXIT1
this == orig(this)
this._balances == orig(this._balances)
this._allowed == orig(this._allowed)
this._allowed[].getSubLength() == orig(this._allowed[].getSubLength())
this._totalSupply == this.decimals
this._totalSupply == msg.value
this._totalSupply == orig(this._totalSupply)
this._totalSupply == orig(this.decimals)
this._totalSupply == orig(msg.value)
this._totalSupply == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
this.decimals == msg.value
this.decimals == orig(this._totalSupply)
this.decimals == orig(this.decimals)
this.decimals == orig(msg.value)
this.decimals == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
to == orig(to)
value == orig(value)
msg.sender == orig(msg.sender)
msg.value == orig(this._totalSupply)
msg.value == orig(this.decimals)
msg.value == orig(msg.value)
msg.value == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
block.timestamp == orig(block.timestamp)
orig(this._totalSupply) == orig(this.decimals)
orig(this._totalSupply) == orig(msg.value)
orig(this._totalSupply) == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
orig(this.decimals) == orig(msg.value)
orig(this.decimals) == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
orig(msg.value) == orig(this._allowed[post(pair(to,msg.sender))].getSubValue())
sum(this._allowed[].getSubLength()) == sum(orig(this._allowed[].getSubLength()))
sum(this._allowed[].getSubValue()) == sum(orig(this._allowed[].getSubValue()))
this._balances == null
this._balances[].getValue() elements >= 0
this._allowed has only one value
this._allowed[].getSubLength() elements == 2
this._allowed[].getSubValue() sorted by >=
this._totalSupply == 0
this.decimals == 0
msg.value == 0
orig(this) has only one value
orig(this) != null
orig(this._balances[].getValue()) elements >= 0
orig(this._totalSupply) == 0
orig(this.decimals) == 0
orig(msg.value) == 0
sum(this._balances[].getValue()) one of { 32000000000, 100000000000 }
sum(this._allowed[].getSubLength()) one of { 0, 2 }
sum(this._allowed[].getSubValue()) one of { 0, 231584178474632390847141970017375815706539969331281128078915168015826258613270, 231584178474632390847141970017375815706539969331281128078915168015826259279870 }
sum(orig(this._balances[].getValue())) one of { 0, 32000000000, 100000000000 }
sum(orig(this._allowed[].getSubValue())) one of { 0, 231584178474632390847141970017375815706539969331281128078915168015826258613270, 231584178474632390847141970017375815706539969331281128078915168015826259279870 }
this._balances[orig(msg.sender)].getValue() >= 0
orig(this._balances[post(to)].getValue()) >= 0
orig(this._allowed[post(pair(to,msg.sender))].getSubValue()) == 0
this._allowed[].getSubLength() elements == sum(this._allowed[].getSubLength())
this._totalSupply < value
this._totalSupply < block.timestamp
this._totalSupply < orig(value)
this._totalSupply < orig(block.timestamp)
this._totalSupply < sum(this._balances[].getValue())
this._totalSupply <= sum(this._allowed[].getSubValue())
this._totalSupply <= sum(orig(this._balances[].getValue()))
this._totalSupply <= sum(orig(this._allowed[].getSubValue()))
this._totalSupply < this._balances[orig(to)].getValue()
this._totalSupply <= this._balances[orig(msg.sender)].getValue()
this._totalSupply <= orig(this._balances[post(to)].getValue())
this._totalSupply < orig(this._balances[post(msg.sender)].getValue())
this.decimals < value
this.decimals < block.timestamp
this.decimals < orig(value)
this.decimals < orig(block.timestamp)
this.decimals < sum(this._balances[].getValue())
this.decimals <= sum(this._allowed[].getSubValue())
this.decimals <= sum(orig(this._balances[].getValue()))
this.decimals <= sum(orig(this._allowed[].getSubValue()))
this.decimals < this._balances[orig(to)].getValue()
this.decimals <= this._balances[orig(msg.sender)].getValue()
this.decimals <= orig(this._balances[post(to)].getValue())
this.decimals < orig(this._balances[post(msg.sender)].getValue())
value < sum(this._balances[].getValue())
value <= this._balances[orig(to)].getValue()
value <= orig(this._balances[post(msg.sender)].getValue())
msg.value < block.timestamp
msg.value < orig(value)
msg.value < orig(block.timestamp)
msg.value < sum(this._balances[].getValue())
msg.value <= sum(this._allowed[].getSubValue())
msg.value <= sum(orig(this._balances[].getValue()))
msg.value <= sum(orig(this._allowed[].getSubValue()))
msg.value < this._balances[orig(to)].getValue()
msg.value <= this._balances[orig(msg.sender)].getValue()
msg.value <= orig(this._balances[post(to)].getValue())
msg.value < orig(this._balances[post(msg.sender)].getValue())
block.timestamp < sum(this._balances[].getValue())
orig(this._totalSupply) < orig(value)
orig(this._totalSupply) < orig(block.timestamp)
orig(this._totalSupply) < sum(this._balances[].getValue())
orig(this._totalSupply) <= sum(this._allowed[].getSubValue())
orig(this._totalSupply) <= sum(orig(this._balances[].getValue()))
orig(this._totalSupply) <= sum(orig(this._allowed[].getSubValue()))
orig(this._totalSupply) < this._balances[orig(to)].getValue()
orig(this._totalSupply) <= this._balances[orig(msg.sender)].getValue()
orig(this._totalSupply) <= orig(this._balances[post(to)].getValue())
orig(this._totalSupply) < orig(this._balances[post(msg.sender)].getValue())
orig(this.decimals) < orig(value)
orig(this.decimals) < orig(block.timestamp)
orig(this.decimals) < sum(this._balances[].getValue())
orig(this.decimals) <= sum(this._allowed[].getSubValue())
orig(this.decimals) <= sum(orig(this._balances[].getValue()))
orig(this.decimals) <= sum(orig(this._allowed[].getSubValue()))
orig(this.decimals) < this._balances[orig(to)].getValue()
orig(this.decimals) <= this._balances[orig(msg.sender)].getValue()
orig(this.decimals) <= orig(this._balances[post(to)].getValue())
orig(this.decimals) < orig(this._balances[post(msg.sender)].getValue())
orig(to) != orig(msg.sender)
orig(value) < sum(this._balances[].getValue())
orig(value) <= this._balances[orig(to)].getValue()
orig(value) <= orig(this._balances[post(msg.sender)].getValue())
orig(msg.value) < orig(block.timestamp)
orig(msg.value) < sum(this._balances[].getValue())
orig(msg.value) <= sum(this._allowed[].getSubValue())
orig(msg.value) <= sum(orig(this._balances[].getValue()))
orig(msg.value) <= sum(orig(this._allowed[].getSubValue()))
orig(msg.value) < this._balances[orig(to)].getValue()
orig(msg.value) <= this._balances[orig(msg.sender)].getValue()
orig(msg.value) <= orig(this._balances[post(to)].getValue())
orig(msg.value) < orig(this._balances[post(msg.sender)].getValue())
orig(block.timestamp) < sum(this._balances[].getValue())
this._balances[orig(msg.sender)].getValue() < orig(this._balances[post(msg.sender)].getValue())
value - this._balances[orig(to)].getValue() + orig(this._balances[post(to)].getValue()) == 0
value + this._balances[orig(msg.sender)].getValue() - orig(this._balances[post(msg.sender)].getValue()) == 0
orig(value) - this._balances[orig(to)].getValue() + orig(this._balances[post(to)].getValue()) == 0
orig(value) + this._balances[orig(msg.sender)].getValue() - orig(this._balances[post(msg.sender)].getValue()) == 0
===========================================================================
SocialMoney.transferFrom(address,address,uint256):::EXIT1
this == orig(this)
this._balances == orig(this._balances)
this._allowed == orig(this._allowed)
this._allowed[].getSubLength() == orig(this._allowed[].getSubLength())
this._totalSupply == this.decimals
this._totalSupply == orig(msg.value)
this._totalSupply == orig(this._allowed[post(pair(from,to))].getSubValue())
this.decimals == orig(msg.value)
this.decimals == orig(this._allowed[post(pair(from,to))].getSubValue())
from == orig(from)
to == orig(to)
value == orig(value)
msg.sender == orig(msg.sender)
block.timestamp == orig(block.timestamp)
orig(msg.value) == orig(this._allowed[post(pair(from,to))].getSubValue())
sum(this._balances[].getValue()) == sum(orig(this._balances[].getValue()))
sum(this._allowed[].getSubLength()) == sum(orig(this._allowed[].getSubLength()))
this._balances == null
this._balances[].getValue() elements >= 0
this._allowed has only one value
this._allowed[].getSubLength() elements one of { 1, 2 }
this._totalSupply == 0
this.decimals == 0
value one of { 666600, 1009800 }
block.timestamp one of { 1627288702, 1672690667 }
orig(this) has only one value
orig(this._balances[].getValue()) elements >= 0
orig(value) one of { 666600, 1009800 }
orig(msg.value) == 0
orig(block.timestamp) one of { 1627288702, 1672690667 }
sum(this._balances[].getValue()) == 100000000000
sum(this._allowed[].getSubLength()) one of { 2, 4 }
sum(this._allowed[].getSubValue()) one of { 231584178474632390847141970017375815706539969331281128078915168015826258613270, 347376267711948586270712955026063723559809953996921692118372752023751887243405 }
sum(orig(this._balances[].getValue())) == 100000000000
sum(orig(this._allowed[].getSubValue())) one of { 231584178474632390847141970017375815706539969331281128078915168015826259279870, 347376267711948586270712955026063723559809953996921692118372752023751888253205 }
this._balances[orig(from)].getValue() one of { 0, 433310500 }
this._balances[orig(to)].getValue() one of { 666600, 1676400 }
orig(this._balances[post(from)].getValue()) one of { 1009800, 433977100 }
orig(this._balances[post(to)].getValue()) == 666600
this._allowed[pair(from,msg.sender)].getSubValue() one of { 115792089237316195423570985008687907853269984665640564039457584007913128630135, 115792089237316195423570985008687907853269984665640564039457584007913128973335 }
orig(this._allowed[post(pair(from,to))].getSubValue()) == 0
orig(this._allowed[post(pair(from,msg.sender))].getSubValue()) == 115792089237316195423570985008687907853269984665640564039457584007913129639935
Exiting Daikon.
