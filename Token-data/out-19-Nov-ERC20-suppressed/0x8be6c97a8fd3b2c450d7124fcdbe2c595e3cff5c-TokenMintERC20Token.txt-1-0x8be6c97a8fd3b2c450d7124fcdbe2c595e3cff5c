original result: 165 invariants, smt-simplified result: 42 invariants
transfer(recipient,amount):
Requires		msg.sender != address(0)
Requires		recipient != address(0)
Requires		amount <= VeriSol.Old(_balances[msg.sender])
Ensures		VeriSol.Old(_balances[recipient]) != 0 => _balances[recipient] > 0
Ensures		VeriSol.Old(_totalSupply) == _totalSupply
Ensures		VeriSol.SumMapping(_balances) == VeriSol.Old(VeriSol.SumMapping(_balances))
Ensures		amount <= _balances[recipient]
Ensures		_balances[msg.sender] <= VeriSol.Old(_balances[msg.sender])
Ensures		VeriSol.Old(_balances[recipient]) == 0 => VeriSol.Old(_balances[recipient]) <= _balances[msg.sender]
Ensures		VeriSol.Old(_balances[recipient]) != amount => _balances[recipient] > 0
Ensures		VeriSol.Old(_balances[recipient]) == 0 => VeriSol.Old(_balances[msg.sender]) >= _balances[recipient]
Ensures		VeriSol.Old(_balances[recipient]) == 0 => VeriSol.Old(_balances[msg.sender]) - _balances[msg.sender] == amount
Ensures		VeriSol.Old(_balances[recipient]) < amount => VeriSol.Old(_balances[recipient]) < _balances[recipient]
Ensures		VeriSol.Old(_balances[recipient]) < amount => _balances[msg.sender] < VeriSol.Old(_balances[msg.sender])
Ensures		VeriSol.Old(_balances[recipient]) < amount => VeriSol.Old(_balances[msg.sender]) - _balances[msg.sender] == amount
Ensures		VeriSol.Old(_balances[recipient]) == VeriSol.Old(VeriSol.SumMapping(_balances)) => VeriSol.Old(_balances[recipient]) == VeriSol.SumMapping(_balances)
Ensures		VeriSol.Old(_balances[recipient]) < VeriSol.Old(VeriSol.SumMapping(_balances)) => VeriSol.SumMapping(_balances) > 0
Ensures		VeriSol.Old(_balances[recipient]) != VeriSol.Old(_balances[msg.sender]) => VeriSol.Old(_balances[msg.sender]) - _balances[msg.sender] == amount
Ensures		msg.sender != recipient => VeriSol.Old(_balances[msg.sender]) - _balances[msg.sender] == amount
Ensures		amount < VeriSol.Old(VeriSol.SumMapping(_balances)) => VeriSol.SumMapping(_balances) > 0
Ensures		amount != VeriSol.Old(_balances[msg.sender]) => _balances[msg.sender] > 0
Ensures		VeriSol.Old(VeriSol.SumMapping(_balances)) > VeriSol.Old(_balances[msg.sender]) => VeriSol.SumMapping(_balances) > amount
Ensures		VeriSol.Old(VeriSol.SumMapping(_balances)) > VeriSol.Old(_balances[msg.sender]) => VeriSol.SumMapping(_balances) > _balances[msg.sender]
Ensures		VeriSol.Old(VeriSol.SumMapping(_balances)) == VeriSol.Old(_balances[msg.sender]) => VeriSol.SumMapping(_balances) == VeriSol.Old(_balances[msg.sender])
Ensures		VeriSol.Old(VeriSol.SumMapping(_balances)) > VeriSol.Old(_balances[msg.sender]) => _balances[msg.sender] < VeriSol.Old(VeriSol.SumMapping(_balances))
Ensures		VeriSol.Old(VeriSol.SumMapping(_balances)) > VeriSol.Old(_balances[msg.sender]) => VeriSol.SumMapping(_balances) > 0
Ensures		msg.sender == recipient => VeriSol.Old(_balances[recipient]) == _balances[msg.sender]
Ensures		msg.sender == recipient => VeriSol.Old(_balances[msg.sender]) == _balances[recipient]
Ensures		amount == VeriSol.Old(_balances[msg.sender]) => amount >= _balances[msg.sender]
Ensures		msg.sender == recipient => amount <= _balances[msg.sender]
Ensures		msg.sender == recipient => _balances[msg.sender] == _balances[recipient]
Ensures		VeriSol.Old(_balances[recipient]) == VeriSol.Old(_balances[msg.sender]) => _balances[msg.sender] <= _balances[recipient]
Ensures		amount == VeriSol.Old(_balances[msg.sender]) => _balances[msg.sender] <= _balances[recipient]
Ensures		msg.sender == recipient => VeriSol.Old(_balances[recipient]) == _balances[recipient]
Ensures		msg.sender == recipient => _balances[msg.sender] == VeriSol.Old(_balances[msg.sender])
approve(spender,value):
Requires		spender != address(0)
Requires		msg.sender != address(0)
Ensures		_allowances[msg.sender][spender] == value
Ensures		VeriSol.Old(_totalSupply) == _totalSupply
Ensures		VeriSol.Old(_allowances[msg.sender][spender]) == value => _allowances[msg.sender][spender] == VeriSol.Old(_allowances[msg.sender][spender])
Ensures		VeriSol.Old(_allowances[msg.sender][spender]) == 0 => _allowances[msg.sender][spender] >= VeriSol.Old(_allowances[msg.sender][spender])
TokenMintERC20Token:
Ensures		_totalSupply >= VeriSol.SumMapping(_balances)
