Invariants with True value:12
Invariants with False value:56

True Invariants:
approve(spender,value): VeriSol.Requires(msg.sender!=address(0))
approve(spender,value): VeriSol.Ensures(_allowances[msg.sender][spender] == value)
approve(spender,value): VeriSol.Ensures(_allowances[msg.sender][spender] >= value)
approve(spender,value): VeriSol.Ensures(_allowances[msg.sender][spender] <= value)
approve(spender,value): VeriSol.Ensures(VeriSol.Old(_totalSupply) == _totalSupply)
approve(spender,value): VeriSol.Ensures(VeriSol.Old(_totalSupply) >= _totalSupply)
approve(spender,value): VeriSol.Ensures(VeriSol.Old(_totalSupply) <= _totalSupply)
TokenMintERC20Token: VeriSol.ContractInvariant(_decimals>0)
TokenMintERC20Token: VeriSol.ContractInvariant(_decimals==18)
TokenMintERC20Token: VeriSol.ContractInvariant(_totalSupply == VeriSol.SumMapping(_balances))
TokenMintERC20Token: VeriSol.ContractInvariant(_totalSupply >= VeriSol.SumMapping(_balances))
TokenMintERC20Token: VeriSol.ContractInvariant(_totalSupply <= VeriSol.SumMapping(_balances))

False Invariants:
approve(spender,value): VeriSol.Requires(_totalSupply>0)
approve(spender,value): VeriSol.Requires(_totalSupply==100000000000000000000000000000000)
approve(spender,value): VeriSol.Requires(value>0)
approve(spender,value): VeriSol.Requires(VeriSol.SumMapping(_balances)>0)
approve(spender,value): VeriSol.Requires(VeriSol.SumMapping(_balances)==100000000000000000000000000000000)
approve(spender,value): VeriSol.Requires(spender!=address(0))
approve(spender,value): VeriSol.Requires(_allowances[msg.sender][spender]==0)
approve(spender,value): VeriSol.Requires((_totalSupply) == (VeriSol.SumMapping(_balances)))
approve(spender,value): VeriSol.Requires((_totalSupply) >= (VeriSol.SumMapping(_balances)))
approve(spender,value): VeriSol.Requires((_totalSupply) <= (VeriSol.SumMapping(_balances)))
approve(spender,value): VeriSol.Requires((_totalSupply) >= (_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Requires((_totalSupply) > (_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Requires((_totalSupply) != (_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Requires(value >= (_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Requires(value > (_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Requires(value != (_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Requires((VeriSol.SumMapping(_balances)) >= (_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Requires((VeriSol.SumMapping(_balances)) > (_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Requires((VeriSol.SumMapping(_balances)) != (_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Requires(msg.sender != spender)
approve(spender,value): VeriSol.Ensures(_allowances[msg.sender][spender]>0)
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances)>0)
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances)==100000000000000000000000000000000)
approve(spender,value): VeriSol.Ensures(_totalSupply>0)
approve(spender,value): VeriSol.Ensures(_totalSupply==100000000000000000000000000000000)
approve(spender,value): VeriSol.Ensures(_allowances[msg.sender][spender] >= VeriSol.Old(_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Ensures(_allowances[msg.sender][spender] > VeriSol.Old(_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Ensures(_allowances[msg.sender][spender] != VeriSol.Old(_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Ensures(VeriSol.Old(_totalSupply) == VeriSol.SumMapping(_balances))
approve(spender,value): VeriSol.Ensures(VeriSol.Old(_totalSupply) >= VeriSol.SumMapping(_balances))
approve(spender,value): VeriSol.Ensures(VeriSol.Old(_totalSupply) <= VeriSol.SumMapping(_balances))
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances) == VeriSol.Old(VeriSol.SumMapping(_balances)))
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances) >= VeriSol.Old(VeriSol.SumMapping(_balances)))
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances) <= VeriSol.Old(VeriSol.SumMapping(_balances)))
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances) == _totalSupply)
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _totalSupply)
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances) <= _totalSupply)
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances) >= VeriSol.Old(_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances) > VeriSol.Old(_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Ensures(VeriSol.SumMapping(_balances) != VeriSol.Old(_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) == _totalSupply)
approve(spender,value): VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= _totalSupply)
approve(spender,value): VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) <= _totalSupply)
approve(spender,value): VeriSol.Ensures(_totalSupply >= VeriSol.Old(_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Ensures(_totalSupply > VeriSol.Old(_allowances[msg.sender][spender]))
approve(spender,value): VeriSol.Ensures(_totalSupply != VeriSol.Old(_allowances[msg.sender][spender]))
TokenMintERC20Token: VeriSol.ContractInvariant(_totalSupply>0)
TokenMintERC20Token: VeriSol.ContractInvariant(_totalSupply==100000000000000000000000000000000)
TokenMintERC20Token: VeriSol.ContractInvariant(VeriSol.SumMapping(_balances)>0)
TokenMintERC20Token: VeriSol.ContractInvariant(VeriSol.SumMapping(_balances)==100000000000000000000000000000000)
TokenMintERC20Token: VeriSol.ContractInvariant(_decimals <= _totalSupply)
TokenMintERC20Token: VeriSol.ContractInvariant(_decimals < _totalSupply)
TokenMintERC20Token: VeriSol.ContractInvariant(_decimals != _totalSupply)
TokenMintERC20Token: VeriSol.ContractInvariant(_decimals <= VeriSol.SumMapping(_balances))
TokenMintERC20Token: VeriSol.ContractInvariant(_decimals < VeriSol.SumMapping(_balances))
TokenMintERC20Token: VeriSol.ContractInvariant(_decimals != VeriSol.SumMapping(_balances))
