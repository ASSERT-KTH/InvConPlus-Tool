Invariants with True value:12
Invariants with False value:6

True Invariants:
approve(spender,tokens): Requires msg.sender != address(0)
approve(spender,tokens): Ensures tokens == allowed[msg.sender][spender]
approve(spender,tokens): Ensures _totalSupply == VeriSol.Old(_totalSupply)
approve(spender,tokens): Ensures decimals == VeriSol.Old(uint256(decimals))
transfer(to,tokens): Requires msg.sender != address(0)
transfer(to,tokens): Requires tokens <= VeriSol.Old(balances[msg.sender])
transfer(to,tokens): Ensures _totalSupply == VeriSol.Old(_totalSupply)
transfer(to,tokens): Ensures VeriSol.Old(balances[msg.sender]) >= balances[msg.sender]
transfer(to,tokens): Ensures decimals == VeriSol.Old(uint256(decimals))
GaneshaToken: Ensures VeriSol.ContractInvariant(decimals == 18)
GaneshaToken: Ensures VeriSol.ContractInvariant(_totalSupply == 999999999000000000000000000)
GaneshaToken: Ensures VeriSol.ContractInvariant(decimals < _totalSupply)

False Invariants:
transfer(to,tokens): Ensures tokens <= balances[to]
transfer(to,tokens): Ensures VeriSol.Old(balances[to]) <= balances[to]
transfer(to,tokens): Ensures VeriSol.Old(VeriSol.SumMapping(balances)) == VeriSol.SumMapping(balances)
GaneshaToken: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(balances) == 999999999000000000000000000)
GaneshaToken: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(balances) > decimals)
GaneshaToken: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(balances) == _totalSupply)

 // ./gambit_out_transfer/mutants/218/verisol_test