Invariants with True value:20
Invariants with False value:1

True Invariants:
transfer(recipient,amount): Requires msg.sender != address(0)
transfer(recipient,amount): Requires amount <= VeriSol.Old(_balances[msg.sender])
transfer(recipient,amount): Ensures amount <= _balances[recipient]
transfer(recipient,amount): Ensures _balances[recipient] >= VeriSol.Old(_balances[recipient])
transfer(recipient,amount): Ensures VeriSol.Old(_totalSupply) == _totalSupply
transfer(recipient,amount): Ensures VeriSol.Old(_balances[msg.sender]) >= _balances[msg.sender]
transfer(recipient,amount): Ensures VeriSol.Old(VeriSol.SumMapping(_balances)) == VeriSol.SumMapping(_balances)
approve(spender,value): Requires spender != address(0)
approve(spender,value): Requires msg.sender != address(0)
approve(spender,value): Ensures value == _allowances[msg.sender][spender]
approve(spender,value): Ensures VeriSol.Old(_totalSupply) == _totalSupply
burn(value): Requires msg.sender != address(0)
burn(value): Requires value <= VeriSol.Old(_totalSupply)
burn(value): Requires value <= VeriSol.Old(_balances[msg.sender])
burn(value): Ensures _decimals == VeriSol.Old(uint256(_decimals))
burn(value): Ensures VeriSol.Old(_totalSupply) >= _totalSupply
burn(value): Ensures VeriSol.Old(_balances[msg.sender]) >= _balances[msg.sender]
burn(value): Ensures VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances)
burn(value): Ensures _balances[msg.sender] + value == VeriSol.Old(_balances[msg.sender])
TokenMintERC20Token: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(_balances) <= _totalSupply)

False Invariants:
transfer(recipient,amount): Requires recipient != address(0)

 // ./gambit_out_transfer/mutants/167/verisol_test