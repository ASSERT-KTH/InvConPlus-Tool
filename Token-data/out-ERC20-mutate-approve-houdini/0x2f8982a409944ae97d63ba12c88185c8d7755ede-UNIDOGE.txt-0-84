Invariants with True value:15
Invariants with False value:3

True Invariants:
approve(spender,tokens): Requires msg.sender != address(0)
approve(spender,tokens): Ensures allowed[msg.sender][spender] == tokens
approve(spender,tokens): Ensures _totalSupply == VeriSol.Old(_totalSupply)
approve(spender,tokens): Ensures decimals == VeriSol.Old(uint256(decimals))
transfer(to,tokens): Requires msg.sender != address(0)
transfer(to,tokens): Requires tokens <= VeriSol.Old(balances[msg.sender])
transfer(to,tokens): Ensures _totalSupply == VeriSol.Old(_totalSupply)
transfer(to,tokens): Ensures decimals == VeriSol.Old(uint256(decimals))
transfer(to,tokens): Ensures VeriSol.Old(VeriSol.SumMapping(balances)) == VeriSol.SumMapping(balances)
transfer(to,tokens): Ensures tokens <= balances[to]
transfer(to,tokens): Ensures VeriSol.Old(balances[msg.sender]) >= balances[msg.sender]
transfer(to,tokens): Ensures VeriSol.Old(balances[to]) <= balances[to]
UNIDOGE: Ensures VeriSol.ContractInvariant(_totalSupply == 1000000000000000000000000000000)
UNIDOGE: Ensures VeriSol.ContractInvariant(decimals == 18)
UNIDOGE: Ensures VeriSol.ContractInvariant(_totalSupply > decimals)

False Invariants:
UNIDOGE: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(balances) == 1000000000000000000000000000000)
UNIDOGE: Ensures VeriSol.ContractInvariant(_totalSupply == VeriSol.SumMapping(balances))
UNIDOGE: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(balances) > decimals)

 // ./gambit_out_approve/mutants/84/verisol_test