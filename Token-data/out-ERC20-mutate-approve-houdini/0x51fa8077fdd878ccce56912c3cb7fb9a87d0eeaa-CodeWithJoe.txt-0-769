Invariants with True value:14
Invariants with False value:4

True Invariants:
approve(spender,tokens): Requires msg.sender != address(0)
approve(spender,tokens): Ensures VeriSol.Old(uint256(decimals)) == decimals
approve(spender,tokens): Ensures _totalSupply == VeriSol.Old(_totalSupply)
approve(spender,tokens): Ensures tokens == allowed[msg.sender][spender]
transfer(to,tokens): Requires msg.sender != address(0)
transfer(to,tokens): Requires VeriSol.Old(balances[msg.sender]) >= tokens
transfer(to,tokens): Ensures balances[to] >= VeriSol.Old(balances[to])
transfer(to,tokens): Ensures balances[to] >= tokens
transfer(to,tokens): Ensures VeriSol.Old(uint256(decimals)) == decimals
transfer(to,tokens): Ensures _totalSupply == VeriSol.Old(_totalSupply)
transfer(to,tokens): Ensures VeriSol.Old(VeriSol.SumMapping(balances)) == VeriSol.SumMapping(balances)
transfer(to,tokens): Ensures VeriSol.Old(balances[msg.sender]) >= balances[msg.sender]
CodeWithJoe: Ensures VeriSol.ContractInvariant(decimals == 18)
CodeWithJoe: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(balances) == _totalSupply)

False Invariants:
CodeWithJoe: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(balances) == 751913935000000000000000000)
CodeWithJoe: Ensures VeriSol.ContractInvariant(_totalSupply == 751913935000000000000000000)
CodeWithJoe: Ensures VeriSol.ContractInvariant(decimals < VeriSol.SumMapping(balances))
CodeWithJoe: Ensures VeriSol.ContractInvariant(decimals < _totalSupply)

 // ./gambit_out_approve/mutants/769/verisol_test