Invariants with True value:17
Invariants with False value:1

True Invariants:
approve(spender,tokens): Requires msg.sender != address(0)
approve(spender,tokens): Ensures VeriSol.Old(uint256(decimals)) == decimals
approve(spender,tokens): Ensures _totalSupply == VeriSol.Old(_totalSupply)
transfer(to,tokens): Requires msg.sender != address(0)
transfer(to,tokens): Requires tokens <= VeriSol.Old(balances[msg.sender])
transfer(to,tokens): Ensures VeriSol.SumMapping(balances) == VeriSol.Old(VeriSol.SumMapping(balances))
transfer(to,tokens): Ensures VeriSol.Old(uint256(decimals)) == decimals
transfer(to,tokens): Ensures tokens <= balances[to]
transfer(to,tokens): Ensures VeriSol.Old(balances[to]) <= balances[to]
transfer(to,tokens): Ensures _totalSupply == VeriSol.Old(_totalSupply)
transfer(to,tokens): Ensures VeriSol.Old(balances[msg.sender]) >= balances[msg.sender]
ZeepyNetwork: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(balances) == 1000000000000000000000000000000000)
ZeepyNetwork: Ensures VeriSol.ContractInvariant(decimals == 18)
ZeepyNetwork: Ensures VeriSol.ContractInvariant(_totalSupply == 1000000000000000000000000000000000)
ZeepyNetwork: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(balances) > decimals)
ZeepyNetwork: Ensures VeriSol.ContractInvariant(VeriSol.SumMapping(balances) == _totalSupply)
ZeepyNetwork: Ensures VeriSol.ContractInvariant(decimals < _totalSupply)

False Invariants:
approve(spender,tokens): Ensures tokens == allowed[msg.sender][spender]

 // ./gambit_out_approve/mutants/457/verisol_test