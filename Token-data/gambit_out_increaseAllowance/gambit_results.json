[
  {
    "description": "DeleteExpressionMutation",
    "diff": "--- original\n+++ mutant\n@@ -1,499 +1,500 @@\n-/*\r\n-\r\n-TG- https://t.me/FlatulenceToken\r\n-\r\n-by elon\r\n-\r\n-*/\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n- * the optional functions; to access them see `ERC20Detailed`.\r\n- */\r\n-interface IERC20 {\r\n-    /**\r\n-     * @dev Returns the amount of tokens in existence.\r\n-     */\r\n-    function totalSupply() external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Returns the amount of tokens owned by `account`.\r\n-     */\r\n-    function balanceOf(address account) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Returns the remaining number of tokens that `spender` will be\r\n-     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n-     * zero by default.\r\n-     *\r\n-     * This value changes when `approve` or `transferFrom` are called.\r\n-     */\r\n-    function allowance(address owner, address spender) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * > Beware that changing an allowance with this method brings the risk\r\n-     * that someone may use both the old and the new allowance by unfortunate\r\n-     * transaction ordering. One possible solution to mitigate this race\r\n-     * condition is to first reduce the spender's allowance to 0 and set the\r\n-     * desired value afterwards:\r\n-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     */\r\n-    function approve(address spender, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n-     * allowance mechanism. `amount` is then deducted from the caller's\r\n-     * allowance.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n-     * another (`to`).\r\n-     *\r\n-     * Note that `value` may be zero.\r\n-     */\r\n-    event Transfer(address indexed from, address indexed to, uint256 value);\r\n-\r\n-    /**\r\n-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n-     * a call to `approve`. `value` is the new allowance.\r\n-     */\r\n-    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n- * checks.\r\n- *\r\n- * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n- * in bugs, because programmers usually assume that an overflow raises an\r\n- * error, which is the standard behavior in high level programming languages.\r\n- * `SafeMath` restores this intuition by reverting the transaction when an\r\n- * operation overflows.\r\n- *\r\n- * Using this library instead of the unchecked operations eliminates an entire\r\n- * class of bugs, so it's recommended to use it always.\r\n- */\r\n-library SafeMath {\r\n-    /**\r\n-     * @dev Returns the addition of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `+` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Addition cannot overflow.\r\n-     */\r\n-    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        uint256 c = a + b;\r\n-        require(c >= a, \"SafeMath: addition overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n-     * overflow (when the result is negative).\r\n-     *\r\n-     * Counterpart to Solidity's `-` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Subtraction cannot overflow.\r\n-     */\r\n-    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b <= a, \"SafeMath: subtraction overflow\");\r\n-        uint256 c = a - b;\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `*` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Multiplication cannot overflow.\r\n-     */\r\n-    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n-        // benefit is lost if 'b' is also tested.\r\n-        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n-        if (a == 0) {\r\n-            return 0;\r\n-        }\r\n-\r\n-        uint256 c = a * b;\r\n-        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n-     * division by zero. The result is rounded towards zero.\r\n-     *\r\n-     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n-     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n-     * uses an invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Solidity only automatically asserts when dividing by 0\r\n-        require(b > 0, \"SafeMath: division by zero\");\r\n-        uint256 c = a / b;\r\n-        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n-     * Reverts when dividing by zero.\r\n-     *\r\n-     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n-     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n-     * invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b != 0, \"SafeMath: modulo by zero\");\r\n-        return a % b;\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-\r\n-/**\r\n- * @dev Implementation of the `IERC20` interface.\r\n- *\r\n- * This implementation is agnostic to the way tokens are created. This means\r\n- * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n- * For a generic mechanism see `ERC20Mintable`.\r\n- *\r\n- * *For a detailed writeup see our guide [How to implement supply\r\n- * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n- *\r\n- * We have followed general OpenZeppelin guidelines: functions revert instead\r\n- * of returning `false` on failure. This behavior is nonetheless conventional\r\n- * and does not conflict with the expectations of ERC20 applications.\r\n- *\r\n- * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n- * This allows applications to reconstruct the allowance for all accounts just\r\n- * by listening to said events. Other implementations of the EIP may not emit\r\n- * these events, as it isn't required by the specification.\r\n- *\r\n- * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n- * functions have been added to mitigate the well-known issues around setting\r\n- * allowances. See `IERC20.approve`.\r\n- */\r\n-contract ERC20 is IERC20 {\r\n-    using SafeMath for uint256;\r\n-\r\n-    mapping (address => uint256) private _balances;\r\n-\r\n-    mapping (address => mapping (address => uint256)) private _allowances;\r\n-\r\n-    uint256 private _totalSupply;\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.totalSupply`.\r\n-     */\r\n-    function totalSupply() public view returns (uint256) {\r\n-        return _totalSupply;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.balanceOf`.\r\n-     */\r\n-    function balanceOf(address account) public view returns (uint256) {\r\n-        return _balances[account];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transfer`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - the caller must have a balance of at least `amount`.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(msg.sender, recipient, amount);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.allowance`.\r\n-     */\r\n-    function allowance(address owner, address spender) public view returns (uint256) {\r\n-        return _allowances[owner][spender];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.approve`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function approve(address spender, uint256 value) public returns (bool) {\r\n-        _approve(msg.sender, spender, value);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transferFrom`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance. This is not\r\n-     * required by the EIP. See the note at the beginning of `ERC20`;\r\n-     *\r\n-     * Requirements:\r\n-     * - `sender` and `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `value`.\r\n-     * - the caller must have allowance for `sender`'s tokens of at least\r\n-     * `amount`.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(sender, recipient, amount);\r\n-        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     * - `spender` must have allowance for the caller of at least\r\n-     * `subtractedValue`.\r\n-     */\r\n-    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n-     *\r\n-     * This is internal function is equivalent to `transfer`, and can be used to\r\n-     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `sender` cannot be the zero address.\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `amount`.\r\n-     */\r\n-    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n-        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n-        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n-\r\n-        _balances[sender] = _balances[sender].sub(amount);\r\n-        _balances[recipient] = _balances[recipient].add(amount);\r\n-        emit Transfer(sender, recipient, amount);\r\n-    }\r\n-\r\n-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n-     * the total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `from` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `to` cannot be the zero address.\r\n-     */\r\n-    function _mint(address account, uint256 amount) internal {\r\n-        require(account != address(0), \"ERC20: mint to the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.add(amount);\r\n-        _balances[account] = _balances[account].add(amount);\r\n-        emit Transfer(address(0), account, amount);\r\n-    }\r\n-\r\n-     /**\r\n-     * @dev Destroys `amount` tokens from `account`, reducing the\r\n-     * total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `to` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `account` cannot be the zero address.\r\n-     * - `account` must have at least `amount` tokens.\r\n-     */\r\n-    function _burn(address account, uint256 value) internal {\r\n-        require(account != address(0), \"ERC20: burn from the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.sub(value);\r\n-        _balances[account] = _balances[account].sub(value);\r\n-        emit Transfer(account, address(0), value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n-     *\r\n-     * This is internal function is equivalent to `approve`, and can be used to\r\n-     * e.g. set automatic allowances for certain subsystems, etc.\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `owner` cannot be the zero address.\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function _approve(address owner, address spender, uint256 value) internal {\r\n-        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n-        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n-\r\n-        _allowances[owner][spender] = value;\r\n-        emit Approval(owner, spender, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n-     * from the caller's allowance.\r\n-     *\r\n-     * See `_burn` and `_approve`.\r\n-     */\r\n-    function _burnFrom(address account, uint256 amount) internal {\r\n-        _burn(account, amount);\r\n-        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-/**\r\n- * @title TokenMintERC20Token\r\n- * @author TokenMint (visit https://tokenmint.io)\r\n- *\r\n- * @dev Standard ERC20 token with burning and optional functions implemented.\r\n- * For full specification of ERC-20 standard see:\r\n- * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- */\r\n-contract TokenMintERC20Token is ERC20 {\r\n-\r\n-    string private _name;\r\n-    string private _symbol;\r\n-    uint8 private _decimals;\r\n-\r\n-    /**\r\n-     * @dev Constructor.\r\n-     * @param name name of the token\r\n-     * @param symbol symbol of the token, 3-4 chars is recommended\r\n-     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n-     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n-     * @param tokenOwnerAddress address that gets 100% of token supply\r\n-     */\r\n-    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n-      _name = name;\r\n-      _symbol = symbol;\r\n-      _decimals = decimals;\r\n-\r\n-      // set tokenOwnerAddress as owner of all tokens\r\n-      _mint(tokenOwnerAddress, totalSupply);\r\n-\r\n-      // pay the service fee for contract deployment\r\n-      feeReceiver.transfer(msg.value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Burns a specific amount of tokens.\r\n-     * @param value The amount of lowest token units to be burned.\r\n-     */\r\n-    function burn(uint256 value) public {\r\n-      _burn(msg.sender, value);\r\n-    }\r\n-\r\n-    // optional functions from ERC20 stardard\r\n-\r\n-    /**\r\n-     * @return the name of the token.\r\n-     */\r\n-    function name() public view returns (string memory) {\r\n-      return _name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the symbol of the token.\r\n-     */\r\n-    function symbol() public view returns (string memory) {\r\n-      return _symbol;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the number of decimals of the token.\r\n-     */\r\n-    function decimals() public view returns (uint8) {\r\n-      return _decimals;\r\n-    }\r\n-\r\n-     \r\n+/*\n+\n+TG- https://t.me/FlatulenceToken\n+\n+by elon\n+\n+*/\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n+ * the optional functions; to access them see `ERC20Detailed`.\n+ */\n+interface IERC20 {\n+    /**\n+     * @dev Returns the amount of tokens in existence.\n+     */\n+    function totalSupply() external view returns (uint256);\n+\n+    /**\n+     * @dev Returns the amount of tokens owned by `account`.\n+     */\n+    function balanceOf(address account) external view returns (uint256);\n+\n+    /**\n+     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transfer(address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Returns the remaining number of tokens that `spender` will be\n+     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n+     * zero by default.\n+     *\n+     * This value changes when `approve` or `transferFrom` are called.\n+     */\n+    function allowance(address owner, address spender) external view returns (uint256);\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * > Beware that changing an allowance with this method brings the risk\n+     * that someone may use both the old and the new allowance by unfortunate\n+     * transaction ordering. One possible solution to mitigate this race\n+     * condition is to first reduce the spender's allowance to 0 and set the\n+     * desired value afterwards:\n+     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n+     *\n+     * Emits an `Approval` event.\n+     */\n+    function approve(address spender, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n+     * allowance mechanism. `amount` is then deducted from the caller's\n+     * allowance.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n+     * another (`to`).\n+     *\n+     * Note that `value` may be zero.\n+     */\n+    event Transfer(address indexed from, address indexed to, uint256 value);\n+\n+    /**\n+     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n+     * a call to `approve`. `value` is the new allowance.\n+     */\n+    event Approval(address indexed owner, address indexed spender, uint256 value);\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Wrappers over Solidity's arithmetic operations with added overflow\n+ * checks.\n+ *\n+ * Arithmetic operations in Solidity wrap on overflow. This can easily result\n+ * in bugs, because programmers usually assume that an overflow raises an\n+ * error, which is the standard behavior in high level programming languages.\n+ * `SafeMath` restores this intuition by reverting the transaction when an\n+ * operation overflows.\n+ *\n+ * Using this library instead of the unchecked operations eliminates an entire\n+ * class of bugs, so it's recommended to use it always.\n+ */\n+library SafeMath {\n+    /**\n+     * @dev Returns the addition of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `+` operator.\n+     *\n+     * Requirements:\n+     * - Addition cannot overflow.\n+     */\n+    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n+        uint256 c = a + b;\n+        require(c >= a, \"SafeMath: addition overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the subtraction of two unsigned integers, reverting on\n+     * overflow (when the result is negative).\n+     *\n+     * Counterpart to Solidity's `-` operator.\n+     *\n+     * Requirements:\n+     * - Subtraction cannot overflow.\n+     */\n+    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b <= a, \"SafeMath: subtraction overflow\");\n+        uint256 c = a - b;\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the multiplication of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `*` operator.\n+     *\n+     * Requirements:\n+     * - Multiplication cannot overflow.\n+     */\n+    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n+        // benefit is lost if 'b' is also tested.\n+        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n+        if (a == 0) {\n+            return 0;\n+        }\n+\n+        uint256 c = a * b;\n+        require(c / a == b, \"SafeMath: multiplication overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the integer division of two unsigned integers. Reverts on\n+     * division by zero. The result is rounded towards zero.\n+     *\n+     * Counterpart to Solidity's `/` operator. Note: this function uses a\n+     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n+     * uses an invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Solidity only automatically asserts when dividing by 0\n+        require(b > 0, \"SafeMath: division by zero\");\n+        uint256 c = a / b;\n+        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n+     * Reverts when dividing by zero.\n+     *\n+     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n+     * opcode (which leaves remaining gas untouched) while Solidity uses an\n+     * invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b != 0, \"SafeMath: modulo by zero\");\n+        return a % b;\n+    }\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+\n+/**\n+ * @dev Implementation of the `IERC20` interface.\n+ *\n+ * This implementation is agnostic to the way tokens are created. This means\n+ * that a supply mechanism has to be added in a derived contract using `_mint`.\n+ * For a generic mechanism see `ERC20Mintable`.\n+ *\n+ * *For a detailed writeup see our guide [How to implement supply\n+ * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n+ *\n+ * We have followed general OpenZeppelin guidelines: functions revert instead\n+ * of returning `false` on failure. This behavior is nonetheless conventional\n+ * and does not conflict with the expectations of ERC20 applications.\n+ *\n+ * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n+ * This allows applications to reconstruct the allowance for all accounts just\n+ * by listening to said events. Other implementations of the EIP may not emit\n+ * these events, as it isn't required by the specification.\n+ *\n+ * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n+ * functions have been added to mitigate the well-known issues around setting\n+ * allowances. See `IERC20.approve`.\n+ */\n+contract ERC20 is IERC20 {\n+    using SafeMath for uint256;\n+\n+    mapping (address => uint256) private _balances;\n+\n+    mapping (address => mapping (address => uint256)) private _allowances;\n+\n+    uint256 private _totalSupply;\n+\n+    /**\n+     * @dev See `IERC20.totalSupply`.\n+     */\n+    function totalSupply() public view returns (uint256) {\n+        return _totalSupply;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.balanceOf`.\n+     */\n+    function balanceOf(address account) public view returns (uint256) {\n+        return _balances[account];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transfer`.\n+     *\n+     * Requirements:\n+     *\n+     * - `recipient` cannot be the zero address.\n+     * - the caller must have a balance of at least `amount`.\n+     */\n+    function transfer(address recipient, uint256 amount) public returns (bool) {\n+        _transfer(msg.sender, recipient, amount);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.allowance`.\n+     */\n+    function allowance(address owner, address spender) public view returns (uint256) {\n+        return _allowances[owner][spender];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.approve`.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function approve(address spender, uint256 value) public returns (bool) {\n+        _approve(msg.sender, spender, value);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transferFrom`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance. This is not\n+     * required by the EIP. See the note at the beginning of `ERC20`;\n+     *\n+     * Requirements:\n+     * - `sender` and `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `value`.\n+     * - the caller must have allowance for `sender`'s tokens of at least\n+     * `amount`.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n+        _transfer(sender, recipient, amount);\n+        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically increases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     * - `spender` must have allowance for the caller of at least\n+     * `subtractedValue`.\n+     */\n+    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Moves tokens `amount` from `sender` to `recipient`.\n+     *\n+     * This is internal function is equivalent to `transfer`, and can be used to\n+     * e.g. implement automatic token fees, slashing mechanisms, etc.\n+     *\n+     * Emits a `Transfer` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `sender` cannot be the zero address.\n+     * - `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `amount`.\n+     */\n+    function _transfer(address sender, address recipient, uint256 amount) internal {\n+        require(sender != address(0), \"ERC20: transfer from the zero address\");\n+        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n+\n+        _balances[sender] = _balances[sender].sub(amount);\n+        _balances[recipient] = _balances[recipient].add(amount);\n+        emit Transfer(sender, recipient, amount);\n+    }\n+\n+    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n+     * the total supply.\n+     *\n+     * Emits a `Transfer` event with `from` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `to` cannot be the zero address.\n+     */\n+    function _mint(address account, uint256 amount) internal {\n+        require(account != address(0), \"ERC20: mint to the zero address\");\n+\n+        _totalSupply = _totalSupply.add(amount);\n+        _balances[account] = _balances[account].add(amount);\n+        emit Transfer(address(0), account, amount);\n+    }\n+\n+     /**\n+     * @dev Destroys `amount` tokens from `account`, reducing the\n+     * total supply.\n+     *\n+     * Emits a `Transfer` event with `to` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `account` cannot be the zero address.\n+     * - `account` must have at least `amount` tokens.\n+     */\n+    function _burn(address account, uint256 value) internal {\n+        require(account != address(0), \"ERC20: burn from the zero address\");\n+\n+        _totalSupply = _totalSupply.sub(value);\n+        _balances[account] = _balances[account].sub(value);\n+        emit Transfer(account, address(0), value);\n+    }\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n+     *\n+     * This is internal function is equivalent to `approve`, and can be used to\n+     * e.g. set automatic allowances for certain subsystems, etc.\n+     *\n+     * Emits an `Approval` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `owner` cannot be the zero address.\n+     * - `spender` cannot be the zero address.\n+     */\n+    function _approve(address owner, address spender, uint256 value) internal {\n+        /// DeleteExpressionMutation(`require(owner != address(0), \"ERC20: approve from the zero address\")` |==> `assert(true)`) of: `require(owner != address(0), \"ERC20: approve from the zero address\");`\n+        assert(true);\n+        require(spender != address(0), \"ERC20: approve to the zero address\");\n+\n+        _allowances[owner][spender] = value;\n+        emit Approval(owner, spender, value);\n+    }\n+\n+    /**\n+     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n+     * from the caller's allowance.\n+     *\n+     * See `_burn` and `_approve`.\n+     */\n+    function _burnFrom(address account, uint256 amount) internal {\n+        _burn(account, amount);\n+        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n+    }\n+}\n+\n+// File: contracts\\ERC20\\TokenMintERC20Token.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+/**\n+ * @title TokenMintERC20Token\n+ * @author TokenMint (visit https://tokenmint.io)\n+ *\n+ * @dev Standard ERC20 token with burning and optional functions implemented.\n+ * For full specification of ERC-20 standard see:\n+ * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n+ */\n+contract TokenMintERC20Token is ERC20 {\n+\n+    string private _name;\n+    string private _symbol;\n+    uint8 private _decimals;\n+\n+    /**\n+     * @dev Constructor.\n+     * @param name name of the token\n+     * @param symbol symbol of the token, 3-4 chars is recommended\n+     * @param decimals number of decimal places of one token unit, 18 is widely used\n+     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n+     * @param tokenOwnerAddress address that gets 100% of token supply\n+     */\n+    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n+      _name = name;\n+      _symbol = symbol;\n+      _decimals = decimals;\n+\n+      // set tokenOwnerAddress as owner of all tokens\n+      _mint(tokenOwnerAddress, totalSupply);\n+\n+      // pay the service fee for contract deployment\n+      feeReceiver.transfer(msg.value);\n+    }\n+\n+    /**\n+     * @dev Burns a specific amount of tokens.\n+     * @param value The amount of lowest token units to be burned.\n+     */\n+    function burn(uint256 value) public {\n+      _burn(msg.sender, value);\n+    }\n+\n+    // optional functions from ERC20 stardard\n+\n+    /**\n+     * @return the name of the token.\n+     */\n+    function name() public view returns (string memory) {\n+      return _name;\n+    }\n+\n+    /**\n+     * @return the symbol of the token.\n+     */\n+    function symbol() public view returns (string memory) {\n+      return _symbol;\n+    }\n+\n+    /**\n+     * @return the number of decimals of the token.\n+     */\n+    function decimals() public view returns (uint8) {\n+      return _decimals;\n+    }\n+\n+     \n }\n\\ No newline at end of file\n",
    "id": "1",
    "name": "mutants/1/verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "original": "verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "sourceroot": "/home/liuye/Projects/InvConPlus"
  },
  {
    "description": "RequireMutation",
    "diff": "--- original\n+++ mutant\n@@ -1,499 +1,500 @@\n-/*\r\n-\r\n-TG- https://t.me/FlatulenceToken\r\n-\r\n-by elon\r\n-\r\n-*/\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n- * the optional functions; to access them see `ERC20Detailed`.\r\n- */\r\n-interface IERC20 {\r\n-    /**\r\n-     * @dev Returns the amount of tokens in existence.\r\n-     */\r\n-    function totalSupply() external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Returns the amount of tokens owned by `account`.\r\n-     */\r\n-    function balanceOf(address account) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Returns the remaining number of tokens that `spender` will be\r\n-     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n-     * zero by default.\r\n-     *\r\n-     * This value changes when `approve` or `transferFrom` are called.\r\n-     */\r\n-    function allowance(address owner, address spender) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * > Beware that changing an allowance with this method brings the risk\r\n-     * that someone may use both the old and the new allowance by unfortunate\r\n-     * transaction ordering. One possible solution to mitigate this race\r\n-     * condition is to first reduce the spender's allowance to 0 and set the\r\n-     * desired value afterwards:\r\n-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     */\r\n-    function approve(address spender, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n-     * allowance mechanism. `amount` is then deducted from the caller's\r\n-     * allowance.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n-     * another (`to`).\r\n-     *\r\n-     * Note that `value` may be zero.\r\n-     */\r\n-    event Transfer(address indexed from, address indexed to, uint256 value);\r\n-\r\n-    /**\r\n-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n-     * a call to `approve`. `value` is the new allowance.\r\n-     */\r\n-    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n- * checks.\r\n- *\r\n- * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n- * in bugs, because programmers usually assume that an overflow raises an\r\n- * error, which is the standard behavior in high level programming languages.\r\n- * `SafeMath` restores this intuition by reverting the transaction when an\r\n- * operation overflows.\r\n- *\r\n- * Using this library instead of the unchecked operations eliminates an entire\r\n- * class of bugs, so it's recommended to use it always.\r\n- */\r\n-library SafeMath {\r\n-    /**\r\n-     * @dev Returns the addition of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `+` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Addition cannot overflow.\r\n-     */\r\n-    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        uint256 c = a + b;\r\n-        require(c >= a, \"SafeMath: addition overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n-     * overflow (when the result is negative).\r\n-     *\r\n-     * Counterpart to Solidity's `-` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Subtraction cannot overflow.\r\n-     */\r\n-    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b <= a, \"SafeMath: subtraction overflow\");\r\n-        uint256 c = a - b;\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `*` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Multiplication cannot overflow.\r\n-     */\r\n-    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n-        // benefit is lost if 'b' is also tested.\r\n-        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n-        if (a == 0) {\r\n-            return 0;\r\n-        }\r\n-\r\n-        uint256 c = a * b;\r\n-        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n-     * division by zero. The result is rounded towards zero.\r\n-     *\r\n-     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n-     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n-     * uses an invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Solidity only automatically asserts when dividing by 0\r\n-        require(b > 0, \"SafeMath: division by zero\");\r\n-        uint256 c = a / b;\r\n-        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n-     * Reverts when dividing by zero.\r\n-     *\r\n-     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n-     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n-     * invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b != 0, \"SafeMath: modulo by zero\");\r\n-        return a % b;\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-\r\n-/**\r\n- * @dev Implementation of the `IERC20` interface.\r\n- *\r\n- * This implementation is agnostic to the way tokens are created. This means\r\n- * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n- * For a generic mechanism see `ERC20Mintable`.\r\n- *\r\n- * *For a detailed writeup see our guide [How to implement supply\r\n- * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n- *\r\n- * We have followed general OpenZeppelin guidelines: functions revert instead\r\n- * of returning `false` on failure. This behavior is nonetheless conventional\r\n- * and does not conflict with the expectations of ERC20 applications.\r\n- *\r\n- * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n- * This allows applications to reconstruct the allowance for all accounts just\r\n- * by listening to said events. Other implementations of the EIP may not emit\r\n- * these events, as it isn't required by the specification.\r\n- *\r\n- * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n- * functions have been added to mitigate the well-known issues around setting\r\n- * allowances. See `IERC20.approve`.\r\n- */\r\n-contract ERC20 is IERC20 {\r\n-    using SafeMath for uint256;\r\n-\r\n-    mapping (address => uint256) private _balances;\r\n-\r\n-    mapping (address => mapping (address => uint256)) private _allowances;\r\n-\r\n-    uint256 private _totalSupply;\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.totalSupply`.\r\n-     */\r\n-    function totalSupply() public view returns (uint256) {\r\n-        return _totalSupply;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.balanceOf`.\r\n-     */\r\n-    function balanceOf(address account) public view returns (uint256) {\r\n-        return _balances[account];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transfer`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - the caller must have a balance of at least `amount`.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(msg.sender, recipient, amount);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.allowance`.\r\n-     */\r\n-    function allowance(address owner, address spender) public view returns (uint256) {\r\n-        return _allowances[owner][spender];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.approve`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function approve(address spender, uint256 value) public returns (bool) {\r\n-        _approve(msg.sender, spender, value);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transferFrom`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance. This is not\r\n-     * required by the EIP. See the note at the beginning of `ERC20`;\r\n-     *\r\n-     * Requirements:\r\n-     * - `sender` and `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `value`.\r\n-     * - the caller must have allowance for `sender`'s tokens of at least\r\n-     * `amount`.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(sender, recipient, amount);\r\n-        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     * - `spender` must have allowance for the caller of at least\r\n-     * `subtractedValue`.\r\n-     */\r\n-    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n-     *\r\n-     * This is internal function is equivalent to `transfer`, and can be used to\r\n-     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `sender` cannot be the zero address.\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `amount`.\r\n-     */\r\n-    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n-        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n-        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n-\r\n-        _balances[sender] = _balances[sender].sub(amount);\r\n-        _balances[recipient] = _balances[recipient].add(amount);\r\n-        emit Transfer(sender, recipient, amount);\r\n-    }\r\n-\r\n-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n-     * the total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `from` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `to` cannot be the zero address.\r\n-     */\r\n-    function _mint(address account, uint256 amount) internal {\r\n-        require(account != address(0), \"ERC20: mint to the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.add(amount);\r\n-        _balances[account] = _balances[account].add(amount);\r\n-        emit Transfer(address(0), account, amount);\r\n-    }\r\n-\r\n-     /**\r\n-     * @dev Destroys `amount` tokens from `account`, reducing the\r\n-     * total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `to` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `account` cannot be the zero address.\r\n-     * - `account` must have at least `amount` tokens.\r\n-     */\r\n-    function _burn(address account, uint256 value) internal {\r\n-        require(account != address(0), \"ERC20: burn from the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.sub(value);\r\n-        _balances[account] = _balances[account].sub(value);\r\n-        emit Transfer(account, address(0), value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n-     *\r\n-     * This is internal function is equivalent to `approve`, and can be used to\r\n-     * e.g. set automatic allowances for certain subsystems, etc.\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `owner` cannot be the zero address.\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function _approve(address owner, address spender, uint256 value) internal {\r\n-        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n-        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n-\r\n-        _allowances[owner][spender] = value;\r\n-        emit Approval(owner, spender, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n-     * from the caller's allowance.\r\n-     *\r\n-     * See `_burn` and `_approve`.\r\n-     */\r\n-    function _burnFrom(address account, uint256 amount) internal {\r\n-        _burn(account, amount);\r\n-        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-/**\r\n- * @title TokenMintERC20Token\r\n- * @author TokenMint (visit https://tokenmint.io)\r\n- *\r\n- * @dev Standard ERC20 token with burning and optional functions implemented.\r\n- * For full specification of ERC-20 standard see:\r\n- * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- */\r\n-contract TokenMintERC20Token is ERC20 {\r\n-\r\n-    string private _name;\r\n-    string private _symbol;\r\n-    uint8 private _decimals;\r\n-\r\n-    /**\r\n-     * @dev Constructor.\r\n-     * @param name name of the token\r\n-     * @param symbol symbol of the token, 3-4 chars is recommended\r\n-     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n-     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n-     * @param tokenOwnerAddress address that gets 100% of token supply\r\n-     */\r\n-    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n-      _name = name;\r\n-      _symbol = symbol;\r\n-      _decimals = decimals;\r\n-\r\n-      // set tokenOwnerAddress as owner of all tokens\r\n-      _mint(tokenOwnerAddress, totalSupply);\r\n-\r\n-      // pay the service fee for contract deployment\r\n-      feeReceiver.transfer(msg.value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Burns a specific amount of tokens.\r\n-     * @param value The amount of lowest token units to be burned.\r\n-     */\r\n-    function burn(uint256 value) public {\r\n-      _burn(msg.sender, value);\r\n-    }\r\n-\r\n-    // optional functions from ERC20 stardard\r\n-\r\n-    /**\r\n-     * @return the name of the token.\r\n-     */\r\n-    function name() public view returns (string memory) {\r\n-      return _name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the symbol of the token.\r\n-     */\r\n-    function symbol() public view returns (string memory) {\r\n-      return _symbol;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the number of decimals of the token.\r\n-     */\r\n-    function decimals() public view returns (uint8) {\r\n-      return _decimals;\r\n-    }\r\n-\r\n-     \r\n+/*\n+\n+TG- https://t.me/FlatulenceToken\n+\n+by elon\n+\n+*/\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n+ * the optional functions; to access them see `ERC20Detailed`.\n+ */\n+interface IERC20 {\n+    /**\n+     * @dev Returns the amount of tokens in existence.\n+     */\n+    function totalSupply() external view returns (uint256);\n+\n+    /**\n+     * @dev Returns the amount of tokens owned by `account`.\n+     */\n+    function balanceOf(address account) external view returns (uint256);\n+\n+    /**\n+     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transfer(address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Returns the remaining number of tokens that `spender` will be\n+     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n+     * zero by default.\n+     *\n+     * This value changes when `approve` or `transferFrom` are called.\n+     */\n+    function allowance(address owner, address spender) external view returns (uint256);\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * > Beware that changing an allowance with this method brings the risk\n+     * that someone may use both the old and the new allowance by unfortunate\n+     * transaction ordering. One possible solution to mitigate this race\n+     * condition is to first reduce the spender's allowance to 0 and set the\n+     * desired value afterwards:\n+     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n+     *\n+     * Emits an `Approval` event.\n+     */\n+    function approve(address spender, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n+     * allowance mechanism. `amount` is then deducted from the caller's\n+     * allowance.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n+     * another (`to`).\n+     *\n+     * Note that `value` may be zero.\n+     */\n+    event Transfer(address indexed from, address indexed to, uint256 value);\n+\n+    /**\n+     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n+     * a call to `approve`. `value` is the new allowance.\n+     */\n+    event Approval(address indexed owner, address indexed spender, uint256 value);\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Wrappers over Solidity's arithmetic operations with added overflow\n+ * checks.\n+ *\n+ * Arithmetic operations in Solidity wrap on overflow. This can easily result\n+ * in bugs, because programmers usually assume that an overflow raises an\n+ * error, which is the standard behavior in high level programming languages.\n+ * `SafeMath` restores this intuition by reverting the transaction when an\n+ * operation overflows.\n+ *\n+ * Using this library instead of the unchecked operations eliminates an entire\n+ * class of bugs, so it's recommended to use it always.\n+ */\n+library SafeMath {\n+    /**\n+     * @dev Returns the addition of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `+` operator.\n+     *\n+     * Requirements:\n+     * - Addition cannot overflow.\n+     */\n+    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n+        uint256 c = a + b;\n+        require(c >= a, \"SafeMath: addition overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the subtraction of two unsigned integers, reverting on\n+     * overflow (when the result is negative).\n+     *\n+     * Counterpart to Solidity's `-` operator.\n+     *\n+     * Requirements:\n+     * - Subtraction cannot overflow.\n+     */\n+    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b <= a, \"SafeMath: subtraction overflow\");\n+        uint256 c = a - b;\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the multiplication of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `*` operator.\n+     *\n+     * Requirements:\n+     * - Multiplication cannot overflow.\n+     */\n+    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n+        // benefit is lost if 'b' is also tested.\n+        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n+        if (a == 0) {\n+            return 0;\n+        }\n+\n+        uint256 c = a * b;\n+        require(c / a == b, \"SafeMath: multiplication overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the integer division of two unsigned integers. Reverts on\n+     * division by zero. The result is rounded towards zero.\n+     *\n+     * Counterpart to Solidity's `/` operator. Note: this function uses a\n+     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n+     * uses an invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Solidity only automatically asserts when dividing by 0\n+        require(b > 0, \"SafeMath: division by zero\");\n+        uint256 c = a / b;\n+        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n+     * Reverts when dividing by zero.\n+     *\n+     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n+     * opcode (which leaves remaining gas untouched) while Solidity uses an\n+     * invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b != 0, \"SafeMath: modulo by zero\");\n+        return a % b;\n+    }\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+\n+/**\n+ * @dev Implementation of the `IERC20` interface.\n+ *\n+ * This implementation is agnostic to the way tokens are created. This means\n+ * that a supply mechanism has to be added in a derived contract using `_mint`.\n+ * For a generic mechanism see `ERC20Mintable`.\n+ *\n+ * *For a detailed writeup see our guide [How to implement supply\n+ * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n+ *\n+ * We have followed general OpenZeppelin guidelines: functions revert instead\n+ * of returning `false` on failure. This behavior is nonetheless conventional\n+ * and does not conflict with the expectations of ERC20 applications.\n+ *\n+ * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n+ * This allows applications to reconstruct the allowance for all accounts just\n+ * by listening to said events. Other implementations of the EIP may not emit\n+ * these events, as it isn't required by the specification.\n+ *\n+ * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n+ * functions have been added to mitigate the well-known issues around setting\n+ * allowances. See `IERC20.approve`.\n+ */\n+contract ERC20 is IERC20 {\n+    using SafeMath for uint256;\n+\n+    mapping (address => uint256) private _balances;\n+\n+    mapping (address => mapping (address => uint256)) private _allowances;\n+\n+    uint256 private _totalSupply;\n+\n+    /**\n+     * @dev See `IERC20.totalSupply`.\n+     */\n+    function totalSupply() public view returns (uint256) {\n+        return _totalSupply;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.balanceOf`.\n+     */\n+    function balanceOf(address account) public view returns (uint256) {\n+        return _balances[account];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transfer`.\n+     *\n+     * Requirements:\n+     *\n+     * - `recipient` cannot be the zero address.\n+     * - the caller must have a balance of at least `amount`.\n+     */\n+    function transfer(address recipient, uint256 amount) public returns (bool) {\n+        _transfer(msg.sender, recipient, amount);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.allowance`.\n+     */\n+    function allowance(address owner, address spender) public view returns (uint256) {\n+        return _allowances[owner][spender];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.approve`.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function approve(address spender, uint256 value) public returns (bool) {\n+        _approve(msg.sender, spender, value);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transferFrom`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance. This is not\n+     * required by the EIP. See the note at the beginning of `ERC20`;\n+     *\n+     * Requirements:\n+     * - `sender` and `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `value`.\n+     * - the caller must have allowance for `sender`'s tokens of at least\n+     * `amount`.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n+        _transfer(sender, recipient, amount);\n+        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically increases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     * - `spender` must have allowance for the caller of at least\n+     * `subtractedValue`.\n+     */\n+    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Moves tokens `amount` from `sender` to `recipient`.\n+     *\n+     * This is internal function is equivalent to `transfer`, and can be used to\n+     * e.g. implement automatic token fees, slashing mechanisms, etc.\n+     *\n+     * Emits a `Transfer` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `sender` cannot be the zero address.\n+     * - `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `amount`.\n+     */\n+    function _transfer(address sender, address recipient, uint256 amount) internal {\n+        require(sender != address(0), \"ERC20: transfer from the zero address\");\n+        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n+\n+        _balances[sender] = _balances[sender].sub(amount);\n+        _balances[recipient] = _balances[recipient].add(amount);\n+        emit Transfer(sender, recipient, amount);\n+    }\n+\n+    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n+     * the total supply.\n+     *\n+     * Emits a `Transfer` event with `from` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `to` cannot be the zero address.\n+     */\n+    function _mint(address account, uint256 amount) internal {\n+        require(account != address(0), \"ERC20: mint to the zero address\");\n+\n+        _totalSupply = _totalSupply.add(amount);\n+        _balances[account] = _balances[account].add(amount);\n+        emit Transfer(address(0), account, amount);\n+    }\n+\n+     /**\n+     * @dev Destroys `amount` tokens from `account`, reducing the\n+     * total supply.\n+     *\n+     * Emits a `Transfer` event with `to` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `account` cannot be the zero address.\n+     * - `account` must have at least `amount` tokens.\n+     */\n+    function _burn(address account, uint256 value) internal {\n+        require(account != address(0), \"ERC20: burn from the zero address\");\n+\n+        _totalSupply = _totalSupply.sub(value);\n+        _balances[account] = _balances[account].sub(value);\n+        emit Transfer(account, address(0), value);\n+    }\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n+     *\n+     * This is internal function is equivalent to `approve`, and can be used to\n+     * e.g. set automatic allowances for certain subsystems, etc.\n+     *\n+     * Emits an `Approval` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `owner` cannot be the zero address.\n+     * - `spender` cannot be the zero address.\n+     */\n+    function _approve(address owner, address spender, uint256 value) internal {\n+        /// RequireMutation(`owner != address(0)` |==> `false`) of: `require(owner != address(0), \"ERC20: approve from the zero address\");`\n+        require(false, \"ERC20: approve from the zero address\");\n+        require(spender != address(0), \"ERC20: approve to the zero address\");\n+\n+        _allowances[owner][spender] = value;\n+        emit Approval(owner, spender, value);\n+    }\n+\n+    /**\n+     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n+     * from the caller's allowance.\n+     *\n+     * See `_burn` and `_approve`.\n+     */\n+    function _burnFrom(address account, uint256 amount) internal {\n+        _burn(account, amount);\n+        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n+    }\n+}\n+\n+// File: contracts\\ERC20\\TokenMintERC20Token.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+/**\n+ * @title TokenMintERC20Token\n+ * @author TokenMint (visit https://tokenmint.io)\n+ *\n+ * @dev Standard ERC20 token with burning and optional functions implemented.\n+ * For full specification of ERC-20 standard see:\n+ * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n+ */\n+contract TokenMintERC20Token is ERC20 {\n+\n+    string private _name;\n+    string private _symbol;\n+    uint8 private _decimals;\n+\n+    /**\n+     * @dev Constructor.\n+     * @param name name of the token\n+     * @param symbol symbol of the token, 3-4 chars is recommended\n+     * @param decimals number of decimal places of one token unit, 18 is widely used\n+     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n+     * @param tokenOwnerAddress address that gets 100% of token supply\n+     */\n+    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n+      _name = name;\n+      _symbol = symbol;\n+      _decimals = decimals;\n+\n+      // set tokenOwnerAddress as owner of all tokens\n+      _mint(tokenOwnerAddress, totalSupply);\n+\n+      // pay the service fee for contract deployment\n+      feeReceiver.transfer(msg.value);\n+    }\n+\n+    /**\n+     * @dev Burns a specific amount of tokens.\n+     * @param value The amount of lowest token units to be burned.\n+     */\n+    function burn(uint256 value) public {\n+      _burn(msg.sender, value);\n+    }\n+\n+    // optional functions from ERC20 stardard\n+\n+    /**\n+     * @return the name of the token.\n+     */\n+    function name() public view returns (string memory) {\n+      return _name;\n+    }\n+\n+    /**\n+     * @return the symbol of the token.\n+     */\n+    function symbol() public view returns (string memory) {\n+      return _symbol;\n+    }\n+\n+    /**\n+     * @return the number of decimals of the token.\n+     */\n+    function decimals() public view returns (uint8) {\n+      return _decimals;\n+    }\n+\n+     \n }\n\\ No newline at end of file\n",
    "id": "2",
    "name": "mutants/2/verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "original": "verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "sourceroot": "/home/liuye/Projects/InvConPlus"
  },
  {
    "description": "DeleteExpressionMutation",
    "diff": "--- original\n+++ mutant\n@@ -1,499 +1,500 @@\n-/*\r\n-\r\n-TG- https://t.me/FlatulenceToken\r\n-\r\n-by elon\r\n-\r\n-*/\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n- * the optional functions; to access them see `ERC20Detailed`.\r\n- */\r\n-interface IERC20 {\r\n-    /**\r\n-     * @dev Returns the amount of tokens in existence.\r\n-     */\r\n-    function totalSupply() external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Returns the amount of tokens owned by `account`.\r\n-     */\r\n-    function balanceOf(address account) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Returns the remaining number of tokens that `spender` will be\r\n-     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n-     * zero by default.\r\n-     *\r\n-     * This value changes when `approve` or `transferFrom` are called.\r\n-     */\r\n-    function allowance(address owner, address spender) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * > Beware that changing an allowance with this method brings the risk\r\n-     * that someone may use both the old and the new allowance by unfortunate\r\n-     * transaction ordering. One possible solution to mitigate this race\r\n-     * condition is to first reduce the spender's allowance to 0 and set the\r\n-     * desired value afterwards:\r\n-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     */\r\n-    function approve(address spender, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n-     * allowance mechanism. `amount` is then deducted from the caller's\r\n-     * allowance.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n-     * another (`to`).\r\n-     *\r\n-     * Note that `value` may be zero.\r\n-     */\r\n-    event Transfer(address indexed from, address indexed to, uint256 value);\r\n-\r\n-    /**\r\n-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n-     * a call to `approve`. `value` is the new allowance.\r\n-     */\r\n-    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n- * checks.\r\n- *\r\n- * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n- * in bugs, because programmers usually assume that an overflow raises an\r\n- * error, which is the standard behavior in high level programming languages.\r\n- * `SafeMath` restores this intuition by reverting the transaction when an\r\n- * operation overflows.\r\n- *\r\n- * Using this library instead of the unchecked operations eliminates an entire\r\n- * class of bugs, so it's recommended to use it always.\r\n- */\r\n-library SafeMath {\r\n-    /**\r\n-     * @dev Returns the addition of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `+` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Addition cannot overflow.\r\n-     */\r\n-    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        uint256 c = a + b;\r\n-        require(c >= a, \"SafeMath: addition overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n-     * overflow (when the result is negative).\r\n-     *\r\n-     * Counterpart to Solidity's `-` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Subtraction cannot overflow.\r\n-     */\r\n-    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b <= a, \"SafeMath: subtraction overflow\");\r\n-        uint256 c = a - b;\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `*` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Multiplication cannot overflow.\r\n-     */\r\n-    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n-        // benefit is lost if 'b' is also tested.\r\n-        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n-        if (a == 0) {\r\n-            return 0;\r\n-        }\r\n-\r\n-        uint256 c = a * b;\r\n-        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n-     * division by zero. The result is rounded towards zero.\r\n-     *\r\n-     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n-     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n-     * uses an invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Solidity only automatically asserts when dividing by 0\r\n-        require(b > 0, \"SafeMath: division by zero\");\r\n-        uint256 c = a / b;\r\n-        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n-     * Reverts when dividing by zero.\r\n-     *\r\n-     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n-     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n-     * invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b != 0, \"SafeMath: modulo by zero\");\r\n-        return a % b;\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-\r\n-/**\r\n- * @dev Implementation of the `IERC20` interface.\r\n- *\r\n- * This implementation is agnostic to the way tokens are created. This means\r\n- * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n- * For a generic mechanism see `ERC20Mintable`.\r\n- *\r\n- * *For a detailed writeup see our guide [How to implement supply\r\n- * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n- *\r\n- * We have followed general OpenZeppelin guidelines: functions revert instead\r\n- * of returning `false` on failure. This behavior is nonetheless conventional\r\n- * and does not conflict with the expectations of ERC20 applications.\r\n- *\r\n- * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n- * This allows applications to reconstruct the allowance for all accounts just\r\n- * by listening to said events. Other implementations of the EIP may not emit\r\n- * these events, as it isn't required by the specification.\r\n- *\r\n- * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n- * functions have been added to mitigate the well-known issues around setting\r\n- * allowances. See `IERC20.approve`.\r\n- */\r\n-contract ERC20 is IERC20 {\r\n-    using SafeMath for uint256;\r\n-\r\n-    mapping (address => uint256) private _balances;\r\n-\r\n-    mapping (address => mapping (address => uint256)) private _allowances;\r\n-\r\n-    uint256 private _totalSupply;\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.totalSupply`.\r\n-     */\r\n-    function totalSupply() public view returns (uint256) {\r\n-        return _totalSupply;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.balanceOf`.\r\n-     */\r\n-    function balanceOf(address account) public view returns (uint256) {\r\n-        return _balances[account];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transfer`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - the caller must have a balance of at least `amount`.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(msg.sender, recipient, amount);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.allowance`.\r\n-     */\r\n-    function allowance(address owner, address spender) public view returns (uint256) {\r\n-        return _allowances[owner][spender];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.approve`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function approve(address spender, uint256 value) public returns (bool) {\r\n-        _approve(msg.sender, spender, value);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transferFrom`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance. This is not\r\n-     * required by the EIP. See the note at the beginning of `ERC20`;\r\n-     *\r\n-     * Requirements:\r\n-     * - `sender` and `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `value`.\r\n-     * - the caller must have allowance for `sender`'s tokens of at least\r\n-     * `amount`.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(sender, recipient, amount);\r\n-        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     * - `spender` must have allowance for the caller of at least\r\n-     * `subtractedValue`.\r\n-     */\r\n-    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n-     *\r\n-     * This is internal function is equivalent to `transfer`, and can be used to\r\n-     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `sender` cannot be the zero address.\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `amount`.\r\n-     */\r\n-    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n-        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n-        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n-\r\n-        _balances[sender] = _balances[sender].sub(amount);\r\n-        _balances[recipient] = _balances[recipient].add(amount);\r\n-        emit Transfer(sender, recipient, amount);\r\n-    }\r\n-\r\n-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n-     * the total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `from` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `to` cannot be the zero address.\r\n-     */\r\n-    function _mint(address account, uint256 amount) internal {\r\n-        require(account != address(0), \"ERC20: mint to the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.add(amount);\r\n-        _balances[account] = _balances[account].add(amount);\r\n-        emit Transfer(address(0), account, amount);\r\n-    }\r\n-\r\n-     /**\r\n-     * @dev Destroys `amount` tokens from `account`, reducing the\r\n-     * total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `to` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `account` cannot be the zero address.\r\n-     * - `account` must have at least `amount` tokens.\r\n-     */\r\n-    function _burn(address account, uint256 value) internal {\r\n-        require(account != address(0), \"ERC20: burn from the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.sub(value);\r\n-        _balances[account] = _balances[account].sub(value);\r\n-        emit Transfer(account, address(0), value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n-     *\r\n-     * This is internal function is equivalent to `approve`, and can be used to\r\n-     * e.g. set automatic allowances for certain subsystems, etc.\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `owner` cannot be the zero address.\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function _approve(address owner, address spender, uint256 value) internal {\r\n-        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n-        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n-\r\n-        _allowances[owner][spender] = value;\r\n-        emit Approval(owner, spender, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n-     * from the caller's allowance.\r\n-     *\r\n-     * See `_burn` and `_approve`.\r\n-     */\r\n-    function _burnFrom(address account, uint256 amount) internal {\r\n-        _burn(account, amount);\r\n-        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-/**\r\n- * @title TokenMintERC20Token\r\n- * @author TokenMint (visit https://tokenmint.io)\r\n- *\r\n- * @dev Standard ERC20 token with burning and optional functions implemented.\r\n- * For full specification of ERC-20 standard see:\r\n- * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- */\r\n-contract TokenMintERC20Token is ERC20 {\r\n-\r\n-    string private _name;\r\n-    string private _symbol;\r\n-    uint8 private _decimals;\r\n-\r\n-    /**\r\n-     * @dev Constructor.\r\n-     * @param name name of the token\r\n-     * @param symbol symbol of the token, 3-4 chars is recommended\r\n-     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n-     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n-     * @param tokenOwnerAddress address that gets 100% of token supply\r\n-     */\r\n-    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n-      _name = name;\r\n-      _symbol = symbol;\r\n-      _decimals = decimals;\r\n-\r\n-      // set tokenOwnerAddress as owner of all tokens\r\n-      _mint(tokenOwnerAddress, totalSupply);\r\n-\r\n-      // pay the service fee for contract deployment\r\n-      feeReceiver.transfer(msg.value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Burns a specific amount of tokens.\r\n-     * @param value The amount of lowest token units to be burned.\r\n-     */\r\n-    function burn(uint256 value) public {\r\n-      _burn(msg.sender, value);\r\n-    }\r\n-\r\n-    // optional functions from ERC20 stardard\r\n-\r\n-    /**\r\n-     * @return the name of the token.\r\n-     */\r\n-    function name() public view returns (string memory) {\r\n-      return _name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the symbol of the token.\r\n-     */\r\n-    function symbol() public view returns (string memory) {\r\n-      return _symbol;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the number of decimals of the token.\r\n-     */\r\n-    function decimals() public view returns (uint8) {\r\n-      return _decimals;\r\n-    }\r\n-\r\n-     \r\n+/*\n+\n+TG- https://t.me/FlatulenceToken\n+\n+by elon\n+\n+*/\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n+ * the optional functions; to access them see `ERC20Detailed`.\n+ */\n+interface IERC20 {\n+    /**\n+     * @dev Returns the amount of tokens in existence.\n+     */\n+    function totalSupply() external view returns (uint256);\n+\n+    /**\n+     * @dev Returns the amount of tokens owned by `account`.\n+     */\n+    function balanceOf(address account) external view returns (uint256);\n+\n+    /**\n+     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transfer(address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Returns the remaining number of tokens that `spender` will be\n+     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n+     * zero by default.\n+     *\n+     * This value changes when `approve` or `transferFrom` are called.\n+     */\n+    function allowance(address owner, address spender) external view returns (uint256);\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * > Beware that changing an allowance with this method brings the risk\n+     * that someone may use both the old and the new allowance by unfortunate\n+     * transaction ordering. One possible solution to mitigate this race\n+     * condition is to first reduce the spender's allowance to 0 and set the\n+     * desired value afterwards:\n+     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n+     *\n+     * Emits an `Approval` event.\n+     */\n+    function approve(address spender, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n+     * allowance mechanism. `amount` is then deducted from the caller's\n+     * allowance.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n+     * another (`to`).\n+     *\n+     * Note that `value` may be zero.\n+     */\n+    event Transfer(address indexed from, address indexed to, uint256 value);\n+\n+    /**\n+     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n+     * a call to `approve`. `value` is the new allowance.\n+     */\n+    event Approval(address indexed owner, address indexed spender, uint256 value);\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Wrappers over Solidity's arithmetic operations with added overflow\n+ * checks.\n+ *\n+ * Arithmetic operations in Solidity wrap on overflow. This can easily result\n+ * in bugs, because programmers usually assume that an overflow raises an\n+ * error, which is the standard behavior in high level programming languages.\n+ * `SafeMath` restores this intuition by reverting the transaction when an\n+ * operation overflows.\n+ *\n+ * Using this library instead of the unchecked operations eliminates an entire\n+ * class of bugs, so it's recommended to use it always.\n+ */\n+library SafeMath {\n+    /**\n+     * @dev Returns the addition of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `+` operator.\n+     *\n+     * Requirements:\n+     * - Addition cannot overflow.\n+     */\n+    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n+        uint256 c = a + b;\n+        require(c >= a, \"SafeMath: addition overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the subtraction of two unsigned integers, reverting on\n+     * overflow (when the result is negative).\n+     *\n+     * Counterpart to Solidity's `-` operator.\n+     *\n+     * Requirements:\n+     * - Subtraction cannot overflow.\n+     */\n+    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b <= a, \"SafeMath: subtraction overflow\");\n+        uint256 c = a - b;\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the multiplication of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `*` operator.\n+     *\n+     * Requirements:\n+     * - Multiplication cannot overflow.\n+     */\n+    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n+        // benefit is lost if 'b' is also tested.\n+        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n+        if (a == 0) {\n+            return 0;\n+        }\n+\n+        uint256 c = a * b;\n+        require(c / a == b, \"SafeMath: multiplication overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the integer division of two unsigned integers. Reverts on\n+     * division by zero. The result is rounded towards zero.\n+     *\n+     * Counterpart to Solidity's `/` operator. Note: this function uses a\n+     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n+     * uses an invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Solidity only automatically asserts when dividing by 0\n+        require(b > 0, \"SafeMath: division by zero\");\n+        uint256 c = a / b;\n+        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n+     * Reverts when dividing by zero.\n+     *\n+     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n+     * opcode (which leaves remaining gas untouched) while Solidity uses an\n+     * invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b != 0, \"SafeMath: modulo by zero\");\n+        return a % b;\n+    }\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+\n+/**\n+ * @dev Implementation of the `IERC20` interface.\n+ *\n+ * This implementation is agnostic to the way tokens are created. This means\n+ * that a supply mechanism has to be added in a derived contract using `_mint`.\n+ * For a generic mechanism see `ERC20Mintable`.\n+ *\n+ * *For a detailed writeup see our guide [How to implement supply\n+ * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n+ *\n+ * We have followed general OpenZeppelin guidelines: functions revert instead\n+ * of returning `false` on failure. This behavior is nonetheless conventional\n+ * and does not conflict with the expectations of ERC20 applications.\n+ *\n+ * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n+ * This allows applications to reconstruct the allowance for all accounts just\n+ * by listening to said events. Other implementations of the EIP may not emit\n+ * these events, as it isn't required by the specification.\n+ *\n+ * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n+ * functions have been added to mitigate the well-known issues around setting\n+ * allowances. See `IERC20.approve`.\n+ */\n+contract ERC20 is IERC20 {\n+    using SafeMath for uint256;\n+\n+    mapping (address => uint256) private _balances;\n+\n+    mapping (address => mapping (address => uint256)) private _allowances;\n+\n+    uint256 private _totalSupply;\n+\n+    /**\n+     * @dev See `IERC20.totalSupply`.\n+     */\n+    function totalSupply() public view returns (uint256) {\n+        return _totalSupply;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.balanceOf`.\n+     */\n+    function balanceOf(address account) public view returns (uint256) {\n+        return _balances[account];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transfer`.\n+     *\n+     * Requirements:\n+     *\n+     * - `recipient` cannot be the zero address.\n+     * - the caller must have a balance of at least `amount`.\n+     */\n+    function transfer(address recipient, uint256 amount) public returns (bool) {\n+        _transfer(msg.sender, recipient, amount);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.allowance`.\n+     */\n+    function allowance(address owner, address spender) public view returns (uint256) {\n+        return _allowances[owner][spender];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.approve`.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function approve(address spender, uint256 value) public returns (bool) {\n+        _approve(msg.sender, spender, value);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transferFrom`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance. This is not\n+     * required by the EIP. See the note at the beginning of `ERC20`;\n+     *\n+     * Requirements:\n+     * - `sender` and `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `value`.\n+     * - the caller must have allowance for `sender`'s tokens of at least\n+     * `amount`.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n+        _transfer(sender, recipient, amount);\n+        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically increases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     * - `spender` must have allowance for the caller of at least\n+     * `subtractedValue`.\n+     */\n+    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Moves tokens `amount` from `sender` to `recipient`.\n+     *\n+     * This is internal function is equivalent to `transfer`, and can be used to\n+     * e.g. implement automatic token fees, slashing mechanisms, etc.\n+     *\n+     * Emits a `Transfer` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `sender` cannot be the zero address.\n+     * - `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `amount`.\n+     */\n+    function _transfer(address sender, address recipient, uint256 amount) internal {\n+        require(sender != address(0), \"ERC20: transfer from the zero address\");\n+        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n+\n+        _balances[sender] = _balances[sender].sub(amount);\n+        _balances[recipient] = _balances[recipient].add(amount);\n+        emit Transfer(sender, recipient, amount);\n+    }\n+\n+    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n+     * the total supply.\n+     *\n+     * Emits a `Transfer` event with `from` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `to` cannot be the zero address.\n+     */\n+    function _mint(address account, uint256 amount) internal {\n+        require(account != address(0), \"ERC20: mint to the zero address\");\n+\n+        _totalSupply = _totalSupply.add(amount);\n+        _balances[account] = _balances[account].add(amount);\n+        emit Transfer(address(0), account, amount);\n+    }\n+\n+     /**\n+     * @dev Destroys `amount` tokens from `account`, reducing the\n+     * total supply.\n+     *\n+     * Emits a `Transfer` event with `to` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `account` cannot be the zero address.\n+     * - `account` must have at least `amount` tokens.\n+     */\n+    function _burn(address account, uint256 value) internal {\n+        require(account != address(0), \"ERC20: burn from the zero address\");\n+\n+        _totalSupply = _totalSupply.sub(value);\n+        _balances[account] = _balances[account].sub(value);\n+        emit Transfer(account, address(0), value);\n+    }\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n+     *\n+     * This is internal function is equivalent to `approve`, and can be used to\n+     * e.g. set automatic allowances for certain subsystems, etc.\n+     *\n+     * Emits an `Approval` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `owner` cannot be the zero address.\n+     * - `spender` cannot be the zero address.\n+     */\n+    function _approve(address owner, address spender, uint256 value) internal {\n+        require(owner != address(0), \"ERC20: approve from the zero address\");\n+        /// DeleteExpressionMutation(`require(spender != address(0), \"ERC20: approve to the zero address\")` |==> `assert(true)`) of: `require(spender != address(0), \"ERC20: approve to the zero address\");`\n+        assert(true);\n+\n+        _allowances[owner][spender] = value;\n+        emit Approval(owner, spender, value);\n+    }\n+\n+    /**\n+     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n+     * from the caller's allowance.\n+     *\n+     * See `_burn` and `_approve`.\n+     */\n+    function _burnFrom(address account, uint256 amount) internal {\n+        _burn(account, amount);\n+        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n+    }\n+}\n+\n+// File: contracts\\ERC20\\TokenMintERC20Token.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+/**\n+ * @title TokenMintERC20Token\n+ * @author TokenMint (visit https://tokenmint.io)\n+ *\n+ * @dev Standard ERC20 token with burning and optional functions implemented.\n+ * For full specification of ERC-20 standard see:\n+ * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n+ */\n+contract TokenMintERC20Token is ERC20 {\n+\n+    string private _name;\n+    string private _symbol;\n+    uint8 private _decimals;\n+\n+    /**\n+     * @dev Constructor.\n+     * @param name name of the token\n+     * @param symbol symbol of the token, 3-4 chars is recommended\n+     * @param decimals number of decimal places of one token unit, 18 is widely used\n+     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n+     * @param tokenOwnerAddress address that gets 100% of token supply\n+     */\n+    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n+      _name = name;\n+      _symbol = symbol;\n+      _decimals = decimals;\n+\n+      // set tokenOwnerAddress as owner of all tokens\n+      _mint(tokenOwnerAddress, totalSupply);\n+\n+      // pay the service fee for contract deployment\n+      feeReceiver.transfer(msg.value);\n+    }\n+\n+    /**\n+     * @dev Burns a specific amount of tokens.\n+     * @param value The amount of lowest token units to be burned.\n+     */\n+    function burn(uint256 value) public {\n+      _burn(msg.sender, value);\n+    }\n+\n+    // optional functions from ERC20 stardard\n+\n+    /**\n+     * @return the name of the token.\n+     */\n+    function name() public view returns (string memory) {\n+      return _name;\n+    }\n+\n+    /**\n+     * @return the symbol of the token.\n+     */\n+    function symbol() public view returns (string memory) {\n+      return _symbol;\n+    }\n+\n+    /**\n+     * @return the number of decimals of the token.\n+     */\n+    function decimals() public view returns (uint8) {\n+      return _decimals;\n+    }\n+\n+     \n }\n\\ No newline at end of file\n",
    "id": "3",
    "name": "mutants/3/verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "original": "verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "sourceroot": "/home/liuye/Projects/InvConPlus"
  },
  {
    "description": "RequireMutation",
    "diff": "--- original\n+++ mutant\n@@ -1,499 +1,500 @@\n-/*\r\n-\r\n-TG- https://t.me/FlatulenceToken\r\n-\r\n-by elon\r\n-\r\n-*/\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n- * the optional functions; to access them see `ERC20Detailed`.\r\n- */\r\n-interface IERC20 {\r\n-    /**\r\n-     * @dev Returns the amount of tokens in existence.\r\n-     */\r\n-    function totalSupply() external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Returns the amount of tokens owned by `account`.\r\n-     */\r\n-    function balanceOf(address account) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Returns the remaining number of tokens that `spender` will be\r\n-     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n-     * zero by default.\r\n-     *\r\n-     * This value changes when `approve` or `transferFrom` are called.\r\n-     */\r\n-    function allowance(address owner, address spender) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * > Beware that changing an allowance with this method brings the risk\r\n-     * that someone may use both the old and the new allowance by unfortunate\r\n-     * transaction ordering. One possible solution to mitigate this race\r\n-     * condition is to first reduce the spender's allowance to 0 and set the\r\n-     * desired value afterwards:\r\n-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     */\r\n-    function approve(address spender, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n-     * allowance mechanism. `amount` is then deducted from the caller's\r\n-     * allowance.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n-     * another (`to`).\r\n-     *\r\n-     * Note that `value` may be zero.\r\n-     */\r\n-    event Transfer(address indexed from, address indexed to, uint256 value);\r\n-\r\n-    /**\r\n-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n-     * a call to `approve`. `value` is the new allowance.\r\n-     */\r\n-    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n- * checks.\r\n- *\r\n- * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n- * in bugs, because programmers usually assume that an overflow raises an\r\n- * error, which is the standard behavior in high level programming languages.\r\n- * `SafeMath` restores this intuition by reverting the transaction when an\r\n- * operation overflows.\r\n- *\r\n- * Using this library instead of the unchecked operations eliminates an entire\r\n- * class of bugs, so it's recommended to use it always.\r\n- */\r\n-library SafeMath {\r\n-    /**\r\n-     * @dev Returns the addition of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `+` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Addition cannot overflow.\r\n-     */\r\n-    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        uint256 c = a + b;\r\n-        require(c >= a, \"SafeMath: addition overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n-     * overflow (when the result is negative).\r\n-     *\r\n-     * Counterpart to Solidity's `-` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Subtraction cannot overflow.\r\n-     */\r\n-    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b <= a, \"SafeMath: subtraction overflow\");\r\n-        uint256 c = a - b;\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `*` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Multiplication cannot overflow.\r\n-     */\r\n-    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n-        // benefit is lost if 'b' is also tested.\r\n-        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n-        if (a == 0) {\r\n-            return 0;\r\n-        }\r\n-\r\n-        uint256 c = a * b;\r\n-        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n-     * division by zero. The result is rounded towards zero.\r\n-     *\r\n-     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n-     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n-     * uses an invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Solidity only automatically asserts when dividing by 0\r\n-        require(b > 0, \"SafeMath: division by zero\");\r\n-        uint256 c = a / b;\r\n-        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n-     * Reverts when dividing by zero.\r\n-     *\r\n-     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n-     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n-     * invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b != 0, \"SafeMath: modulo by zero\");\r\n-        return a % b;\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-\r\n-/**\r\n- * @dev Implementation of the `IERC20` interface.\r\n- *\r\n- * This implementation is agnostic to the way tokens are created. This means\r\n- * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n- * For a generic mechanism see `ERC20Mintable`.\r\n- *\r\n- * *For a detailed writeup see our guide [How to implement supply\r\n- * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n- *\r\n- * We have followed general OpenZeppelin guidelines: functions revert instead\r\n- * of returning `false` on failure. This behavior is nonetheless conventional\r\n- * and does not conflict with the expectations of ERC20 applications.\r\n- *\r\n- * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n- * This allows applications to reconstruct the allowance for all accounts just\r\n- * by listening to said events. Other implementations of the EIP may not emit\r\n- * these events, as it isn't required by the specification.\r\n- *\r\n- * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n- * functions have been added to mitigate the well-known issues around setting\r\n- * allowances. See `IERC20.approve`.\r\n- */\r\n-contract ERC20 is IERC20 {\r\n-    using SafeMath for uint256;\r\n-\r\n-    mapping (address => uint256) private _balances;\r\n-\r\n-    mapping (address => mapping (address => uint256)) private _allowances;\r\n-\r\n-    uint256 private _totalSupply;\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.totalSupply`.\r\n-     */\r\n-    function totalSupply() public view returns (uint256) {\r\n-        return _totalSupply;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.balanceOf`.\r\n-     */\r\n-    function balanceOf(address account) public view returns (uint256) {\r\n-        return _balances[account];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transfer`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - the caller must have a balance of at least `amount`.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(msg.sender, recipient, amount);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.allowance`.\r\n-     */\r\n-    function allowance(address owner, address spender) public view returns (uint256) {\r\n-        return _allowances[owner][spender];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.approve`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function approve(address spender, uint256 value) public returns (bool) {\r\n-        _approve(msg.sender, spender, value);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transferFrom`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance. This is not\r\n-     * required by the EIP. See the note at the beginning of `ERC20`;\r\n-     *\r\n-     * Requirements:\r\n-     * - `sender` and `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `value`.\r\n-     * - the caller must have allowance for `sender`'s tokens of at least\r\n-     * `amount`.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(sender, recipient, amount);\r\n-        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     * - `spender` must have allowance for the caller of at least\r\n-     * `subtractedValue`.\r\n-     */\r\n-    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n-     *\r\n-     * This is internal function is equivalent to `transfer`, and can be used to\r\n-     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `sender` cannot be the zero address.\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `amount`.\r\n-     */\r\n-    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n-        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n-        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n-\r\n-        _balances[sender] = _balances[sender].sub(amount);\r\n-        _balances[recipient] = _balances[recipient].add(amount);\r\n-        emit Transfer(sender, recipient, amount);\r\n-    }\r\n-\r\n-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n-     * the total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `from` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `to` cannot be the zero address.\r\n-     */\r\n-    function _mint(address account, uint256 amount) internal {\r\n-        require(account != address(0), \"ERC20: mint to the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.add(amount);\r\n-        _balances[account] = _balances[account].add(amount);\r\n-        emit Transfer(address(0), account, amount);\r\n-    }\r\n-\r\n-     /**\r\n-     * @dev Destroys `amount` tokens from `account`, reducing the\r\n-     * total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `to` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `account` cannot be the zero address.\r\n-     * - `account` must have at least `amount` tokens.\r\n-     */\r\n-    function _burn(address account, uint256 value) internal {\r\n-        require(account != address(0), \"ERC20: burn from the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.sub(value);\r\n-        _balances[account] = _balances[account].sub(value);\r\n-        emit Transfer(account, address(0), value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n-     *\r\n-     * This is internal function is equivalent to `approve`, and can be used to\r\n-     * e.g. set automatic allowances for certain subsystems, etc.\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `owner` cannot be the zero address.\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function _approve(address owner, address spender, uint256 value) internal {\r\n-        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n-        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n-\r\n-        _allowances[owner][spender] = value;\r\n-        emit Approval(owner, spender, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n-     * from the caller's allowance.\r\n-     *\r\n-     * See `_burn` and `_approve`.\r\n-     */\r\n-    function _burnFrom(address account, uint256 amount) internal {\r\n-        _burn(account, amount);\r\n-        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-/**\r\n- * @title TokenMintERC20Token\r\n- * @author TokenMint (visit https://tokenmint.io)\r\n- *\r\n- * @dev Standard ERC20 token with burning and optional functions implemented.\r\n- * For full specification of ERC-20 standard see:\r\n- * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- */\r\n-contract TokenMintERC20Token is ERC20 {\r\n-\r\n-    string private _name;\r\n-    string private _symbol;\r\n-    uint8 private _decimals;\r\n-\r\n-    /**\r\n-     * @dev Constructor.\r\n-     * @param name name of the token\r\n-     * @param symbol symbol of the token, 3-4 chars is recommended\r\n-     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n-     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n-     * @param tokenOwnerAddress address that gets 100% of token supply\r\n-     */\r\n-    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n-      _name = name;\r\n-      _symbol = symbol;\r\n-      _decimals = decimals;\r\n-\r\n-      // set tokenOwnerAddress as owner of all tokens\r\n-      _mint(tokenOwnerAddress, totalSupply);\r\n-\r\n-      // pay the service fee for contract deployment\r\n-      feeReceiver.transfer(msg.value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Burns a specific amount of tokens.\r\n-     * @param value The amount of lowest token units to be burned.\r\n-     */\r\n-    function burn(uint256 value) public {\r\n-      _burn(msg.sender, value);\r\n-    }\r\n-\r\n-    // optional functions from ERC20 stardard\r\n-\r\n-    /**\r\n-     * @return the name of the token.\r\n-     */\r\n-    function name() public view returns (string memory) {\r\n-      return _name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the symbol of the token.\r\n-     */\r\n-    function symbol() public view returns (string memory) {\r\n-      return _symbol;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the number of decimals of the token.\r\n-     */\r\n-    function decimals() public view returns (uint8) {\r\n-      return _decimals;\r\n-    }\r\n-\r\n-     \r\n+/*\n+\n+TG- https://t.me/FlatulenceToken\n+\n+by elon\n+\n+*/\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n+ * the optional functions; to access them see `ERC20Detailed`.\n+ */\n+interface IERC20 {\n+    /**\n+     * @dev Returns the amount of tokens in existence.\n+     */\n+    function totalSupply() external view returns (uint256);\n+\n+    /**\n+     * @dev Returns the amount of tokens owned by `account`.\n+     */\n+    function balanceOf(address account) external view returns (uint256);\n+\n+    /**\n+     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transfer(address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Returns the remaining number of tokens that `spender` will be\n+     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n+     * zero by default.\n+     *\n+     * This value changes when `approve` or `transferFrom` are called.\n+     */\n+    function allowance(address owner, address spender) external view returns (uint256);\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * > Beware that changing an allowance with this method brings the risk\n+     * that someone may use both the old and the new allowance by unfortunate\n+     * transaction ordering. One possible solution to mitigate this race\n+     * condition is to first reduce the spender's allowance to 0 and set the\n+     * desired value afterwards:\n+     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n+     *\n+     * Emits an `Approval` event.\n+     */\n+    function approve(address spender, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n+     * allowance mechanism. `amount` is then deducted from the caller's\n+     * allowance.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n+     * another (`to`).\n+     *\n+     * Note that `value` may be zero.\n+     */\n+    event Transfer(address indexed from, address indexed to, uint256 value);\n+\n+    /**\n+     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n+     * a call to `approve`. `value` is the new allowance.\n+     */\n+    event Approval(address indexed owner, address indexed spender, uint256 value);\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Wrappers over Solidity's arithmetic operations with added overflow\n+ * checks.\n+ *\n+ * Arithmetic operations in Solidity wrap on overflow. This can easily result\n+ * in bugs, because programmers usually assume that an overflow raises an\n+ * error, which is the standard behavior in high level programming languages.\n+ * `SafeMath` restores this intuition by reverting the transaction when an\n+ * operation overflows.\n+ *\n+ * Using this library instead of the unchecked operations eliminates an entire\n+ * class of bugs, so it's recommended to use it always.\n+ */\n+library SafeMath {\n+    /**\n+     * @dev Returns the addition of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `+` operator.\n+     *\n+     * Requirements:\n+     * - Addition cannot overflow.\n+     */\n+    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n+        uint256 c = a + b;\n+        require(c >= a, \"SafeMath: addition overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the subtraction of two unsigned integers, reverting on\n+     * overflow (when the result is negative).\n+     *\n+     * Counterpart to Solidity's `-` operator.\n+     *\n+     * Requirements:\n+     * - Subtraction cannot overflow.\n+     */\n+    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b <= a, \"SafeMath: subtraction overflow\");\n+        uint256 c = a - b;\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the multiplication of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `*` operator.\n+     *\n+     * Requirements:\n+     * - Multiplication cannot overflow.\n+     */\n+    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n+        // benefit is lost if 'b' is also tested.\n+        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n+        if (a == 0) {\n+            return 0;\n+        }\n+\n+        uint256 c = a * b;\n+        require(c / a == b, \"SafeMath: multiplication overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the integer division of two unsigned integers. Reverts on\n+     * division by zero. The result is rounded towards zero.\n+     *\n+     * Counterpart to Solidity's `/` operator. Note: this function uses a\n+     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n+     * uses an invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Solidity only automatically asserts when dividing by 0\n+        require(b > 0, \"SafeMath: division by zero\");\n+        uint256 c = a / b;\n+        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n+     * Reverts when dividing by zero.\n+     *\n+     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n+     * opcode (which leaves remaining gas untouched) while Solidity uses an\n+     * invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b != 0, \"SafeMath: modulo by zero\");\n+        return a % b;\n+    }\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+\n+/**\n+ * @dev Implementation of the `IERC20` interface.\n+ *\n+ * This implementation is agnostic to the way tokens are created. This means\n+ * that a supply mechanism has to be added in a derived contract using `_mint`.\n+ * For a generic mechanism see `ERC20Mintable`.\n+ *\n+ * *For a detailed writeup see our guide [How to implement supply\n+ * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n+ *\n+ * We have followed general OpenZeppelin guidelines: functions revert instead\n+ * of returning `false` on failure. This behavior is nonetheless conventional\n+ * and does not conflict with the expectations of ERC20 applications.\n+ *\n+ * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n+ * This allows applications to reconstruct the allowance for all accounts just\n+ * by listening to said events. Other implementations of the EIP may not emit\n+ * these events, as it isn't required by the specification.\n+ *\n+ * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n+ * functions have been added to mitigate the well-known issues around setting\n+ * allowances. See `IERC20.approve`.\n+ */\n+contract ERC20 is IERC20 {\n+    using SafeMath for uint256;\n+\n+    mapping (address => uint256) private _balances;\n+\n+    mapping (address => mapping (address => uint256)) private _allowances;\n+\n+    uint256 private _totalSupply;\n+\n+    /**\n+     * @dev See `IERC20.totalSupply`.\n+     */\n+    function totalSupply() public view returns (uint256) {\n+        return _totalSupply;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.balanceOf`.\n+     */\n+    function balanceOf(address account) public view returns (uint256) {\n+        return _balances[account];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transfer`.\n+     *\n+     * Requirements:\n+     *\n+     * - `recipient` cannot be the zero address.\n+     * - the caller must have a balance of at least `amount`.\n+     */\n+    function transfer(address recipient, uint256 amount) public returns (bool) {\n+        _transfer(msg.sender, recipient, amount);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.allowance`.\n+     */\n+    function allowance(address owner, address spender) public view returns (uint256) {\n+        return _allowances[owner][spender];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.approve`.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function approve(address spender, uint256 value) public returns (bool) {\n+        _approve(msg.sender, spender, value);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transferFrom`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance. This is not\n+     * required by the EIP. See the note at the beginning of `ERC20`;\n+     *\n+     * Requirements:\n+     * - `sender` and `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `value`.\n+     * - the caller must have allowance for `sender`'s tokens of at least\n+     * `amount`.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n+        _transfer(sender, recipient, amount);\n+        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically increases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     * - `spender` must have allowance for the caller of at least\n+     * `subtractedValue`.\n+     */\n+    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Moves tokens `amount` from `sender` to `recipient`.\n+     *\n+     * This is internal function is equivalent to `transfer`, and can be used to\n+     * e.g. implement automatic token fees, slashing mechanisms, etc.\n+     *\n+     * Emits a `Transfer` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `sender` cannot be the zero address.\n+     * - `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `amount`.\n+     */\n+    function _transfer(address sender, address recipient, uint256 amount) internal {\n+        require(sender != address(0), \"ERC20: transfer from the zero address\");\n+        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n+\n+        _balances[sender] = _balances[sender].sub(amount);\n+        _balances[recipient] = _balances[recipient].add(amount);\n+        emit Transfer(sender, recipient, amount);\n+    }\n+\n+    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n+     * the total supply.\n+     *\n+     * Emits a `Transfer` event with `from` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `to` cannot be the zero address.\n+     */\n+    function _mint(address account, uint256 amount) internal {\n+        require(account != address(0), \"ERC20: mint to the zero address\");\n+\n+        _totalSupply = _totalSupply.add(amount);\n+        _balances[account] = _balances[account].add(amount);\n+        emit Transfer(address(0), account, amount);\n+    }\n+\n+     /**\n+     * @dev Destroys `amount` tokens from `account`, reducing the\n+     * total supply.\n+     *\n+     * Emits a `Transfer` event with `to` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `account` cannot be the zero address.\n+     * - `account` must have at least `amount` tokens.\n+     */\n+    function _burn(address account, uint256 value) internal {\n+        require(account != address(0), \"ERC20: burn from the zero address\");\n+\n+        _totalSupply = _totalSupply.sub(value);\n+        _balances[account] = _balances[account].sub(value);\n+        emit Transfer(account, address(0), value);\n+    }\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n+     *\n+     * This is internal function is equivalent to `approve`, and can be used to\n+     * e.g. set automatic allowances for certain subsystems, etc.\n+     *\n+     * Emits an `Approval` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `owner` cannot be the zero address.\n+     * - `spender` cannot be the zero address.\n+     */\n+    function _approve(address owner, address spender, uint256 value) internal {\n+        require(owner != address(0), \"ERC20: approve from the zero address\");\n+        /// RequireMutation(`spender != address(0)` |==> `true`) of: `require(spender != address(0), \"ERC20: approve to the zero address\");`\n+        require(true, \"ERC20: approve to the zero address\");\n+\n+        _allowances[owner][spender] = value;\n+        emit Approval(owner, spender, value);\n+    }\n+\n+    /**\n+     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n+     * from the caller's allowance.\n+     *\n+     * See `_burn` and `_approve`.\n+     */\n+    function _burnFrom(address account, uint256 amount) internal {\n+        _burn(account, amount);\n+        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n+    }\n+}\n+\n+// File: contracts\\ERC20\\TokenMintERC20Token.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+/**\n+ * @title TokenMintERC20Token\n+ * @author TokenMint (visit https://tokenmint.io)\n+ *\n+ * @dev Standard ERC20 token with burning and optional functions implemented.\n+ * For full specification of ERC-20 standard see:\n+ * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n+ */\n+contract TokenMintERC20Token is ERC20 {\n+\n+    string private _name;\n+    string private _symbol;\n+    uint8 private _decimals;\n+\n+    /**\n+     * @dev Constructor.\n+     * @param name name of the token\n+     * @param symbol symbol of the token, 3-4 chars is recommended\n+     * @param decimals number of decimal places of one token unit, 18 is widely used\n+     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n+     * @param tokenOwnerAddress address that gets 100% of token supply\n+     */\n+    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n+      _name = name;\n+      _symbol = symbol;\n+      _decimals = decimals;\n+\n+      // set tokenOwnerAddress as owner of all tokens\n+      _mint(tokenOwnerAddress, totalSupply);\n+\n+      // pay the service fee for contract deployment\n+      feeReceiver.transfer(msg.value);\n+    }\n+\n+    /**\n+     * @dev Burns a specific amount of tokens.\n+     * @param value The amount of lowest token units to be burned.\n+     */\n+    function burn(uint256 value) public {\n+      _burn(msg.sender, value);\n+    }\n+\n+    // optional functions from ERC20 stardard\n+\n+    /**\n+     * @return the name of the token.\n+     */\n+    function name() public view returns (string memory) {\n+      return _name;\n+    }\n+\n+    /**\n+     * @return the symbol of the token.\n+     */\n+    function symbol() public view returns (string memory) {\n+      return _symbol;\n+    }\n+\n+    /**\n+     * @return the number of decimals of the token.\n+     */\n+    function decimals() public view returns (uint8) {\n+      return _decimals;\n+    }\n+\n+     \n }\n\\ No newline at end of file\n",
    "id": "4",
    "name": "mutants/4/verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "original": "verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "sourceroot": "/home/liuye/Projects/InvConPlus"
  },
  {
    "description": "DeleteExpressionMutation",
    "diff": "--- original\n+++ mutant\n@@ -1,499 +1,500 @@\n-/*\r\n-\r\n-TG- https://t.me/FlatulenceToken\r\n-\r\n-by elon\r\n-\r\n-*/\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n- * the optional functions; to access them see `ERC20Detailed`.\r\n- */\r\n-interface IERC20 {\r\n-    /**\r\n-     * @dev Returns the amount of tokens in existence.\r\n-     */\r\n-    function totalSupply() external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Returns the amount of tokens owned by `account`.\r\n-     */\r\n-    function balanceOf(address account) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Returns the remaining number of tokens that `spender` will be\r\n-     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n-     * zero by default.\r\n-     *\r\n-     * This value changes when `approve` or `transferFrom` are called.\r\n-     */\r\n-    function allowance(address owner, address spender) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * > Beware that changing an allowance with this method brings the risk\r\n-     * that someone may use both the old and the new allowance by unfortunate\r\n-     * transaction ordering. One possible solution to mitigate this race\r\n-     * condition is to first reduce the spender's allowance to 0 and set the\r\n-     * desired value afterwards:\r\n-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     */\r\n-    function approve(address spender, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n-     * allowance mechanism. `amount` is then deducted from the caller's\r\n-     * allowance.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n-     * another (`to`).\r\n-     *\r\n-     * Note that `value` may be zero.\r\n-     */\r\n-    event Transfer(address indexed from, address indexed to, uint256 value);\r\n-\r\n-    /**\r\n-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n-     * a call to `approve`. `value` is the new allowance.\r\n-     */\r\n-    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n- * checks.\r\n- *\r\n- * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n- * in bugs, because programmers usually assume that an overflow raises an\r\n- * error, which is the standard behavior in high level programming languages.\r\n- * `SafeMath` restores this intuition by reverting the transaction when an\r\n- * operation overflows.\r\n- *\r\n- * Using this library instead of the unchecked operations eliminates an entire\r\n- * class of bugs, so it's recommended to use it always.\r\n- */\r\n-library SafeMath {\r\n-    /**\r\n-     * @dev Returns the addition of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `+` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Addition cannot overflow.\r\n-     */\r\n-    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        uint256 c = a + b;\r\n-        require(c >= a, \"SafeMath: addition overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n-     * overflow (when the result is negative).\r\n-     *\r\n-     * Counterpart to Solidity's `-` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Subtraction cannot overflow.\r\n-     */\r\n-    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b <= a, \"SafeMath: subtraction overflow\");\r\n-        uint256 c = a - b;\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `*` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Multiplication cannot overflow.\r\n-     */\r\n-    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n-        // benefit is lost if 'b' is also tested.\r\n-        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n-        if (a == 0) {\r\n-            return 0;\r\n-        }\r\n-\r\n-        uint256 c = a * b;\r\n-        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n-     * division by zero. The result is rounded towards zero.\r\n-     *\r\n-     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n-     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n-     * uses an invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Solidity only automatically asserts when dividing by 0\r\n-        require(b > 0, \"SafeMath: division by zero\");\r\n-        uint256 c = a / b;\r\n-        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n-     * Reverts when dividing by zero.\r\n-     *\r\n-     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n-     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n-     * invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b != 0, \"SafeMath: modulo by zero\");\r\n-        return a % b;\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-\r\n-/**\r\n- * @dev Implementation of the `IERC20` interface.\r\n- *\r\n- * This implementation is agnostic to the way tokens are created. This means\r\n- * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n- * For a generic mechanism see `ERC20Mintable`.\r\n- *\r\n- * *For a detailed writeup see our guide [How to implement supply\r\n- * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n- *\r\n- * We have followed general OpenZeppelin guidelines: functions revert instead\r\n- * of returning `false` on failure. This behavior is nonetheless conventional\r\n- * and does not conflict with the expectations of ERC20 applications.\r\n- *\r\n- * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n- * This allows applications to reconstruct the allowance for all accounts just\r\n- * by listening to said events. Other implementations of the EIP may not emit\r\n- * these events, as it isn't required by the specification.\r\n- *\r\n- * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n- * functions have been added to mitigate the well-known issues around setting\r\n- * allowances. See `IERC20.approve`.\r\n- */\r\n-contract ERC20 is IERC20 {\r\n-    using SafeMath for uint256;\r\n-\r\n-    mapping (address => uint256) private _balances;\r\n-\r\n-    mapping (address => mapping (address => uint256)) private _allowances;\r\n-\r\n-    uint256 private _totalSupply;\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.totalSupply`.\r\n-     */\r\n-    function totalSupply() public view returns (uint256) {\r\n-        return _totalSupply;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.balanceOf`.\r\n-     */\r\n-    function balanceOf(address account) public view returns (uint256) {\r\n-        return _balances[account];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transfer`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - the caller must have a balance of at least `amount`.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(msg.sender, recipient, amount);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.allowance`.\r\n-     */\r\n-    function allowance(address owner, address spender) public view returns (uint256) {\r\n-        return _allowances[owner][spender];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.approve`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function approve(address spender, uint256 value) public returns (bool) {\r\n-        _approve(msg.sender, spender, value);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transferFrom`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance. This is not\r\n-     * required by the EIP. See the note at the beginning of `ERC20`;\r\n-     *\r\n-     * Requirements:\r\n-     * - `sender` and `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `value`.\r\n-     * - the caller must have allowance for `sender`'s tokens of at least\r\n-     * `amount`.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(sender, recipient, amount);\r\n-        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     * - `spender` must have allowance for the caller of at least\r\n-     * `subtractedValue`.\r\n-     */\r\n-    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n-     *\r\n-     * This is internal function is equivalent to `transfer`, and can be used to\r\n-     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `sender` cannot be the zero address.\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `amount`.\r\n-     */\r\n-    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n-        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n-        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n-\r\n-        _balances[sender] = _balances[sender].sub(amount);\r\n-        _balances[recipient] = _balances[recipient].add(amount);\r\n-        emit Transfer(sender, recipient, amount);\r\n-    }\r\n-\r\n-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n-     * the total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `from` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `to` cannot be the zero address.\r\n-     */\r\n-    function _mint(address account, uint256 amount) internal {\r\n-        require(account != address(0), \"ERC20: mint to the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.add(amount);\r\n-        _balances[account] = _balances[account].add(amount);\r\n-        emit Transfer(address(0), account, amount);\r\n-    }\r\n-\r\n-     /**\r\n-     * @dev Destroys `amount` tokens from `account`, reducing the\r\n-     * total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `to` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `account` cannot be the zero address.\r\n-     * - `account` must have at least `amount` tokens.\r\n-     */\r\n-    function _burn(address account, uint256 value) internal {\r\n-        require(account != address(0), \"ERC20: burn from the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.sub(value);\r\n-        _balances[account] = _balances[account].sub(value);\r\n-        emit Transfer(account, address(0), value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n-     *\r\n-     * This is internal function is equivalent to `approve`, and can be used to\r\n-     * e.g. set automatic allowances for certain subsystems, etc.\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `owner` cannot be the zero address.\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function _approve(address owner, address spender, uint256 value) internal {\r\n-        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n-        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n-\r\n-        _allowances[owner][spender] = value;\r\n-        emit Approval(owner, spender, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n-     * from the caller's allowance.\r\n-     *\r\n-     * See `_burn` and `_approve`.\r\n-     */\r\n-    function _burnFrom(address account, uint256 amount) internal {\r\n-        _burn(account, amount);\r\n-        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-/**\r\n- * @title TokenMintERC20Token\r\n- * @author TokenMint (visit https://tokenmint.io)\r\n- *\r\n- * @dev Standard ERC20 token with burning and optional functions implemented.\r\n- * For full specification of ERC-20 standard see:\r\n- * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- */\r\n-contract TokenMintERC20Token is ERC20 {\r\n-\r\n-    string private _name;\r\n-    string private _symbol;\r\n-    uint8 private _decimals;\r\n-\r\n-    /**\r\n-     * @dev Constructor.\r\n-     * @param name name of the token\r\n-     * @param symbol symbol of the token, 3-4 chars is recommended\r\n-     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n-     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n-     * @param tokenOwnerAddress address that gets 100% of token supply\r\n-     */\r\n-    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n-      _name = name;\r\n-      _symbol = symbol;\r\n-      _decimals = decimals;\r\n-\r\n-      // set tokenOwnerAddress as owner of all tokens\r\n-      _mint(tokenOwnerAddress, totalSupply);\r\n-\r\n-      // pay the service fee for contract deployment\r\n-      feeReceiver.transfer(msg.value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Burns a specific amount of tokens.\r\n-     * @param value The amount of lowest token units to be burned.\r\n-     */\r\n-    function burn(uint256 value) public {\r\n-      _burn(msg.sender, value);\r\n-    }\r\n-\r\n-    // optional functions from ERC20 stardard\r\n-\r\n-    /**\r\n-     * @return the name of the token.\r\n-     */\r\n-    function name() public view returns (string memory) {\r\n-      return _name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the symbol of the token.\r\n-     */\r\n-    function symbol() public view returns (string memory) {\r\n-      return _symbol;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the number of decimals of the token.\r\n-     */\r\n-    function decimals() public view returns (uint8) {\r\n-      return _decimals;\r\n-    }\r\n-\r\n-     \r\n+/*\n+\n+TG- https://t.me/FlatulenceToken\n+\n+by elon\n+\n+*/\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n+ * the optional functions; to access them see `ERC20Detailed`.\n+ */\n+interface IERC20 {\n+    /**\n+     * @dev Returns the amount of tokens in existence.\n+     */\n+    function totalSupply() external view returns (uint256);\n+\n+    /**\n+     * @dev Returns the amount of tokens owned by `account`.\n+     */\n+    function balanceOf(address account) external view returns (uint256);\n+\n+    /**\n+     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transfer(address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Returns the remaining number of tokens that `spender` will be\n+     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n+     * zero by default.\n+     *\n+     * This value changes when `approve` or `transferFrom` are called.\n+     */\n+    function allowance(address owner, address spender) external view returns (uint256);\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * > Beware that changing an allowance with this method brings the risk\n+     * that someone may use both the old and the new allowance by unfortunate\n+     * transaction ordering. One possible solution to mitigate this race\n+     * condition is to first reduce the spender's allowance to 0 and set the\n+     * desired value afterwards:\n+     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n+     *\n+     * Emits an `Approval` event.\n+     */\n+    function approve(address spender, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n+     * allowance mechanism. `amount` is then deducted from the caller's\n+     * allowance.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n+     * another (`to`).\n+     *\n+     * Note that `value` may be zero.\n+     */\n+    event Transfer(address indexed from, address indexed to, uint256 value);\n+\n+    /**\n+     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n+     * a call to `approve`. `value` is the new allowance.\n+     */\n+    event Approval(address indexed owner, address indexed spender, uint256 value);\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Wrappers over Solidity's arithmetic operations with added overflow\n+ * checks.\n+ *\n+ * Arithmetic operations in Solidity wrap on overflow. This can easily result\n+ * in bugs, because programmers usually assume that an overflow raises an\n+ * error, which is the standard behavior in high level programming languages.\n+ * `SafeMath` restores this intuition by reverting the transaction when an\n+ * operation overflows.\n+ *\n+ * Using this library instead of the unchecked operations eliminates an entire\n+ * class of bugs, so it's recommended to use it always.\n+ */\n+library SafeMath {\n+    /**\n+     * @dev Returns the addition of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `+` operator.\n+     *\n+     * Requirements:\n+     * - Addition cannot overflow.\n+     */\n+    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n+        uint256 c = a + b;\n+        require(c >= a, \"SafeMath: addition overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the subtraction of two unsigned integers, reverting on\n+     * overflow (when the result is negative).\n+     *\n+     * Counterpart to Solidity's `-` operator.\n+     *\n+     * Requirements:\n+     * - Subtraction cannot overflow.\n+     */\n+    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b <= a, \"SafeMath: subtraction overflow\");\n+        uint256 c = a - b;\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the multiplication of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `*` operator.\n+     *\n+     * Requirements:\n+     * - Multiplication cannot overflow.\n+     */\n+    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n+        // benefit is lost if 'b' is also tested.\n+        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n+        if (a == 0) {\n+            return 0;\n+        }\n+\n+        uint256 c = a * b;\n+        require(c / a == b, \"SafeMath: multiplication overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the integer division of two unsigned integers. Reverts on\n+     * division by zero. The result is rounded towards zero.\n+     *\n+     * Counterpart to Solidity's `/` operator. Note: this function uses a\n+     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n+     * uses an invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Solidity only automatically asserts when dividing by 0\n+        require(b > 0, \"SafeMath: division by zero\");\n+        uint256 c = a / b;\n+        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n+     * Reverts when dividing by zero.\n+     *\n+     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n+     * opcode (which leaves remaining gas untouched) while Solidity uses an\n+     * invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b != 0, \"SafeMath: modulo by zero\");\n+        return a % b;\n+    }\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+\n+/**\n+ * @dev Implementation of the `IERC20` interface.\n+ *\n+ * This implementation is agnostic to the way tokens are created. This means\n+ * that a supply mechanism has to be added in a derived contract using `_mint`.\n+ * For a generic mechanism see `ERC20Mintable`.\n+ *\n+ * *For a detailed writeup see our guide [How to implement supply\n+ * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n+ *\n+ * We have followed general OpenZeppelin guidelines: functions revert instead\n+ * of returning `false` on failure. This behavior is nonetheless conventional\n+ * and does not conflict with the expectations of ERC20 applications.\n+ *\n+ * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n+ * This allows applications to reconstruct the allowance for all accounts just\n+ * by listening to said events. Other implementations of the EIP may not emit\n+ * these events, as it isn't required by the specification.\n+ *\n+ * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n+ * functions have been added to mitigate the well-known issues around setting\n+ * allowances. See `IERC20.approve`.\n+ */\n+contract ERC20 is IERC20 {\n+    using SafeMath for uint256;\n+\n+    mapping (address => uint256) private _balances;\n+\n+    mapping (address => mapping (address => uint256)) private _allowances;\n+\n+    uint256 private _totalSupply;\n+\n+    /**\n+     * @dev See `IERC20.totalSupply`.\n+     */\n+    function totalSupply() public view returns (uint256) {\n+        return _totalSupply;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.balanceOf`.\n+     */\n+    function balanceOf(address account) public view returns (uint256) {\n+        return _balances[account];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transfer`.\n+     *\n+     * Requirements:\n+     *\n+     * - `recipient` cannot be the zero address.\n+     * - the caller must have a balance of at least `amount`.\n+     */\n+    function transfer(address recipient, uint256 amount) public returns (bool) {\n+        _transfer(msg.sender, recipient, amount);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.allowance`.\n+     */\n+    function allowance(address owner, address spender) public view returns (uint256) {\n+        return _allowances[owner][spender];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.approve`.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function approve(address spender, uint256 value) public returns (bool) {\n+        _approve(msg.sender, spender, value);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transferFrom`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance. This is not\n+     * required by the EIP. See the note at the beginning of `ERC20`;\n+     *\n+     * Requirements:\n+     * - `sender` and `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `value`.\n+     * - the caller must have allowance for `sender`'s tokens of at least\n+     * `amount`.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n+        _transfer(sender, recipient, amount);\n+        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically increases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     * - `spender` must have allowance for the caller of at least\n+     * `subtractedValue`.\n+     */\n+    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Moves tokens `amount` from `sender` to `recipient`.\n+     *\n+     * This is internal function is equivalent to `transfer`, and can be used to\n+     * e.g. implement automatic token fees, slashing mechanisms, etc.\n+     *\n+     * Emits a `Transfer` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `sender` cannot be the zero address.\n+     * - `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `amount`.\n+     */\n+    function _transfer(address sender, address recipient, uint256 amount) internal {\n+        require(sender != address(0), \"ERC20: transfer from the zero address\");\n+        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n+\n+        _balances[sender] = _balances[sender].sub(amount);\n+        _balances[recipient] = _balances[recipient].add(amount);\n+        emit Transfer(sender, recipient, amount);\n+    }\n+\n+    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n+     * the total supply.\n+     *\n+     * Emits a `Transfer` event with `from` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `to` cannot be the zero address.\n+     */\n+    function _mint(address account, uint256 amount) internal {\n+        require(account != address(0), \"ERC20: mint to the zero address\");\n+\n+        _totalSupply = _totalSupply.add(amount);\n+        _balances[account] = _balances[account].add(amount);\n+        emit Transfer(address(0), account, amount);\n+    }\n+\n+     /**\n+     * @dev Destroys `amount` tokens from `account`, reducing the\n+     * total supply.\n+     *\n+     * Emits a `Transfer` event with `to` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `account` cannot be the zero address.\n+     * - `account` must have at least `amount` tokens.\n+     */\n+    function _burn(address account, uint256 value) internal {\n+        require(account != address(0), \"ERC20: burn from the zero address\");\n+\n+        _totalSupply = _totalSupply.sub(value);\n+        _balances[account] = _balances[account].sub(value);\n+        emit Transfer(account, address(0), value);\n+    }\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n+     *\n+     * This is internal function is equivalent to `approve`, and can be used to\n+     * e.g. set automatic allowances for certain subsystems, etc.\n+     *\n+     * Emits an `Approval` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `owner` cannot be the zero address.\n+     * - `spender` cannot be the zero address.\n+     */\n+    function _approve(address owner, address spender, uint256 value) internal {\n+        require(owner != address(0), \"ERC20: approve from the zero address\");\n+        require(spender != address(0), \"ERC20: approve to the zero address\");\n+\n+        /// DeleteExpressionMutation(`_allowances[owner][spender] = value` |==> `assert(true)`) of: `_allowances[owner][spender] = value;`\n+        assert(true);\n+        emit Approval(owner, spender, value);\n+    }\n+\n+    /**\n+     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n+     * from the caller's allowance.\n+     *\n+     * See `_burn` and `_approve`.\n+     */\n+    function _burnFrom(address account, uint256 amount) internal {\n+        _burn(account, amount);\n+        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n+    }\n+}\n+\n+// File: contracts\\ERC20\\TokenMintERC20Token.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+/**\n+ * @title TokenMintERC20Token\n+ * @author TokenMint (visit https://tokenmint.io)\n+ *\n+ * @dev Standard ERC20 token with burning and optional functions implemented.\n+ * For full specification of ERC-20 standard see:\n+ * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n+ */\n+contract TokenMintERC20Token is ERC20 {\n+\n+    string private _name;\n+    string private _symbol;\n+    uint8 private _decimals;\n+\n+    /**\n+     * @dev Constructor.\n+     * @param name name of the token\n+     * @param symbol symbol of the token, 3-4 chars is recommended\n+     * @param decimals number of decimal places of one token unit, 18 is widely used\n+     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n+     * @param tokenOwnerAddress address that gets 100% of token supply\n+     */\n+    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n+      _name = name;\n+      _symbol = symbol;\n+      _decimals = decimals;\n+\n+      // set tokenOwnerAddress as owner of all tokens\n+      _mint(tokenOwnerAddress, totalSupply);\n+\n+      // pay the service fee for contract deployment\n+      feeReceiver.transfer(msg.value);\n+    }\n+\n+    /**\n+     * @dev Burns a specific amount of tokens.\n+     * @param value The amount of lowest token units to be burned.\n+     */\n+    function burn(uint256 value) public {\n+      _burn(msg.sender, value);\n+    }\n+\n+    // optional functions from ERC20 stardard\n+\n+    /**\n+     * @return the name of the token.\n+     */\n+    function name() public view returns (string memory) {\n+      return _name;\n+    }\n+\n+    /**\n+     * @return the symbol of the token.\n+     */\n+    function symbol() public view returns (string memory) {\n+      return _symbol;\n+    }\n+\n+    /**\n+     * @return the number of decimals of the token.\n+     */\n+    function decimals() public view returns (uint8) {\n+      return _decimals;\n+    }\n+\n+     \n }\n\\ No newline at end of file\n",
    "id": "5",
    "name": "mutants/5/verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "original": "verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "sourceroot": "/home/liuye/Projects/InvConPlus"
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -1,499 +1,500 @@\n-/*\r\n-\r\n-TG- https://t.me/FlatulenceToken\r\n-\r\n-by elon\r\n-\r\n-*/\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n- * the optional functions; to access them see `ERC20Detailed`.\r\n- */\r\n-interface IERC20 {\r\n-    /**\r\n-     * @dev Returns the amount of tokens in existence.\r\n-     */\r\n-    function totalSupply() external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Returns the amount of tokens owned by `account`.\r\n-     */\r\n-    function balanceOf(address account) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Returns the remaining number of tokens that `spender` will be\r\n-     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n-     * zero by default.\r\n-     *\r\n-     * This value changes when `approve` or `transferFrom` are called.\r\n-     */\r\n-    function allowance(address owner, address spender) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * > Beware that changing an allowance with this method brings the risk\r\n-     * that someone may use both the old and the new allowance by unfortunate\r\n-     * transaction ordering. One possible solution to mitigate this race\r\n-     * condition is to first reduce the spender's allowance to 0 and set the\r\n-     * desired value afterwards:\r\n-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     */\r\n-    function approve(address spender, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n-     * allowance mechanism. `amount` is then deducted from the caller's\r\n-     * allowance.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n-     * another (`to`).\r\n-     *\r\n-     * Note that `value` may be zero.\r\n-     */\r\n-    event Transfer(address indexed from, address indexed to, uint256 value);\r\n-\r\n-    /**\r\n-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n-     * a call to `approve`. `value` is the new allowance.\r\n-     */\r\n-    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n- * checks.\r\n- *\r\n- * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n- * in bugs, because programmers usually assume that an overflow raises an\r\n- * error, which is the standard behavior in high level programming languages.\r\n- * `SafeMath` restores this intuition by reverting the transaction when an\r\n- * operation overflows.\r\n- *\r\n- * Using this library instead of the unchecked operations eliminates an entire\r\n- * class of bugs, so it's recommended to use it always.\r\n- */\r\n-library SafeMath {\r\n-    /**\r\n-     * @dev Returns the addition of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `+` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Addition cannot overflow.\r\n-     */\r\n-    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        uint256 c = a + b;\r\n-        require(c >= a, \"SafeMath: addition overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n-     * overflow (when the result is negative).\r\n-     *\r\n-     * Counterpart to Solidity's `-` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Subtraction cannot overflow.\r\n-     */\r\n-    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b <= a, \"SafeMath: subtraction overflow\");\r\n-        uint256 c = a - b;\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `*` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Multiplication cannot overflow.\r\n-     */\r\n-    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n-        // benefit is lost if 'b' is also tested.\r\n-        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n-        if (a == 0) {\r\n-            return 0;\r\n-        }\r\n-\r\n-        uint256 c = a * b;\r\n-        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n-     * division by zero. The result is rounded towards zero.\r\n-     *\r\n-     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n-     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n-     * uses an invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Solidity only automatically asserts when dividing by 0\r\n-        require(b > 0, \"SafeMath: division by zero\");\r\n-        uint256 c = a / b;\r\n-        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n-     * Reverts when dividing by zero.\r\n-     *\r\n-     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n-     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n-     * invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b != 0, \"SafeMath: modulo by zero\");\r\n-        return a % b;\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-\r\n-/**\r\n- * @dev Implementation of the `IERC20` interface.\r\n- *\r\n- * This implementation is agnostic to the way tokens are created. This means\r\n- * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n- * For a generic mechanism see `ERC20Mintable`.\r\n- *\r\n- * *For a detailed writeup see our guide [How to implement supply\r\n- * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n- *\r\n- * We have followed general OpenZeppelin guidelines: functions revert instead\r\n- * of returning `false` on failure. This behavior is nonetheless conventional\r\n- * and does not conflict with the expectations of ERC20 applications.\r\n- *\r\n- * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n- * This allows applications to reconstruct the allowance for all accounts just\r\n- * by listening to said events. Other implementations of the EIP may not emit\r\n- * these events, as it isn't required by the specification.\r\n- *\r\n- * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n- * functions have been added to mitigate the well-known issues around setting\r\n- * allowances. See `IERC20.approve`.\r\n- */\r\n-contract ERC20 is IERC20 {\r\n-    using SafeMath for uint256;\r\n-\r\n-    mapping (address => uint256) private _balances;\r\n-\r\n-    mapping (address => mapping (address => uint256)) private _allowances;\r\n-\r\n-    uint256 private _totalSupply;\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.totalSupply`.\r\n-     */\r\n-    function totalSupply() public view returns (uint256) {\r\n-        return _totalSupply;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.balanceOf`.\r\n-     */\r\n-    function balanceOf(address account) public view returns (uint256) {\r\n-        return _balances[account];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transfer`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - the caller must have a balance of at least `amount`.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(msg.sender, recipient, amount);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.allowance`.\r\n-     */\r\n-    function allowance(address owner, address spender) public view returns (uint256) {\r\n-        return _allowances[owner][spender];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.approve`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function approve(address spender, uint256 value) public returns (bool) {\r\n-        _approve(msg.sender, spender, value);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transferFrom`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance. This is not\r\n-     * required by the EIP. See the note at the beginning of `ERC20`;\r\n-     *\r\n-     * Requirements:\r\n-     * - `sender` and `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `value`.\r\n-     * - the caller must have allowance for `sender`'s tokens of at least\r\n-     * `amount`.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(sender, recipient, amount);\r\n-        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     * - `spender` must have allowance for the caller of at least\r\n-     * `subtractedValue`.\r\n-     */\r\n-    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n-     *\r\n-     * This is internal function is equivalent to `transfer`, and can be used to\r\n-     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `sender` cannot be the zero address.\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `amount`.\r\n-     */\r\n-    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n-        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n-        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n-\r\n-        _balances[sender] = _balances[sender].sub(amount);\r\n-        _balances[recipient] = _balances[recipient].add(amount);\r\n-        emit Transfer(sender, recipient, amount);\r\n-    }\r\n-\r\n-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n-     * the total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `from` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `to` cannot be the zero address.\r\n-     */\r\n-    function _mint(address account, uint256 amount) internal {\r\n-        require(account != address(0), \"ERC20: mint to the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.add(amount);\r\n-        _balances[account] = _balances[account].add(amount);\r\n-        emit Transfer(address(0), account, amount);\r\n-    }\r\n-\r\n-     /**\r\n-     * @dev Destroys `amount` tokens from `account`, reducing the\r\n-     * total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `to` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `account` cannot be the zero address.\r\n-     * - `account` must have at least `amount` tokens.\r\n-     */\r\n-    function _burn(address account, uint256 value) internal {\r\n-        require(account != address(0), \"ERC20: burn from the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.sub(value);\r\n-        _balances[account] = _balances[account].sub(value);\r\n-        emit Transfer(account, address(0), value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n-     *\r\n-     * This is internal function is equivalent to `approve`, and can be used to\r\n-     * e.g. set automatic allowances for certain subsystems, etc.\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `owner` cannot be the zero address.\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function _approve(address owner, address spender, uint256 value) internal {\r\n-        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n-        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n-\r\n-        _allowances[owner][spender] = value;\r\n-        emit Approval(owner, spender, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n-     * from the caller's allowance.\r\n-     *\r\n-     * See `_burn` and `_approve`.\r\n-     */\r\n-    function _burnFrom(address account, uint256 amount) internal {\r\n-        _burn(account, amount);\r\n-        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-/**\r\n- * @title TokenMintERC20Token\r\n- * @author TokenMint (visit https://tokenmint.io)\r\n- *\r\n- * @dev Standard ERC20 token with burning and optional functions implemented.\r\n- * For full specification of ERC-20 standard see:\r\n- * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- */\r\n-contract TokenMintERC20Token is ERC20 {\r\n-\r\n-    string private _name;\r\n-    string private _symbol;\r\n-    uint8 private _decimals;\r\n-\r\n-    /**\r\n-     * @dev Constructor.\r\n-     * @param name name of the token\r\n-     * @param symbol symbol of the token, 3-4 chars is recommended\r\n-     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n-     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n-     * @param tokenOwnerAddress address that gets 100% of token supply\r\n-     */\r\n-    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n-      _name = name;\r\n-      _symbol = symbol;\r\n-      _decimals = decimals;\r\n-\r\n-      // set tokenOwnerAddress as owner of all tokens\r\n-      _mint(tokenOwnerAddress, totalSupply);\r\n-\r\n-      // pay the service fee for contract deployment\r\n-      feeReceiver.transfer(msg.value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Burns a specific amount of tokens.\r\n-     * @param value The amount of lowest token units to be burned.\r\n-     */\r\n-    function burn(uint256 value) public {\r\n-      _burn(msg.sender, value);\r\n-    }\r\n-\r\n-    // optional functions from ERC20 stardard\r\n-\r\n-    /**\r\n-     * @return the name of the token.\r\n-     */\r\n-    function name() public view returns (string memory) {\r\n-      return _name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the symbol of the token.\r\n-     */\r\n-    function symbol() public view returns (string memory) {\r\n-      return _symbol;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the number of decimals of the token.\r\n-     */\r\n-    function decimals() public view returns (uint8) {\r\n-      return _decimals;\r\n-    }\r\n-\r\n-     \r\n+/*\n+\n+TG- https://t.me/FlatulenceToken\n+\n+by elon\n+\n+*/\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n+ * the optional functions; to access them see `ERC20Detailed`.\n+ */\n+interface IERC20 {\n+    /**\n+     * @dev Returns the amount of tokens in existence.\n+     */\n+    function totalSupply() external view returns (uint256);\n+\n+    /**\n+     * @dev Returns the amount of tokens owned by `account`.\n+     */\n+    function balanceOf(address account) external view returns (uint256);\n+\n+    /**\n+     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transfer(address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Returns the remaining number of tokens that `spender` will be\n+     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n+     * zero by default.\n+     *\n+     * This value changes when `approve` or `transferFrom` are called.\n+     */\n+    function allowance(address owner, address spender) external view returns (uint256);\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * > Beware that changing an allowance with this method brings the risk\n+     * that someone may use both the old and the new allowance by unfortunate\n+     * transaction ordering. One possible solution to mitigate this race\n+     * condition is to first reduce the spender's allowance to 0 and set the\n+     * desired value afterwards:\n+     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n+     *\n+     * Emits an `Approval` event.\n+     */\n+    function approve(address spender, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n+     * allowance mechanism. `amount` is then deducted from the caller's\n+     * allowance.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n+     * another (`to`).\n+     *\n+     * Note that `value` may be zero.\n+     */\n+    event Transfer(address indexed from, address indexed to, uint256 value);\n+\n+    /**\n+     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n+     * a call to `approve`. `value` is the new allowance.\n+     */\n+    event Approval(address indexed owner, address indexed spender, uint256 value);\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Wrappers over Solidity's arithmetic operations with added overflow\n+ * checks.\n+ *\n+ * Arithmetic operations in Solidity wrap on overflow. This can easily result\n+ * in bugs, because programmers usually assume that an overflow raises an\n+ * error, which is the standard behavior in high level programming languages.\n+ * `SafeMath` restores this intuition by reverting the transaction when an\n+ * operation overflows.\n+ *\n+ * Using this library instead of the unchecked operations eliminates an entire\n+ * class of bugs, so it's recommended to use it always.\n+ */\n+library SafeMath {\n+    /**\n+     * @dev Returns the addition of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `+` operator.\n+     *\n+     * Requirements:\n+     * - Addition cannot overflow.\n+     */\n+    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n+        /// BinaryOpMutation(`+` |==> `-`) of: `uint256 c = a + b;`\n+        uint256 c = a-b;\n+        require(c >= a, \"SafeMath: addition overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the subtraction of two unsigned integers, reverting on\n+     * overflow (when the result is negative).\n+     *\n+     * Counterpart to Solidity's `-` operator.\n+     *\n+     * Requirements:\n+     * - Subtraction cannot overflow.\n+     */\n+    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b <= a, \"SafeMath: subtraction overflow\");\n+        uint256 c = a - b;\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the multiplication of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `*` operator.\n+     *\n+     * Requirements:\n+     * - Multiplication cannot overflow.\n+     */\n+    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n+        // benefit is lost if 'b' is also tested.\n+        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n+        if (a == 0) {\n+            return 0;\n+        }\n+\n+        uint256 c = a * b;\n+        require(c / a == b, \"SafeMath: multiplication overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the integer division of two unsigned integers. Reverts on\n+     * division by zero. The result is rounded towards zero.\n+     *\n+     * Counterpart to Solidity's `/` operator. Note: this function uses a\n+     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n+     * uses an invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Solidity only automatically asserts when dividing by 0\n+        require(b > 0, \"SafeMath: division by zero\");\n+        uint256 c = a / b;\n+        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n+     * Reverts when dividing by zero.\n+     *\n+     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n+     * opcode (which leaves remaining gas untouched) while Solidity uses an\n+     * invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b != 0, \"SafeMath: modulo by zero\");\n+        return a % b;\n+    }\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+\n+/**\n+ * @dev Implementation of the `IERC20` interface.\n+ *\n+ * This implementation is agnostic to the way tokens are created. This means\n+ * that a supply mechanism has to be added in a derived contract using `_mint`.\n+ * For a generic mechanism see `ERC20Mintable`.\n+ *\n+ * *For a detailed writeup see our guide [How to implement supply\n+ * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n+ *\n+ * We have followed general OpenZeppelin guidelines: functions revert instead\n+ * of returning `false` on failure. This behavior is nonetheless conventional\n+ * and does not conflict with the expectations of ERC20 applications.\n+ *\n+ * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n+ * This allows applications to reconstruct the allowance for all accounts just\n+ * by listening to said events. Other implementations of the EIP may not emit\n+ * these events, as it isn't required by the specification.\n+ *\n+ * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n+ * functions have been added to mitigate the well-known issues around setting\n+ * allowances. See `IERC20.approve`.\n+ */\n+contract ERC20 is IERC20 {\n+    using SafeMath for uint256;\n+\n+    mapping (address => uint256) private _balances;\n+\n+    mapping (address => mapping (address => uint256)) private _allowances;\n+\n+    uint256 private _totalSupply;\n+\n+    /**\n+     * @dev See `IERC20.totalSupply`.\n+     */\n+    function totalSupply() public view returns (uint256) {\n+        return _totalSupply;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.balanceOf`.\n+     */\n+    function balanceOf(address account) public view returns (uint256) {\n+        return _balances[account];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transfer`.\n+     *\n+     * Requirements:\n+     *\n+     * - `recipient` cannot be the zero address.\n+     * - the caller must have a balance of at least `amount`.\n+     */\n+    function transfer(address recipient, uint256 amount) public returns (bool) {\n+        _transfer(msg.sender, recipient, amount);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.allowance`.\n+     */\n+    function allowance(address owner, address spender) public view returns (uint256) {\n+        return _allowances[owner][spender];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.approve`.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function approve(address spender, uint256 value) public returns (bool) {\n+        _approve(msg.sender, spender, value);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transferFrom`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance. This is not\n+     * required by the EIP. See the note at the beginning of `ERC20`;\n+     *\n+     * Requirements:\n+     * - `sender` and `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `value`.\n+     * - the caller must have allowance for `sender`'s tokens of at least\n+     * `amount`.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n+        _transfer(sender, recipient, amount);\n+        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically increases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     * - `spender` must have allowance for the caller of at least\n+     * `subtractedValue`.\n+     */\n+    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Moves tokens `amount` from `sender` to `recipient`.\n+     *\n+     * This is internal function is equivalent to `transfer`, and can be used to\n+     * e.g. implement automatic token fees, slashing mechanisms, etc.\n+     *\n+     * Emits a `Transfer` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `sender` cannot be the zero address.\n+     * - `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `amount`.\n+     */\n+    function _transfer(address sender, address recipient, uint256 amount) internal {\n+        require(sender != address(0), \"ERC20: transfer from the zero address\");\n+        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n+\n+        _balances[sender] = _balances[sender].sub(amount);\n+        _balances[recipient] = _balances[recipient].add(amount);\n+        emit Transfer(sender, recipient, amount);\n+    }\n+\n+    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n+     * the total supply.\n+     *\n+     * Emits a `Transfer` event with `from` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `to` cannot be the zero address.\n+     */\n+    function _mint(address account, uint256 amount) internal {\n+        require(account != address(0), \"ERC20: mint to the zero address\");\n+\n+        _totalSupply = _totalSupply.add(amount);\n+        _balances[account] = _balances[account].add(amount);\n+        emit Transfer(address(0), account, amount);\n+    }\n+\n+     /**\n+     * @dev Destroys `amount` tokens from `account`, reducing the\n+     * total supply.\n+     *\n+     * Emits a `Transfer` event with `to` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `account` cannot be the zero address.\n+     * - `account` must have at least `amount` tokens.\n+     */\n+    function _burn(address account, uint256 value) internal {\n+        require(account != address(0), \"ERC20: burn from the zero address\");\n+\n+        _totalSupply = _totalSupply.sub(value);\n+        _balances[account] = _balances[account].sub(value);\n+        emit Transfer(account, address(0), value);\n+    }\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n+     *\n+     * This is internal function is equivalent to `approve`, and can be used to\n+     * e.g. set automatic allowances for certain subsystems, etc.\n+     *\n+     * Emits an `Approval` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `owner` cannot be the zero address.\n+     * - `spender` cannot be the zero address.\n+     */\n+    function _approve(address owner, address spender, uint256 value) internal {\n+        require(owner != address(0), \"ERC20: approve from the zero address\");\n+        require(spender != address(0), \"ERC20: approve to the zero address\");\n+\n+        _allowances[owner][spender] = value;\n+        emit Approval(owner, spender, value);\n+    }\n+\n+    /**\n+     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n+     * from the caller's allowance.\n+     *\n+     * See `_burn` and `_approve`.\n+     */\n+    function _burnFrom(address account, uint256 amount) internal {\n+        _burn(account, amount);\n+        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n+    }\n+}\n+\n+// File: contracts\\ERC20\\TokenMintERC20Token.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+/**\n+ * @title TokenMintERC20Token\n+ * @author TokenMint (visit https://tokenmint.io)\n+ *\n+ * @dev Standard ERC20 token with burning and optional functions implemented.\n+ * For full specification of ERC-20 standard see:\n+ * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n+ */\n+contract TokenMintERC20Token is ERC20 {\n+\n+    string private _name;\n+    string private _symbol;\n+    uint8 private _decimals;\n+\n+    /**\n+     * @dev Constructor.\n+     * @param name name of the token\n+     * @param symbol symbol of the token, 3-4 chars is recommended\n+     * @param decimals number of decimal places of one token unit, 18 is widely used\n+     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n+     * @param tokenOwnerAddress address that gets 100% of token supply\n+     */\n+    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n+      _name = name;\n+      _symbol = symbol;\n+      _decimals = decimals;\n+\n+      // set tokenOwnerAddress as owner of all tokens\n+      _mint(tokenOwnerAddress, totalSupply);\n+\n+      // pay the service fee for contract deployment\n+      feeReceiver.transfer(msg.value);\n+    }\n+\n+    /**\n+     * @dev Burns a specific amount of tokens.\n+     * @param value The amount of lowest token units to be burned.\n+     */\n+    function burn(uint256 value) public {\n+      _burn(msg.sender, value);\n+    }\n+\n+    // optional functions from ERC20 stardard\n+\n+    /**\n+     * @return the name of the token.\n+     */\n+    function name() public view returns (string memory) {\n+      return _name;\n+    }\n+\n+    /**\n+     * @return the symbol of the token.\n+     */\n+    function symbol() public view returns (string memory) {\n+      return _symbol;\n+    }\n+\n+    /**\n+     * @return the number of decimals of the token.\n+     */\n+    function decimals() public view returns (uint8) {\n+      return _decimals;\n+    }\n+\n+     \n }\n\\ No newline at end of file\n",
    "id": "6",
    "name": "mutants/6/verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "original": "verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "sourceroot": "/home/liuye/Projects/InvConPlus"
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -1,499 +1,500 @@\n-/*\r\n-\r\n-TG- https://t.me/FlatulenceToken\r\n-\r\n-by elon\r\n-\r\n-*/\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n- * the optional functions; to access them see `ERC20Detailed`.\r\n- */\r\n-interface IERC20 {\r\n-    /**\r\n-     * @dev Returns the amount of tokens in existence.\r\n-     */\r\n-    function totalSupply() external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Returns the amount of tokens owned by `account`.\r\n-     */\r\n-    function balanceOf(address account) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Returns the remaining number of tokens that `spender` will be\r\n-     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n-     * zero by default.\r\n-     *\r\n-     * This value changes when `approve` or `transferFrom` are called.\r\n-     */\r\n-    function allowance(address owner, address spender) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * > Beware that changing an allowance with this method brings the risk\r\n-     * that someone may use both the old and the new allowance by unfortunate\r\n-     * transaction ordering. One possible solution to mitigate this race\r\n-     * condition is to first reduce the spender's allowance to 0 and set the\r\n-     * desired value afterwards:\r\n-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     */\r\n-    function approve(address spender, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n-     * allowance mechanism. `amount` is then deducted from the caller's\r\n-     * allowance.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n-     * another (`to`).\r\n-     *\r\n-     * Note that `value` may be zero.\r\n-     */\r\n-    event Transfer(address indexed from, address indexed to, uint256 value);\r\n-\r\n-    /**\r\n-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n-     * a call to `approve`. `value` is the new allowance.\r\n-     */\r\n-    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n- * checks.\r\n- *\r\n- * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n- * in bugs, because programmers usually assume that an overflow raises an\r\n- * error, which is the standard behavior in high level programming languages.\r\n- * `SafeMath` restores this intuition by reverting the transaction when an\r\n- * operation overflows.\r\n- *\r\n- * Using this library instead of the unchecked operations eliminates an entire\r\n- * class of bugs, so it's recommended to use it always.\r\n- */\r\n-library SafeMath {\r\n-    /**\r\n-     * @dev Returns the addition of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `+` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Addition cannot overflow.\r\n-     */\r\n-    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        uint256 c = a + b;\r\n-        require(c >= a, \"SafeMath: addition overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n-     * overflow (when the result is negative).\r\n-     *\r\n-     * Counterpart to Solidity's `-` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Subtraction cannot overflow.\r\n-     */\r\n-    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b <= a, \"SafeMath: subtraction overflow\");\r\n-        uint256 c = a - b;\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `*` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Multiplication cannot overflow.\r\n-     */\r\n-    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n-        // benefit is lost if 'b' is also tested.\r\n-        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n-        if (a == 0) {\r\n-            return 0;\r\n-        }\r\n-\r\n-        uint256 c = a * b;\r\n-        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n-     * division by zero. The result is rounded towards zero.\r\n-     *\r\n-     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n-     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n-     * uses an invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Solidity only automatically asserts when dividing by 0\r\n-        require(b > 0, \"SafeMath: division by zero\");\r\n-        uint256 c = a / b;\r\n-        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n-     * Reverts when dividing by zero.\r\n-     *\r\n-     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n-     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n-     * invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b != 0, \"SafeMath: modulo by zero\");\r\n-        return a % b;\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-\r\n-/**\r\n- * @dev Implementation of the `IERC20` interface.\r\n- *\r\n- * This implementation is agnostic to the way tokens are created. This means\r\n- * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n- * For a generic mechanism see `ERC20Mintable`.\r\n- *\r\n- * *For a detailed writeup see our guide [How to implement supply\r\n- * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n- *\r\n- * We have followed general OpenZeppelin guidelines: functions revert instead\r\n- * of returning `false` on failure. This behavior is nonetheless conventional\r\n- * and does not conflict with the expectations of ERC20 applications.\r\n- *\r\n- * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n- * This allows applications to reconstruct the allowance for all accounts just\r\n- * by listening to said events. Other implementations of the EIP may not emit\r\n- * these events, as it isn't required by the specification.\r\n- *\r\n- * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n- * functions have been added to mitigate the well-known issues around setting\r\n- * allowances. See `IERC20.approve`.\r\n- */\r\n-contract ERC20 is IERC20 {\r\n-    using SafeMath for uint256;\r\n-\r\n-    mapping (address => uint256) private _balances;\r\n-\r\n-    mapping (address => mapping (address => uint256)) private _allowances;\r\n-\r\n-    uint256 private _totalSupply;\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.totalSupply`.\r\n-     */\r\n-    function totalSupply() public view returns (uint256) {\r\n-        return _totalSupply;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.balanceOf`.\r\n-     */\r\n-    function balanceOf(address account) public view returns (uint256) {\r\n-        return _balances[account];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transfer`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - the caller must have a balance of at least `amount`.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(msg.sender, recipient, amount);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.allowance`.\r\n-     */\r\n-    function allowance(address owner, address spender) public view returns (uint256) {\r\n-        return _allowances[owner][spender];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.approve`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function approve(address spender, uint256 value) public returns (bool) {\r\n-        _approve(msg.sender, spender, value);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transferFrom`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance. This is not\r\n-     * required by the EIP. See the note at the beginning of `ERC20`;\r\n-     *\r\n-     * Requirements:\r\n-     * - `sender` and `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `value`.\r\n-     * - the caller must have allowance for `sender`'s tokens of at least\r\n-     * `amount`.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(sender, recipient, amount);\r\n-        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     * - `spender` must have allowance for the caller of at least\r\n-     * `subtractedValue`.\r\n-     */\r\n-    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n-     *\r\n-     * This is internal function is equivalent to `transfer`, and can be used to\r\n-     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `sender` cannot be the zero address.\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `amount`.\r\n-     */\r\n-    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n-        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n-        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n-\r\n-        _balances[sender] = _balances[sender].sub(amount);\r\n-        _balances[recipient] = _balances[recipient].add(amount);\r\n-        emit Transfer(sender, recipient, amount);\r\n-    }\r\n-\r\n-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n-     * the total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `from` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `to` cannot be the zero address.\r\n-     */\r\n-    function _mint(address account, uint256 amount) internal {\r\n-        require(account != address(0), \"ERC20: mint to the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.add(amount);\r\n-        _balances[account] = _balances[account].add(amount);\r\n-        emit Transfer(address(0), account, amount);\r\n-    }\r\n-\r\n-     /**\r\n-     * @dev Destroys `amount` tokens from `account`, reducing the\r\n-     * total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `to` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `account` cannot be the zero address.\r\n-     * - `account` must have at least `amount` tokens.\r\n-     */\r\n-    function _burn(address account, uint256 value) internal {\r\n-        require(account != address(0), \"ERC20: burn from the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.sub(value);\r\n-        _balances[account] = _balances[account].sub(value);\r\n-        emit Transfer(account, address(0), value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n-     *\r\n-     * This is internal function is equivalent to `approve`, and can be used to\r\n-     * e.g. set automatic allowances for certain subsystems, etc.\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `owner` cannot be the zero address.\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function _approve(address owner, address spender, uint256 value) internal {\r\n-        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n-        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n-\r\n-        _allowances[owner][spender] = value;\r\n-        emit Approval(owner, spender, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n-     * from the caller's allowance.\r\n-     *\r\n-     * See `_burn` and `_approve`.\r\n-     */\r\n-    function _burnFrom(address account, uint256 amount) internal {\r\n-        _burn(account, amount);\r\n-        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-/**\r\n- * @title TokenMintERC20Token\r\n- * @author TokenMint (visit https://tokenmint.io)\r\n- *\r\n- * @dev Standard ERC20 token with burning and optional functions implemented.\r\n- * For full specification of ERC-20 standard see:\r\n- * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- */\r\n-contract TokenMintERC20Token is ERC20 {\r\n-\r\n-    string private _name;\r\n-    string private _symbol;\r\n-    uint8 private _decimals;\r\n-\r\n-    /**\r\n-     * @dev Constructor.\r\n-     * @param name name of the token\r\n-     * @param symbol symbol of the token, 3-4 chars is recommended\r\n-     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n-     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n-     * @param tokenOwnerAddress address that gets 100% of token supply\r\n-     */\r\n-    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n-      _name = name;\r\n-      _symbol = symbol;\r\n-      _decimals = decimals;\r\n-\r\n-      // set tokenOwnerAddress as owner of all tokens\r\n-      _mint(tokenOwnerAddress, totalSupply);\r\n-\r\n-      // pay the service fee for contract deployment\r\n-      feeReceiver.transfer(msg.value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Burns a specific amount of tokens.\r\n-     * @param value The amount of lowest token units to be burned.\r\n-     */\r\n-    function burn(uint256 value) public {\r\n-      _burn(msg.sender, value);\r\n-    }\r\n-\r\n-    // optional functions from ERC20 stardard\r\n-\r\n-    /**\r\n-     * @return the name of the token.\r\n-     */\r\n-    function name() public view returns (string memory) {\r\n-      return _name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the symbol of the token.\r\n-     */\r\n-    function symbol() public view returns (string memory) {\r\n-      return _symbol;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the number of decimals of the token.\r\n-     */\r\n-    function decimals() public view returns (uint8) {\r\n-      return _decimals;\r\n-    }\r\n-\r\n-     \r\n+/*\n+\n+TG- https://t.me/FlatulenceToken\n+\n+by elon\n+\n+*/\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n+ * the optional functions; to access them see `ERC20Detailed`.\n+ */\n+interface IERC20 {\n+    /**\n+     * @dev Returns the amount of tokens in existence.\n+     */\n+    function totalSupply() external view returns (uint256);\n+\n+    /**\n+     * @dev Returns the amount of tokens owned by `account`.\n+     */\n+    function balanceOf(address account) external view returns (uint256);\n+\n+    /**\n+     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transfer(address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Returns the remaining number of tokens that `spender` will be\n+     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n+     * zero by default.\n+     *\n+     * This value changes when `approve` or `transferFrom` are called.\n+     */\n+    function allowance(address owner, address spender) external view returns (uint256);\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * > Beware that changing an allowance with this method brings the risk\n+     * that someone may use both the old and the new allowance by unfortunate\n+     * transaction ordering. One possible solution to mitigate this race\n+     * condition is to first reduce the spender's allowance to 0 and set the\n+     * desired value afterwards:\n+     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n+     *\n+     * Emits an `Approval` event.\n+     */\n+    function approve(address spender, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n+     * allowance mechanism. `amount` is then deducted from the caller's\n+     * allowance.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n+     * another (`to`).\n+     *\n+     * Note that `value` may be zero.\n+     */\n+    event Transfer(address indexed from, address indexed to, uint256 value);\n+\n+    /**\n+     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n+     * a call to `approve`. `value` is the new allowance.\n+     */\n+    event Approval(address indexed owner, address indexed spender, uint256 value);\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Wrappers over Solidity's arithmetic operations with added overflow\n+ * checks.\n+ *\n+ * Arithmetic operations in Solidity wrap on overflow. This can easily result\n+ * in bugs, because programmers usually assume that an overflow raises an\n+ * error, which is the standard behavior in high level programming languages.\n+ * `SafeMath` restores this intuition by reverting the transaction when an\n+ * operation overflows.\n+ *\n+ * Using this library instead of the unchecked operations eliminates an entire\n+ * class of bugs, so it's recommended to use it always.\n+ */\n+library SafeMath {\n+    /**\n+     * @dev Returns the addition of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `+` operator.\n+     *\n+     * Requirements:\n+     * - Addition cannot overflow.\n+     */\n+    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n+        /// BinaryOpMutation(`+` |==> `%`) of: `uint256 c = a + b;`\n+        uint256 c = a%b;\n+        require(c >= a, \"SafeMath: addition overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the subtraction of two unsigned integers, reverting on\n+     * overflow (when the result is negative).\n+     *\n+     * Counterpart to Solidity's `-` operator.\n+     *\n+     * Requirements:\n+     * - Subtraction cannot overflow.\n+     */\n+    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b <= a, \"SafeMath: subtraction overflow\");\n+        uint256 c = a - b;\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the multiplication of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `*` operator.\n+     *\n+     * Requirements:\n+     * - Multiplication cannot overflow.\n+     */\n+    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n+        // benefit is lost if 'b' is also tested.\n+        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n+        if (a == 0) {\n+            return 0;\n+        }\n+\n+        uint256 c = a * b;\n+        require(c / a == b, \"SafeMath: multiplication overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the integer division of two unsigned integers. Reverts on\n+     * division by zero. The result is rounded towards zero.\n+     *\n+     * Counterpart to Solidity's `/` operator. Note: this function uses a\n+     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n+     * uses an invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Solidity only automatically asserts when dividing by 0\n+        require(b > 0, \"SafeMath: division by zero\");\n+        uint256 c = a / b;\n+        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n+     * Reverts when dividing by zero.\n+     *\n+     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n+     * opcode (which leaves remaining gas untouched) while Solidity uses an\n+     * invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b != 0, \"SafeMath: modulo by zero\");\n+        return a % b;\n+    }\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+\n+/**\n+ * @dev Implementation of the `IERC20` interface.\n+ *\n+ * This implementation is agnostic to the way tokens are created. This means\n+ * that a supply mechanism has to be added in a derived contract using `_mint`.\n+ * For a generic mechanism see `ERC20Mintable`.\n+ *\n+ * *For a detailed writeup see our guide [How to implement supply\n+ * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n+ *\n+ * We have followed general OpenZeppelin guidelines: functions revert instead\n+ * of returning `false` on failure. This behavior is nonetheless conventional\n+ * and does not conflict with the expectations of ERC20 applications.\n+ *\n+ * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n+ * This allows applications to reconstruct the allowance for all accounts just\n+ * by listening to said events. Other implementations of the EIP may not emit\n+ * these events, as it isn't required by the specification.\n+ *\n+ * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n+ * functions have been added to mitigate the well-known issues around setting\n+ * allowances. See `IERC20.approve`.\n+ */\n+contract ERC20 is IERC20 {\n+    using SafeMath for uint256;\n+\n+    mapping (address => uint256) private _balances;\n+\n+    mapping (address => mapping (address => uint256)) private _allowances;\n+\n+    uint256 private _totalSupply;\n+\n+    /**\n+     * @dev See `IERC20.totalSupply`.\n+     */\n+    function totalSupply() public view returns (uint256) {\n+        return _totalSupply;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.balanceOf`.\n+     */\n+    function balanceOf(address account) public view returns (uint256) {\n+        return _balances[account];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transfer`.\n+     *\n+     * Requirements:\n+     *\n+     * - `recipient` cannot be the zero address.\n+     * - the caller must have a balance of at least `amount`.\n+     */\n+    function transfer(address recipient, uint256 amount) public returns (bool) {\n+        _transfer(msg.sender, recipient, amount);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.allowance`.\n+     */\n+    function allowance(address owner, address spender) public view returns (uint256) {\n+        return _allowances[owner][spender];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.approve`.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function approve(address spender, uint256 value) public returns (bool) {\n+        _approve(msg.sender, spender, value);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transferFrom`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance. This is not\n+     * required by the EIP. See the note at the beginning of `ERC20`;\n+     *\n+     * Requirements:\n+     * - `sender` and `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `value`.\n+     * - the caller must have allowance for `sender`'s tokens of at least\n+     * `amount`.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n+        _transfer(sender, recipient, amount);\n+        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically increases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     * - `spender` must have allowance for the caller of at least\n+     * `subtractedValue`.\n+     */\n+    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Moves tokens `amount` from `sender` to `recipient`.\n+     *\n+     * This is internal function is equivalent to `transfer`, and can be used to\n+     * e.g. implement automatic token fees, slashing mechanisms, etc.\n+     *\n+     * Emits a `Transfer` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `sender` cannot be the zero address.\n+     * - `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `amount`.\n+     */\n+    function _transfer(address sender, address recipient, uint256 amount) internal {\n+        require(sender != address(0), \"ERC20: transfer from the zero address\");\n+        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n+\n+        _balances[sender] = _balances[sender].sub(amount);\n+        _balances[recipient] = _balances[recipient].add(amount);\n+        emit Transfer(sender, recipient, amount);\n+    }\n+\n+    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n+     * the total supply.\n+     *\n+     * Emits a `Transfer` event with `from` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `to` cannot be the zero address.\n+     */\n+    function _mint(address account, uint256 amount) internal {\n+        require(account != address(0), \"ERC20: mint to the zero address\");\n+\n+        _totalSupply = _totalSupply.add(amount);\n+        _balances[account] = _balances[account].add(amount);\n+        emit Transfer(address(0), account, amount);\n+    }\n+\n+     /**\n+     * @dev Destroys `amount` tokens from `account`, reducing the\n+     * total supply.\n+     *\n+     * Emits a `Transfer` event with `to` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `account` cannot be the zero address.\n+     * - `account` must have at least `amount` tokens.\n+     */\n+    function _burn(address account, uint256 value) internal {\n+        require(account != address(0), \"ERC20: burn from the zero address\");\n+\n+        _totalSupply = _totalSupply.sub(value);\n+        _balances[account] = _balances[account].sub(value);\n+        emit Transfer(account, address(0), value);\n+    }\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n+     *\n+     * This is internal function is equivalent to `approve`, and can be used to\n+     * e.g. set automatic allowances for certain subsystems, etc.\n+     *\n+     * Emits an `Approval` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `owner` cannot be the zero address.\n+     * - `spender` cannot be the zero address.\n+     */\n+    function _approve(address owner, address spender, uint256 value) internal {\n+        require(owner != address(0), \"ERC20: approve from the zero address\");\n+        require(spender != address(0), \"ERC20: approve to the zero address\");\n+\n+        _allowances[owner][spender] = value;\n+        emit Approval(owner, spender, value);\n+    }\n+\n+    /**\n+     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n+     * from the caller's allowance.\n+     *\n+     * See `_burn` and `_approve`.\n+     */\n+    function _burnFrom(address account, uint256 amount) internal {\n+        _burn(account, amount);\n+        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n+    }\n+}\n+\n+// File: contracts\\ERC20\\TokenMintERC20Token.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+/**\n+ * @title TokenMintERC20Token\n+ * @author TokenMint (visit https://tokenmint.io)\n+ *\n+ * @dev Standard ERC20 token with burning and optional functions implemented.\n+ * For full specification of ERC-20 standard see:\n+ * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n+ */\n+contract TokenMintERC20Token is ERC20 {\n+\n+    string private _name;\n+    string private _symbol;\n+    uint8 private _decimals;\n+\n+    /**\n+     * @dev Constructor.\n+     * @param name name of the token\n+     * @param symbol symbol of the token, 3-4 chars is recommended\n+     * @param decimals number of decimal places of one token unit, 18 is widely used\n+     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n+     * @param tokenOwnerAddress address that gets 100% of token supply\n+     */\n+    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n+      _name = name;\n+      _symbol = symbol;\n+      _decimals = decimals;\n+\n+      // set tokenOwnerAddress as owner of all tokens\n+      _mint(tokenOwnerAddress, totalSupply);\n+\n+      // pay the service fee for contract deployment\n+      feeReceiver.transfer(msg.value);\n+    }\n+\n+    /**\n+     * @dev Burns a specific amount of tokens.\n+     * @param value The amount of lowest token units to be burned.\n+     */\n+    function burn(uint256 value) public {\n+      _burn(msg.sender, value);\n+    }\n+\n+    // optional functions from ERC20 stardard\n+\n+    /**\n+     * @return the name of the token.\n+     */\n+    function name() public view returns (string memory) {\n+      return _name;\n+    }\n+\n+    /**\n+     * @return the symbol of the token.\n+     */\n+    function symbol() public view returns (string memory) {\n+      return _symbol;\n+    }\n+\n+    /**\n+     * @return the number of decimals of the token.\n+     */\n+    function decimals() public view returns (uint8) {\n+      return _decimals;\n+    }\n+\n+     \n }\n\\ No newline at end of file\n",
    "id": "7",
    "name": "mutants/7/verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "original": "verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "sourceroot": "/home/liuye/Projects/InvConPlus"
  },
  {
    "description": "RequireMutation",
    "diff": "--- original\n+++ mutant\n@@ -1,499 +1,500 @@\n-/*\r\n-\r\n-TG- https://t.me/FlatulenceToken\r\n-\r\n-by elon\r\n-\r\n-*/\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n- * the optional functions; to access them see `ERC20Detailed`.\r\n- */\r\n-interface IERC20 {\r\n-    /**\r\n-     * @dev Returns the amount of tokens in existence.\r\n-     */\r\n-    function totalSupply() external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Returns the amount of tokens owned by `account`.\r\n-     */\r\n-    function balanceOf(address account) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Returns the remaining number of tokens that `spender` will be\r\n-     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n-     * zero by default.\r\n-     *\r\n-     * This value changes when `approve` or `transferFrom` are called.\r\n-     */\r\n-    function allowance(address owner, address spender) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * > Beware that changing an allowance with this method brings the risk\r\n-     * that someone may use both the old and the new allowance by unfortunate\r\n-     * transaction ordering. One possible solution to mitigate this race\r\n-     * condition is to first reduce the spender's allowance to 0 and set the\r\n-     * desired value afterwards:\r\n-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     */\r\n-    function approve(address spender, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n-     * allowance mechanism. `amount` is then deducted from the caller's\r\n-     * allowance.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n-     * another (`to`).\r\n-     *\r\n-     * Note that `value` may be zero.\r\n-     */\r\n-    event Transfer(address indexed from, address indexed to, uint256 value);\r\n-\r\n-    /**\r\n-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n-     * a call to `approve`. `value` is the new allowance.\r\n-     */\r\n-    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n- * checks.\r\n- *\r\n- * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n- * in bugs, because programmers usually assume that an overflow raises an\r\n- * error, which is the standard behavior in high level programming languages.\r\n- * `SafeMath` restores this intuition by reverting the transaction when an\r\n- * operation overflows.\r\n- *\r\n- * Using this library instead of the unchecked operations eliminates an entire\r\n- * class of bugs, so it's recommended to use it always.\r\n- */\r\n-library SafeMath {\r\n-    /**\r\n-     * @dev Returns the addition of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `+` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Addition cannot overflow.\r\n-     */\r\n-    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        uint256 c = a + b;\r\n-        require(c >= a, \"SafeMath: addition overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n-     * overflow (when the result is negative).\r\n-     *\r\n-     * Counterpart to Solidity's `-` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Subtraction cannot overflow.\r\n-     */\r\n-    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b <= a, \"SafeMath: subtraction overflow\");\r\n-        uint256 c = a - b;\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `*` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Multiplication cannot overflow.\r\n-     */\r\n-    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n-        // benefit is lost if 'b' is also tested.\r\n-        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n-        if (a == 0) {\r\n-            return 0;\r\n-        }\r\n-\r\n-        uint256 c = a * b;\r\n-        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n-     * division by zero. The result is rounded towards zero.\r\n-     *\r\n-     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n-     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n-     * uses an invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Solidity only automatically asserts when dividing by 0\r\n-        require(b > 0, \"SafeMath: division by zero\");\r\n-        uint256 c = a / b;\r\n-        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n-     * Reverts when dividing by zero.\r\n-     *\r\n-     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n-     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n-     * invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b != 0, \"SafeMath: modulo by zero\");\r\n-        return a % b;\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-\r\n-/**\r\n- * @dev Implementation of the `IERC20` interface.\r\n- *\r\n- * This implementation is agnostic to the way tokens are created. This means\r\n- * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n- * For a generic mechanism see `ERC20Mintable`.\r\n- *\r\n- * *For a detailed writeup see our guide [How to implement supply\r\n- * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n- *\r\n- * We have followed general OpenZeppelin guidelines: functions revert instead\r\n- * of returning `false` on failure. This behavior is nonetheless conventional\r\n- * and does not conflict with the expectations of ERC20 applications.\r\n- *\r\n- * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n- * This allows applications to reconstruct the allowance for all accounts just\r\n- * by listening to said events. Other implementations of the EIP may not emit\r\n- * these events, as it isn't required by the specification.\r\n- *\r\n- * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n- * functions have been added to mitigate the well-known issues around setting\r\n- * allowances. See `IERC20.approve`.\r\n- */\r\n-contract ERC20 is IERC20 {\r\n-    using SafeMath for uint256;\r\n-\r\n-    mapping (address => uint256) private _balances;\r\n-\r\n-    mapping (address => mapping (address => uint256)) private _allowances;\r\n-\r\n-    uint256 private _totalSupply;\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.totalSupply`.\r\n-     */\r\n-    function totalSupply() public view returns (uint256) {\r\n-        return _totalSupply;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.balanceOf`.\r\n-     */\r\n-    function balanceOf(address account) public view returns (uint256) {\r\n-        return _balances[account];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transfer`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - the caller must have a balance of at least `amount`.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(msg.sender, recipient, amount);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.allowance`.\r\n-     */\r\n-    function allowance(address owner, address spender) public view returns (uint256) {\r\n-        return _allowances[owner][spender];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.approve`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function approve(address spender, uint256 value) public returns (bool) {\r\n-        _approve(msg.sender, spender, value);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transferFrom`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance. This is not\r\n-     * required by the EIP. See the note at the beginning of `ERC20`;\r\n-     *\r\n-     * Requirements:\r\n-     * - `sender` and `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `value`.\r\n-     * - the caller must have allowance for `sender`'s tokens of at least\r\n-     * `amount`.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(sender, recipient, amount);\r\n-        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     * - `spender` must have allowance for the caller of at least\r\n-     * `subtractedValue`.\r\n-     */\r\n-    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n-     *\r\n-     * This is internal function is equivalent to `transfer`, and can be used to\r\n-     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `sender` cannot be the zero address.\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `amount`.\r\n-     */\r\n-    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n-        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n-        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n-\r\n-        _balances[sender] = _balances[sender].sub(amount);\r\n-        _balances[recipient] = _balances[recipient].add(amount);\r\n-        emit Transfer(sender, recipient, amount);\r\n-    }\r\n-\r\n-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n-     * the total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `from` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `to` cannot be the zero address.\r\n-     */\r\n-    function _mint(address account, uint256 amount) internal {\r\n-        require(account != address(0), \"ERC20: mint to the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.add(amount);\r\n-        _balances[account] = _balances[account].add(amount);\r\n-        emit Transfer(address(0), account, amount);\r\n-    }\r\n-\r\n-     /**\r\n-     * @dev Destroys `amount` tokens from `account`, reducing the\r\n-     * total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `to` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `account` cannot be the zero address.\r\n-     * - `account` must have at least `amount` tokens.\r\n-     */\r\n-    function _burn(address account, uint256 value) internal {\r\n-        require(account != address(0), \"ERC20: burn from the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.sub(value);\r\n-        _balances[account] = _balances[account].sub(value);\r\n-        emit Transfer(account, address(0), value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n-     *\r\n-     * This is internal function is equivalent to `approve`, and can be used to\r\n-     * e.g. set automatic allowances for certain subsystems, etc.\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `owner` cannot be the zero address.\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function _approve(address owner, address spender, uint256 value) internal {\r\n-        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n-        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n-\r\n-        _allowances[owner][spender] = value;\r\n-        emit Approval(owner, spender, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n-     * from the caller's allowance.\r\n-     *\r\n-     * See `_burn` and `_approve`.\r\n-     */\r\n-    function _burnFrom(address account, uint256 amount) internal {\r\n-        _burn(account, amount);\r\n-        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-/**\r\n- * @title TokenMintERC20Token\r\n- * @author TokenMint (visit https://tokenmint.io)\r\n- *\r\n- * @dev Standard ERC20 token with burning and optional functions implemented.\r\n- * For full specification of ERC-20 standard see:\r\n- * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- */\r\n-contract TokenMintERC20Token is ERC20 {\r\n-\r\n-    string private _name;\r\n-    string private _symbol;\r\n-    uint8 private _decimals;\r\n-\r\n-    /**\r\n-     * @dev Constructor.\r\n-     * @param name name of the token\r\n-     * @param symbol symbol of the token, 3-4 chars is recommended\r\n-     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n-     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n-     * @param tokenOwnerAddress address that gets 100% of token supply\r\n-     */\r\n-    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n-      _name = name;\r\n-      _symbol = symbol;\r\n-      _decimals = decimals;\r\n-\r\n-      // set tokenOwnerAddress as owner of all tokens\r\n-      _mint(tokenOwnerAddress, totalSupply);\r\n-\r\n-      // pay the service fee for contract deployment\r\n-      feeReceiver.transfer(msg.value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Burns a specific amount of tokens.\r\n-     * @param value The amount of lowest token units to be burned.\r\n-     */\r\n-    function burn(uint256 value) public {\r\n-      _burn(msg.sender, value);\r\n-    }\r\n-\r\n-    // optional functions from ERC20 stardard\r\n-\r\n-    /**\r\n-     * @return the name of the token.\r\n-     */\r\n-    function name() public view returns (string memory) {\r\n-      return _name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the symbol of the token.\r\n-     */\r\n-    function symbol() public view returns (string memory) {\r\n-      return _symbol;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the number of decimals of the token.\r\n-     */\r\n-    function decimals() public view returns (uint8) {\r\n-      return _decimals;\r\n-    }\r\n-\r\n-     \r\n+/*\n+\n+TG- https://t.me/FlatulenceToken\n+\n+by elon\n+\n+*/\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n+ * the optional functions; to access them see `ERC20Detailed`.\n+ */\n+interface IERC20 {\n+    /**\n+     * @dev Returns the amount of tokens in existence.\n+     */\n+    function totalSupply() external view returns (uint256);\n+\n+    /**\n+     * @dev Returns the amount of tokens owned by `account`.\n+     */\n+    function balanceOf(address account) external view returns (uint256);\n+\n+    /**\n+     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transfer(address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Returns the remaining number of tokens that `spender` will be\n+     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n+     * zero by default.\n+     *\n+     * This value changes when `approve` or `transferFrom` are called.\n+     */\n+    function allowance(address owner, address spender) external view returns (uint256);\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * > Beware that changing an allowance with this method brings the risk\n+     * that someone may use both the old and the new allowance by unfortunate\n+     * transaction ordering. One possible solution to mitigate this race\n+     * condition is to first reduce the spender's allowance to 0 and set the\n+     * desired value afterwards:\n+     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n+     *\n+     * Emits an `Approval` event.\n+     */\n+    function approve(address spender, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n+     * allowance mechanism. `amount` is then deducted from the caller's\n+     * allowance.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n+     * another (`to`).\n+     *\n+     * Note that `value` may be zero.\n+     */\n+    event Transfer(address indexed from, address indexed to, uint256 value);\n+\n+    /**\n+     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n+     * a call to `approve`. `value` is the new allowance.\n+     */\n+    event Approval(address indexed owner, address indexed spender, uint256 value);\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Wrappers over Solidity's arithmetic operations with added overflow\n+ * checks.\n+ *\n+ * Arithmetic operations in Solidity wrap on overflow. This can easily result\n+ * in bugs, because programmers usually assume that an overflow raises an\n+ * error, which is the standard behavior in high level programming languages.\n+ * `SafeMath` restores this intuition by reverting the transaction when an\n+ * operation overflows.\n+ *\n+ * Using this library instead of the unchecked operations eliminates an entire\n+ * class of bugs, so it's recommended to use it always.\n+ */\n+library SafeMath {\n+    /**\n+     * @dev Returns the addition of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `+` operator.\n+     *\n+     * Requirements:\n+     * - Addition cannot overflow.\n+     */\n+    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n+        uint256 c = a + b;\n+        /// RequireMutation(`c >= a` |==> `true`) of: `require(c >= a, \"SafeMath: addition overflow\");`\n+        require(true, \"SafeMath: addition overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the subtraction of two unsigned integers, reverting on\n+     * overflow (when the result is negative).\n+     *\n+     * Counterpart to Solidity's `-` operator.\n+     *\n+     * Requirements:\n+     * - Subtraction cannot overflow.\n+     */\n+    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b <= a, \"SafeMath: subtraction overflow\");\n+        uint256 c = a - b;\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the multiplication of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `*` operator.\n+     *\n+     * Requirements:\n+     * - Multiplication cannot overflow.\n+     */\n+    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n+        // benefit is lost if 'b' is also tested.\n+        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n+        if (a == 0) {\n+            return 0;\n+        }\n+\n+        uint256 c = a * b;\n+        require(c / a == b, \"SafeMath: multiplication overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the integer division of two unsigned integers. Reverts on\n+     * division by zero. The result is rounded towards zero.\n+     *\n+     * Counterpart to Solidity's `/` operator. Note: this function uses a\n+     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n+     * uses an invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Solidity only automatically asserts when dividing by 0\n+        require(b > 0, \"SafeMath: division by zero\");\n+        uint256 c = a / b;\n+        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n+     * Reverts when dividing by zero.\n+     *\n+     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n+     * opcode (which leaves remaining gas untouched) while Solidity uses an\n+     * invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b != 0, \"SafeMath: modulo by zero\");\n+        return a % b;\n+    }\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+\n+/**\n+ * @dev Implementation of the `IERC20` interface.\n+ *\n+ * This implementation is agnostic to the way tokens are created. This means\n+ * that a supply mechanism has to be added in a derived contract using `_mint`.\n+ * For a generic mechanism see `ERC20Mintable`.\n+ *\n+ * *For a detailed writeup see our guide [How to implement supply\n+ * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n+ *\n+ * We have followed general OpenZeppelin guidelines: functions revert instead\n+ * of returning `false` on failure. This behavior is nonetheless conventional\n+ * and does not conflict with the expectations of ERC20 applications.\n+ *\n+ * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n+ * This allows applications to reconstruct the allowance for all accounts just\n+ * by listening to said events. Other implementations of the EIP may not emit\n+ * these events, as it isn't required by the specification.\n+ *\n+ * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n+ * functions have been added to mitigate the well-known issues around setting\n+ * allowances. See `IERC20.approve`.\n+ */\n+contract ERC20 is IERC20 {\n+    using SafeMath for uint256;\n+\n+    mapping (address => uint256) private _balances;\n+\n+    mapping (address => mapping (address => uint256)) private _allowances;\n+\n+    uint256 private _totalSupply;\n+\n+    /**\n+     * @dev See `IERC20.totalSupply`.\n+     */\n+    function totalSupply() public view returns (uint256) {\n+        return _totalSupply;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.balanceOf`.\n+     */\n+    function balanceOf(address account) public view returns (uint256) {\n+        return _balances[account];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transfer`.\n+     *\n+     * Requirements:\n+     *\n+     * - `recipient` cannot be the zero address.\n+     * - the caller must have a balance of at least `amount`.\n+     */\n+    function transfer(address recipient, uint256 amount) public returns (bool) {\n+        _transfer(msg.sender, recipient, amount);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.allowance`.\n+     */\n+    function allowance(address owner, address spender) public view returns (uint256) {\n+        return _allowances[owner][spender];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.approve`.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function approve(address spender, uint256 value) public returns (bool) {\n+        _approve(msg.sender, spender, value);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transferFrom`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance. This is not\n+     * required by the EIP. See the note at the beginning of `ERC20`;\n+     *\n+     * Requirements:\n+     * - `sender` and `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `value`.\n+     * - the caller must have allowance for `sender`'s tokens of at least\n+     * `amount`.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n+        _transfer(sender, recipient, amount);\n+        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically increases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     * - `spender` must have allowance for the caller of at least\n+     * `subtractedValue`.\n+     */\n+    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Moves tokens `amount` from `sender` to `recipient`.\n+     *\n+     * This is internal function is equivalent to `transfer`, and can be used to\n+     * e.g. implement automatic token fees, slashing mechanisms, etc.\n+     *\n+     * Emits a `Transfer` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `sender` cannot be the zero address.\n+     * - `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `amount`.\n+     */\n+    function _transfer(address sender, address recipient, uint256 amount) internal {\n+        require(sender != address(0), \"ERC20: transfer from the zero address\");\n+        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n+\n+        _balances[sender] = _balances[sender].sub(amount);\n+        _balances[recipient] = _balances[recipient].add(amount);\n+        emit Transfer(sender, recipient, amount);\n+    }\n+\n+    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n+     * the total supply.\n+     *\n+     * Emits a `Transfer` event with `from` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `to` cannot be the zero address.\n+     */\n+    function _mint(address account, uint256 amount) internal {\n+        require(account != address(0), \"ERC20: mint to the zero address\");\n+\n+        _totalSupply = _totalSupply.add(amount);\n+        _balances[account] = _balances[account].add(amount);\n+        emit Transfer(address(0), account, amount);\n+    }\n+\n+     /**\n+     * @dev Destroys `amount` tokens from `account`, reducing the\n+     * total supply.\n+     *\n+     * Emits a `Transfer` event with `to` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `account` cannot be the zero address.\n+     * - `account` must have at least `amount` tokens.\n+     */\n+    function _burn(address account, uint256 value) internal {\n+        require(account != address(0), \"ERC20: burn from the zero address\");\n+\n+        _totalSupply = _totalSupply.sub(value);\n+        _balances[account] = _balances[account].sub(value);\n+        emit Transfer(account, address(0), value);\n+    }\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n+     *\n+     * This is internal function is equivalent to `approve`, and can be used to\n+     * e.g. set automatic allowances for certain subsystems, etc.\n+     *\n+     * Emits an `Approval` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `owner` cannot be the zero address.\n+     * - `spender` cannot be the zero address.\n+     */\n+    function _approve(address owner, address spender, uint256 value) internal {\n+        require(owner != address(0), \"ERC20: approve from the zero address\");\n+        require(spender != address(0), \"ERC20: approve to the zero address\");\n+\n+        _allowances[owner][spender] = value;\n+        emit Approval(owner, spender, value);\n+    }\n+\n+    /**\n+     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n+     * from the caller's allowance.\n+     *\n+     * See `_burn` and `_approve`.\n+     */\n+    function _burnFrom(address account, uint256 amount) internal {\n+        _burn(account, amount);\n+        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n+    }\n+}\n+\n+// File: contracts\\ERC20\\TokenMintERC20Token.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+/**\n+ * @title TokenMintERC20Token\n+ * @author TokenMint (visit https://tokenmint.io)\n+ *\n+ * @dev Standard ERC20 token with burning and optional functions implemented.\n+ * For full specification of ERC-20 standard see:\n+ * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n+ */\n+contract TokenMintERC20Token is ERC20 {\n+\n+    string private _name;\n+    string private _symbol;\n+    uint8 private _decimals;\n+\n+    /**\n+     * @dev Constructor.\n+     * @param name name of the token\n+     * @param symbol symbol of the token, 3-4 chars is recommended\n+     * @param decimals number of decimal places of one token unit, 18 is widely used\n+     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n+     * @param tokenOwnerAddress address that gets 100% of token supply\n+     */\n+    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n+      _name = name;\n+      _symbol = symbol;\n+      _decimals = decimals;\n+\n+      // set tokenOwnerAddress as owner of all tokens\n+      _mint(tokenOwnerAddress, totalSupply);\n+\n+      // pay the service fee for contract deployment\n+      feeReceiver.transfer(msg.value);\n+    }\n+\n+    /**\n+     * @dev Burns a specific amount of tokens.\n+     * @param value The amount of lowest token units to be burned.\n+     */\n+    function burn(uint256 value) public {\n+      _burn(msg.sender, value);\n+    }\n+\n+    // optional functions from ERC20 stardard\n+\n+    /**\n+     * @return the name of the token.\n+     */\n+    function name() public view returns (string memory) {\n+      return _name;\n+    }\n+\n+    /**\n+     * @return the symbol of the token.\n+     */\n+    function symbol() public view returns (string memory) {\n+      return _symbol;\n+    }\n+\n+    /**\n+     * @return the number of decimals of the token.\n+     */\n+    function decimals() public view returns (uint8) {\n+      return _decimals;\n+    }\n+\n+     \n }\n\\ No newline at end of file\n",
    "id": "8",
    "name": "mutants/8/verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "original": "verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "sourceroot": "/home/liuye/Projects/InvConPlus"
  },
  {
    "description": "RequireMutation",
    "diff": "--- original\n+++ mutant\n@@ -1,499 +1,500 @@\n-/*\r\n-\r\n-TG- https://t.me/FlatulenceToken\r\n-\r\n-by elon\r\n-\r\n-*/\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n- * the optional functions; to access them see `ERC20Detailed`.\r\n- */\r\n-interface IERC20 {\r\n-    /**\r\n-     * @dev Returns the amount of tokens in existence.\r\n-     */\r\n-    function totalSupply() external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Returns the amount of tokens owned by `account`.\r\n-     */\r\n-    function balanceOf(address account) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Returns the remaining number of tokens that `spender` will be\r\n-     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n-     * zero by default.\r\n-     *\r\n-     * This value changes when `approve` or `transferFrom` are called.\r\n-     */\r\n-    function allowance(address owner, address spender) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * > Beware that changing an allowance with this method brings the risk\r\n-     * that someone may use both the old and the new allowance by unfortunate\r\n-     * transaction ordering. One possible solution to mitigate this race\r\n-     * condition is to first reduce the spender's allowance to 0 and set the\r\n-     * desired value afterwards:\r\n-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     */\r\n-    function approve(address spender, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n-     * allowance mechanism. `amount` is then deducted from the caller's\r\n-     * allowance.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n-     * another (`to`).\r\n-     *\r\n-     * Note that `value` may be zero.\r\n-     */\r\n-    event Transfer(address indexed from, address indexed to, uint256 value);\r\n-\r\n-    /**\r\n-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n-     * a call to `approve`. `value` is the new allowance.\r\n-     */\r\n-    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n- * checks.\r\n- *\r\n- * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n- * in bugs, because programmers usually assume that an overflow raises an\r\n- * error, which is the standard behavior in high level programming languages.\r\n- * `SafeMath` restores this intuition by reverting the transaction when an\r\n- * operation overflows.\r\n- *\r\n- * Using this library instead of the unchecked operations eliminates an entire\r\n- * class of bugs, so it's recommended to use it always.\r\n- */\r\n-library SafeMath {\r\n-    /**\r\n-     * @dev Returns the addition of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `+` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Addition cannot overflow.\r\n-     */\r\n-    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        uint256 c = a + b;\r\n-        require(c >= a, \"SafeMath: addition overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n-     * overflow (when the result is negative).\r\n-     *\r\n-     * Counterpart to Solidity's `-` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Subtraction cannot overflow.\r\n-     */\r\n-    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b <= a, \"SafeMath: subtraction overflow\");\r\n-        uint256 c = a - b;\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `*` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Multiplication cannot overflow.\r\n-     */\r\n-    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n-        // benefit is lost if 'b' is also tested.\r\n-        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n-        if (a == 0) {\r\n-            return 0;\r\n-        }\r\n-\r\n-        uint256 c = a * b;\r\n-        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n-     * division by zero. The result is rounded towards zero.\r\n-     *\r\n-     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n-     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n-     * uses an invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Solidity only automatically asserts when dividing by 0\r\n-        require(b > 0, \"SafeMath: division by zero\");\r\n-        uint256 c = a / b;\r\n-        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n-     * Reverts when dividing by zero.\r\n-     *\r\n-     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n-     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n-     * invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b != 0, \"SafeMath: modulo by zero\");\r\n-        return a % b;\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-\r\n-/**\r\n- * @dev Implementation of the `IERC20` interface.\r\n- *\r\n- * This implementation is agnostic to the way tokens are created. This means\r\n- * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n- * For a generic mechanism see `ERC20Mintable`.\r\n- *\r\n- * *For a detailed writeup see our guide [How to implement supply\r\n- * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n- *\r\n- * We have followed general OpenZeppelin guidelines: functions revert instead\r\n- * of returning `false` on failure. This behavior is nonetheless conventional\r\n- * and does not conflict with the expectations of ERC20 applications.\r\n- *\r\n- * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n- * This allows applications to reconstruct the allowance for all accounts just\r\n- * by listening to said events. Other implementations of the EIP may not emit\r\n- * these events, as it isn't required by the specification.\r\n- *\r\n- * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n- * functions have been added to mitigate the well-known issues around setting\r\n- * allowances. See `IERC20.approve`.\r\n- */\r\n-contract ERC20 is IERC20 {\r\n-    using SafeMath for uint256;\r\n-\r\n-    mapping (address => uint256) private _balances;\r\n-\r\n-    mapping (address => mapping (address => uint256)) private _allowances;\r\n-\r\n-    uint256 private _totalSupply;\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.totalSupply`.\r\n-     */\r\n-    function totalSupply() public view returns (uint256) {\r\n-        return _totalSupply;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.balanceOf`.\r\n-     */\r\n-    function balanceOf(address account) public view returns (uint256) {\r\n-        return _balances[account];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transfer`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - the caller must have a balance of at least `amount`.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(msg.sender, recipient, amount);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.allowance`.\r\n-     */\r\n-    function allowance(address owner, address spender) public view returns (uint256) {\r\n-        return _allowances[owner][spender];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.approve`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function approve(address spender, uint256 value) public returns (bool) {\r\n-        _approve(msg.sender, spender, value);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transferFrom`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance. This is not\r\n-     * required by the EIP. See the note at the beginning of `ERC20`;\r\n-     *\r\n-     * Requirements:\r\n-     * - `sender` and `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `value`.\r\n-     * - the caller must have allowance for `sender`'s tokens of at least\r\n-     * `amount`.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(sender, recipient, amount);\r\n-        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     * - `spender` must have allowance for the caller of at least\r\n-     * `subtractedValue`.\r\n-     */\r\n-    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n-     *\r\n-     * This is internal function is equivalent to `transfer`, and can be used to\r\n-     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `sender` cannot be the zero address.\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `amount`.\r\n-     */\r\n-    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n-        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n-        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n-\r\n-        _balances[sender] = _balances[sender].sub(amount);\r\n-        _balances[recipient] = _balances[recipient].add(amount);\r\n-        emit Transfer(sender, recipient, amount);\r\n-    }\r\n-\r\n-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n-     * the total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `from` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `to` cannot be the zero address.\r\n-     */\r\n-    function _mint(address account, uint256 amount) internal {\r\n-        require(account != address(0), \"ERC20: mint to the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.add(amount);\r\n-        _balances[account] = _balances[account].add(amount);\r\n-        emit Transfer(address(0), account, amount);\r\n-    }\r\n-\r\n-     /**\r\n-     * @dev Destroys `amount` tokens from `account`, reducing the\r\n-     * total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `to` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `account` cannot be the zero address.\r\n-     * - `account` must have at least `amount` tokens.\r\n-     */\r\n-    function _burn(address account, uint256 value) internal {\r\n-        require(account != address(0), \"ERC20: burn from the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.sub(value);\r\n-        _balances[account] = _balances[account].sub(value);\r\n-        emit Transfer(account, address(0), value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n-     *\r\n-     * This is internal function is equivalent to `approve`, and can be used to\r\n-     * e.g. set automatic allowances for certain subsystems, etc.\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `owner` cannot be the zero address.\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function _approve(address owner, address spender, uint256 value) internal {\r\n-        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n-        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n-\r\n-        _allowances[owner][spender] = value;\r\n-        emit Approval(owner, spender, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n-     * from the caller's allowance.\r\n-     *\r\n-     * See `_burn` and `_approve`.\r\n-     */\r\n-    function _burnFrom(address account, uint256 amount) internal {\r\n-        _burn(account, amount);\r\n-        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-/**\r\n- * @title TokenMintERC20Token\r\n- * @author TokenMint (visit https://tokenmint.io)\r\n- *\r\n- * @dev Standard ERC20 token with burning and optional functions implemented.\r\n- * For full specification of ERC-20 standard see:\r\n- * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- */\r\n-contract TokenMintERC20Token is ERC20 {\r\n-\r\n-    string private _name;\r\n-    string private _symbol;\r\n-    uint8 private _decimals;\r\n-\r\n-    /**\r\n-     * @dev Constructor.\r\n-     * @param name name of the token\r\n-     * @param symbol symbol of the token, 3-4 chars is recommended\r\n-     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n-     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n-     * @param tokenOwnerAddress address that gets 100% of token supply\r\n-     */\r\n-    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n-      _name = name;\r\n-      _symbol = symbol;\r\n-      _decimals = decimals;\r\n-\r\n-      // set tokenOwnerAddress as owner of all tokens\r\n-      _mint(tokenOwnerAddress, totalSupply);\r\n-\r\n-      // pay the service fee for contract deployment\r\n-      feeReceiver.transfer(msg.value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Burns a specific amount of tokens.\r\n-     * @param value The amount of lowest token units to be burned.\r\n-     */\r\n-    function burn(uint256 value) public {\r\n-      _burn(msg.sender, value);\r\n-    }\r\n-\r\n-    // optional functions from ERC20 stardard\r\n-\r\n-    /**\r\n-     * @return the name of the token.\r\n-     */\r\n-    function name() public view returns (string memory) {\r\n-      return _name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the symbol of the token.\r\n-     */\r\n-    function symbol() public view returns (string memory) {\r\n-      return _symbol;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the number of decimals of the token.\r\n-     */\r\n-    function decimals() public view returns (uint8) {\r\n-      return _decimals;\r\n-    }\r\n-\r\n-     \r\n+/*\n+\n+TG- https://t.me/FlatulenceToken\n+\n+by elon\n+\n+*/\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n+ * the optional functions; to access them see `ERC20Detailed`.\n+ */\n+interface IERC20 {\n+    /**\n+     * @dev Returns the amount of tokens in existence.\n+     */\n+    function totalSupply() external view returns (uint256);\n+\n+    /**\n+     * @dev Returns the amount of tokens owned by `account`.\n+     */\n+    function balanceOf(address account) external view returns (uint256);\n+\n+    /**\n+     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transfer(address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Returns the remaining number of tokens that `spender` will be\n+     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n+     * zero by default.\n+     *\n+     * This value changes when `approve` or `transferFrom` are called.\n+     */\n+    function allowance(address owner, address spender) external view returns (uint256);\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * > Beware that changing an allowance with this method brings the risk\n+     * that someone may use both the old and the new allowance by unfortunate\n+     * transaction ordering. One possible solution to mitigate this race\n+     * condition is to first reduce the spender's allowance to 0 and set the\n+     * desired value afterwards:\n+     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n+     *\n+     * Emits an `Approval` event.\n+     */\n+    function approve(address spender, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n+     * allowance mechanism. `amount` is then deducted from the caller's\n+     * allowance.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n+     * another (`to`).\n+     *\n+     * Note that `value` may be zero.\n+     */\n+    event Transfer(address indexed from, address indexed to, uint256 value);\n+\n+    /**\n+     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n+     * a call to `approve`. `value` is the new allowance.\n+     */\n+    event Approval(address indexed owner, address indexed spender, uint256 value);\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Wrappers over Solidity's arithmetic operations with added overflow\n+ * checks.\n+ *\n+ * Arithmetic operations in Solidity wrap on overflow. This can easily result\n+ * in bugs, because programmers usually assume that an overflow raises an\n+ * error, which is the standard behavior in high level programming languages.\n+ * `SafeMath` restores this intuition by reverting the transaction when an\n+ * operation overflows.\n+ *\n+ * Using this library instead of the unchecked operations eliminates an entire\n+ * class of bugs, so it's recommended to use it always.\n+ */\n+library SafeMath {\n+    /**\n+     * @dev Returns the addition of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `+` operator.\n+     *\n+     * Requirements:\n+     * - Addition cannot overflow.\n+     */\n+    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n+        uint256 c = a + b;\n+        /// RequireMutation(`c >= a` |==> `false`) of: `require(c >= a, \"SafeMath: addition overflow\");`\n+        require(false, \"SafeMath: addition overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the subtraction of two unsigned integers, reverting on\n+     * overflow (when the result is negative).\n+     *\n+     * Counterpart to Solidity's `-` operator.\n+     *\n+     * Requirements:\n+     * - Subtraction cannot overflow.\n+     */\n+    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b <= a, \"SafeMath: subtraction overflow\");\n+        uint256 c = a - b;\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the multiplication of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `*` operator.\n+     *\n+     * Requirements:\n+     * - Multiplication cannot overflow.\n+     */\n+    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n+        // benefit is lost if 'b' is also tested.\n+        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n+        if (a == 0) {\n+            return 0;\n+        }\n+\n+        uint256 c = a * b;\n+        require(c / a == b, \"SafeMath: multiplication overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the integer division of two unsigned integers. Reverts on\n+     * division by zero. The result is rounded towards zero.\n+     *\n+     * Counterpart to Solidity's `/` operator. Note: this function uses a\n+     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n+     * uses an invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Solidity only automatically asserts when dividing by 0\n+        require(b > 0, \"SafeMath: division by zero\");\n+        uint256 c = a / b;\n+        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n+     * Reverts when dividing by zero.\n+     *\n+     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n+     * opcode (which leaves remaining gas untouched) while Solidity uses an\n+     * invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b != 0, \"SafeMath: modulo by zero\");\n+        return a % b;\n+    }\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+\n+/**\n+ * @dev Implementation of the `IERC20` interface.\n+ *\n+ * This implementation is agnostic to the way tokens are created. This means\n+ * that a supply mechanism has to be added in a derived contract using `_mint`.\n+ * For a generic mechanism see `ERC20Mintable`.\n+ *\n+ * *For a detailed writeup see our guide [How to implement supply\n+ * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n+ *\n+ * We have followed general OpenZeppelin guidelines: functions revert instead\n+ * of returning `false` on failure. This behavior is nonetheless conventional\n+ * and does not conflict with the expectations of ERC20 applications.\n+ *\n+ * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n+ * This allows applications to reconstruct the allowance for all accounts just\n+ * by listening to said events. Other implementations of the EIP may not emit\n+ * these events, as it isn't required by the specification.\n+ *\n+ * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n+ * functions have been added to mitigate the well-known issues around setting\n+ * allowances. See `IERC20.approve`.\n+ */\n+contract ERC20 is IERC20 {\n+    using SafeMath for uint256;\n+\n+    mapping (address => uint256) private _balances;\n+\n+    mapping (address => mapping (address => uint256)) private _allowances;\n+\n+    uint256 private _totalSupply;\n+\n+    /**\n+     * @dev See `IERC20.totalSupply`.\n+     */\n+    function totalSupply() public view returns (uint256) {\n+        return _totalSupply;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.balanceOf`.\n+     */\n+    function balanceOf(address account) public view returns (uint256) {\n+        return _balances[account];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transfer`.\n+     *\n+     * Requirements:\n+     *\n+     * - `recipient` cannot be the zero address.\n+     * - the caller must have a balance of at least `amount`.\n+     */\n+    function transfer(address recipient, uint256 amount) public returns (bool) {\n+        _transfer(msg.sender, recipient, amount);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.allowance`.\n+     */\n+    function allowance(address owner, address spender) public view returns (uint256) {\n+        return _allowances[owner][spender];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.approve`.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function approve(address spender, uint256 value) public returns (bool) {\n+        _approve(msg.sender, spender, value);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transferFrom`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance. This is not\n+     * required by the EIP. See the note at the beginning of `ERC20`;\n+     *\n+     * Requirements:\n+     * - `sender` and `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `value`.\n+     * - the caller must have allowance for `sender`'s tokens of at least\n+     * `amount`.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n+        _transfer(sender, recipient, amount);\n+        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically increases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     * - `spender` must have allowance for the caller of at least\n+     * `subtractedValue`.\n+     */\n+    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Moves tokens `amount` from `sender` to `recipient`.\n+     *\n+     * This is internal function is equivalent to `transfer`, and can be used to\n+     * e.g. implement automatic token fees, slashing mechanisms, etc.\n+     *\n+     * Emits a `Transfer` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `sender` cannot be the zero address.\n+     * - `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `amount`.\n+     */\n+    function _transfer(address sender, address recipient, uint256 amount) internal {\n+        require(sender != address(0), \"ERC20: transfer from the zero address\");\n+        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n+\n+        _balances[sender] = _balances[sender].sub(amount);\n+        _balances[recipient] = _balances[recipient].add(amount);\n+        emit Transfer(sender, recipient, amount);\n+    }\n+\n+    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n+     * the total supply.\n+     *\n+     * Emits a `Transfer` event with `from` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `to` cannot be the zero address.\n+     */\n+    function _mint(address account, uint256 amount) internal {\n+        require(account != address(0), \"ERC20: mint to the zero address\");\n+\n+        _totalSupply = _totalSupply.add(amount);\n+        _balances[account] = _balances[account].add(amount);\n+        emit Transfer(address(0), account, amount);\n+    }\n+\n+     /**\n+     * @dev Destroys `amount` tokens from `account`, reducing the\n+     * total supply.\n+     *\n+     * Emits a `Transfer` event with `to` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `account` cannot be the zero address.\n+     * - `account` must have at least `amount` tokens.\n+     */\n+    function _burn(address account, uint256 value) internal {\n+        require(account != address(0), \"ERC20: burn from the zero address\");\n+\n+        _totalSupply = _totalSupply.sub(value);\n+        _balances[account] = _balances[account].sub(value);\n+        emit Transfer(account, address(0), value);\n+    }\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n+     *\n+     * This is internal function is equivalent to `approve`, and can be used to\n+     * e.g. set automatic allowances for certain subsystems, etc.\n+     *\n+     * Emits an `Approval` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `owner` cannot be the zero address.\n+     * - `spender` cannot be the zero address.\n+     */\n+    function _approve(address owner, address spender, uint256 value) internal {\n+        require(owner != address(0), \"ERC20: approve from the zero address\");\n+        require(spender != address(0), \"ERC20: approve to the zero address\");\n+\n+        _allowances[owner][spender] = value;\n+        emit Approval(owner, spender, value);\n+    }\n+\n+    /**\n+     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n+     * from the caller's allowance.\n+     *\n+     * See `_burn` and `_approve`.\n+     */\n+    function _burnFrom(address account, uint256 amount) internal {\n+        _burn(account, amount);\n+        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n+    }\n+}\n+\n+// File: contracts\\ERC20\\TokenMintERC20Token.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+/**\n+ * @title TokenMintERC20Token\n+ * @author TokenMint (visit https://tokenmint.io)\n+ *\n+ * @dev Standard ERC20 token with burning and optional functions implemented.\n+ * For full specification of ERC-20 standard see:\n+ * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n+ */\n+contract TokenMintERC20Token is ERC20 {\n+\n+    string private _name;\n+    string private _symbol;\n+    uint8 private _decimals;\n+\n+    /**\n+     * @dev Constructor.\n+     * @param name name of the token\n+     * @param symbol symbol of the token, 3-4 chars is recommended\n+     * @param decimals number of decimal places of one token unit, 18 is widely used\n+     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n+     * @param tokenOwnerAddress address that gets 100% of token supply\n+     */\n+    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n+      _name = name;\n+      _symbol = symbol;\n+      _decimals = decimals;\n+\n+      // set tokenOwnerAddress as owner of all tokens\n+      _mint(tokenOwnerAddress, totalSupply);\n+\n+      // pay the service fee for contract deployment\n+      feeReceiver.transfer(msg.value);\n+    }\n+\n+    /**\n+     * @dev Burns a specific amount of tokens.\n+     * @param value The amount of lowest token units to be burned.\n+     */\n+    function burn(uint256 value) public {\n+      _burn(msg.sender, value);\n+    }\n+\n+    // optional functions from ERC20 stardard\n+\n+    /**\n+     * @return the name of the token.\n+     */\n+    function name() public view returns (string memory) {\n+      return _name;\n+    }\n+\n+    /**\n+     * @return the symbol of the token.\n+     */\n+    function symbol() public view returns (string memory) {\n+      return _symbol;\n+    }\n+\n+    /**\n+     * @return the number of decimals of the token.\n+     */\n+    function decimals() public view returns (uint8) {\n+      return _decimals;\n+    }\n+\n+     \n }\n\\ No newline at end of file\n",
    "id": "9",
    "name": "mutants/9/verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "original": "verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "sourceroot": "/home/liuye/Projects/InvConPlus"
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -1,499 +1,500 @@\n-/*\r\n-\r\n-TG- https://t.me/FlatulenceToken\r\n-\r\n-by elon\r\n-\r\n-*/\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n- * the optional functions; to access them see `ERC20Detailed`.\r\n- */\r\n-interface IERC20 {\r\n-    /**\r\n-     * @dev Returns the amount of tokens in existence.\r\n-     */\r\n-    function totalSupply() external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Returns the amount of tokens owned by `account`.\r\n-     */\r\n-    function balanceOf(address account) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Returns the remaining number of tokens that `spender` will be\r\n-     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n-     * zero by default.\r\n-     *\r\n-     * This value changes when `approve` or `transferFrom` are called.\r\n-     */\r\n-    function allowance(address owner, address spender) external view returns (uint256);\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * > Beware that changing an allowance with this method brings the risk\r\n-     * that someone may use both the old and the new allowance by unfortunate\r\n-     * transaction ordering. One possible solution to mitigate this race\r\n-     * condition is to first reduce the spender's allowance to 0 and set the\r\n-     * desired value afterwards:\r\n-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     */\r\n-    function approve(address spender, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n-     * allowance mechanism. `amount` is then deducted from the caller's\r\n-     * allowance.\r\n-     *\r\n-     * Returns a boolean value indicating whether the operation succeeded.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n-\r\n-    /**\r\n-     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n-     * another (`to`).\r\n-     *\r\n-     * Note that `value` may be zero.\r\n-     */\r\n-    event Transfer(address indexed from, address indexed to, uint256 value);\r\n-\r\n-    /**\r\n-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n-     * a call to `approve`. `value` is the new allowance.\r\n-     */\r\n-    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-/**\r\n- * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n- * checks.\r\n- *\r\n- * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n- * in bugs, because programmers usually assume that an overflow raises an\r\n- * error, which is the standard behavior in high level programming languages.\r\n- * `SafeMath` restores this intuition by reverting the transaction when an\r\n- * operation overflows.\r\n- *\r\n- * Using this library instead of the unchecked operations eliminates an entire\r\n- * class of bugs, so it's recommended to use it always.\r\n- */\r\n-library SafeMath {\r\n-    /**\r\n-     * @dev Returns the addition of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `+` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Addition cannot overflow.\r\n-     */\r\n-    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        uint256 c = a + b;\r\n-        require(c >= a, \"SafeMath: addition overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n-     * overflow (when the result is negative).\r\n-     *\r\n-     * Counterpart to Solidity's `-` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Subtraction cannot overflow.\r\n-     */\r\n-    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b <= a, \"SafeMath: subtraction overflow\");\r\n-        uint256 c = a - b;\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n-     * overflow.\r\n-     *\r\n-     * Counterpart to Solidity's `*` operator.\r\n-     *\r\n-     * Requirements:\r\n-     * - Multiplication cannot overflow.\r\n-     */\r\n-    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n-        // benefit is lost if 'b' is also tested.\r\n-        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n-        if (a == 0) {\r\n-            return 0;\r\n-        }\r\n-\r\n-        uint256 c = a * b;\r\n-        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n-     * division by zero. The result is rounded towards zero.\r\n-     *\r\n-     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n-     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n-     * uses an invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        // Solidity only automatically asserts when dividing by 0\r\n-        require(b > 0, \"SafeMath: division by zero\");\r\n-        uint256 c = a / b;\r\n-        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n-\r\n-        return c;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n-     * Reverts when dividing by zero.\r\n-     *\r\n-     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n-     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n-     * invalid opcode to revert (consuming all remaining gas).\r\n-     *\r\n-     * Requirements:\r\n-     * - The divisor cannot be zero.\r\n-     */\r\n-    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n-        require(b != 0, \"SafeMath: modulo by zero\");\r\n-        return a % b;\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-\r\n-/**\r\n- * @dev Implementation of the `IERC20` interface.\r\n- *\r\n- * This implementation is agnostic to the way tokens are created. This means\r\n- * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n- * For a generic mechanism see `ERC20Mintable`.\r\n- *\r\n- * *For a detailed writeup see our guide [How to implement supply\r\n- * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n- *\r\n- * We have followed general OpenZeppelin guidelines: functions revert instead\r\n- * of returning `false` on failure. This behavior is nonetheless conventional\r\n- * and does not conflict with the expectations of ERC20 applications.\r\n- *\r\n- * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n- * This allows applications to reconstruct the allowance for all accounts just\r\n- * by listening to said events. Other implementations of the EIP may not emit\r\n- * these events, as it isn't required by the specification.\r\n- *\r\n- * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n- * functions have been added to mitigate the well-known issues around setting\r\n- * allowances. See `IERC20.approve`.\r\n- */\r\n-contract ERC20 is IERC20 {\r\n-    using SafeMath for uint256;\r\n-\r\n-    mapping (address => uint256) private _balances;\r\n-\r\n-    mapping (address => mapping (address => uint256)) private _allowances;\r\n-\r\n-    uint256 private _totalSupply;\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.totalSupply`.\r\n-     */\r\n-    function totalSupply() public view returns (uint256) {\r\n-        return _totalSupply;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.balanceOf`.\r\n-     */\r\n-    function balanceOf(address account) public view returns (uint256) {\r\n-        return _balances[account];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transfer`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - the caller must have a balance of at least `amount`.\r\n-     */\r\n-    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(msg.sender, recipient, amount);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.allowance`.\r\n-     */\r\n-    function allowance(address owner, address spender) public view returns (uint256) {\r\n-        return _allowances[owner][spender];\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.approve`.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function approve(address spender, uint256 value) public returns (bool) {\r\n-        _approve(msg.sender, spender, value);\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev See `IERC20.transferFrom`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance. This is not\r\n-     * required by the EIP. See the note at the beginning of `ERC20`;\r\n-     *\r\n-     * Requirements:\r\n-     * - `sender` and `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `value`.\r\n-     * - the caller must have allowance for `sender`'s tokens of at least\r\n-     * `amount`.\r\n-     */\r\n-    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n-        _transfer(sender, recipient, amount);\r\n-        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n-     *\r\n-     * This is an alternative to `approve` that can be used as a mitigation for\r\n-     * problems described in `IERC20.approve`.\r\n-     *\r\n-     * Emits an `Approval` event indicating the updated allowance.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `spender` cannot be the zero address.\r\n-     * - `spender` must have allowance for the caller of at least\r\n-     * `subtractedValue`.\r\n-     */\r\n-    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n-        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n-     *\r\n-     * This is internal function is equivalent to `transfer`, and can be used to\r\n-     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n-     *\r\n-     * Emits a `Transfer` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `sender` cannot be the zero address.\r\n-     * - `recipient` cannot be the zero address.\r\n-     * - `sender` must have a balance of at least `amount`.\r\n-     */\r\n-    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n-        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n-        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n-\r\n-        _balances[sender] = _balances[sender].sub(amount);\r\n-        _balances[recipient] = _balances[recipient].add(amount);\r\n-        emit Transfer(sender, recipient, amount);\r\n-    }\r\n-\r\n-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n-     * the total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `from` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `to` cannot be the zero address.\r\n-     */\r\n-    function _mint(address account, uint256 amount) internal {\r\n-        require(account != address(0), \"ERC20: mint to the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.add(amount);\r\n-        _balances[account] = _balances[account].add(amount);\r\n-        emit Transfer(address(0), account, amount);\r\n-    }\r\n-\r\n-     /**\r\n-     * @dev Destroys `amount` tokens from `account`, reducing the\r\n-     * total supply.\r\n-     *\r\n-     * Emits a `Transfer` event with `to` set to the zero address.\r\n-     *\r\n-     * Requirements\r\n-     *\r\n-     * - `account` cannot be the zero address.\r\n-     * - `account` must have at least `amount` tokens.\r\n-     */\r\n-    function _burn(address account, uint256 value) internal {\r\n-        require(account != address(0), \"ERC20: burn from the zero address\");\r\n-\r\n-        _totalSupply = _totalSupply.sub(value);\r\n-        _balances[account] = _balances[account].sub(value);\r\n-        emit Transfer(account, address(0), value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n-     *\r\n-     * This is internal function is equivalent to `approve`, and can be used to\r\n-     * e.g. set automatic allowances for certain subsystems, etc.\r\n-     *\r\n-     * Emits an `Approval` event.\r\n-     *\r\n-     * Requirements:\r\n-     *\r\n-     * - `owner` cannot be the zero address.\r\n-     * - `spender` cannot be the zero address.\r\n-     */\r\n-    function _approve(address owner, address spender, uint256 value) internal {\r\n-        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n-        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n-\r\n-        _allowances[owner][spender] = value;\r\n-        emit Approval(owner, spender, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n-     * from the caller's allowance.\r\n-     *\r\n-     * See `_burn` and `_approve`.\r\n-     */\r\n-    function _burnFrom(address account, uint256 amount) internal {\r\n-        _burn(account, amount);\r\n-        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n-    }\r\n-}\r\n-\r\n-// File: contracts\\ERC20\\TokenMintERC20Token.sol\r\n-\r\n-pragma solidity ^0.5.0;\r\n-\r\n-\r\n-/**\r\n- * @title TokenMintERC20Token\r\n- * @author TokenMint (visit https://tokenmint.io)\r\n- *\r\n- * @dev Standard ERC20 token with burning and optional functions implemented.\r\n- * For full specification of ERC-20 standard see:\r\n- * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- */\r\n-contract TokenMintERC20Token is ERC20 {\r\n-\r\n-    string private _name;\r\n-    string private _symbol;\r\n-    uint8 private _decimals;\r\n-\r\n-    /**\r\n-     * @dev Constructor.\r\n-     * @param name name of the token\r\n-     * @param symbol symbol of the token, 3-4 chars is recommended\r\n-     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n-     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n-     * @param tokenOwnerAddress address that gets 100% of token supply\r\n-     */\r\n-    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n-      _name = name;\r\n-      _symbol = symbol;\r\n-      _decimals = decimals;\r\n-\r\n-      // set tokenOwnerAddress as owner of all tokens\r\n-      _mint(tokenOwnerAddress, totalSupply);\r\n-\r\n-      // pay the service fee for contract deployment\r\n-      feeReceiver.transfer(msg.value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @dev Burns a specific amount of tokens.\r\n-     * @param value The amount of lowest token units to be burned.\r\n-     */\r\n-    function burn(uint256 value) public {\r\n-      _burn(msg.sender, value);\r\n-    }\r\n-\r\n-    // optional functions from ERC20 stardard\r\n-\r\n-    /**\r\n-     * @return the name of the token.\r\n-     */\r\n-    function name() public view returns (string memory) {\r\n-      return _name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the symbol of the token.\r\n-     */\r\n-    function symbol() public view returns (string memory) {\r\n-      return _symbol;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the number of decimals of the token.\r\n-     */\r\n-    function decimals() public view returns (uint8) {\r\n-      return _decimals;\r\n-    }\r\n-\r\n-     \r\n+/*\n+\n+TG- https://t.me/FlatulenceToken\n+\n+by elon\n+\n+*/\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n+ * the optional functions; to access them see `ERC20Detailed`.\n+ */\n+interface IERC20 {\n+    /**\n+     * @dev Returns the amount of tokens in existence.\n+     */\n+    function totalSupply() external view returns (uint256);\n+\n+    /**\n+     * @dev Returns the amount of tokens owned by `account`.\n+     */\n+    function balanceOf(address account) external view returns (uint256);\n+\n+    /**\n+     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transfer(address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Returns the remaining number of tokens that `spender` will be\n+     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n+     * zero by default.\n+     *\n+     * This value changes when `approve` or `transferFrom` are called.\n+     */\n+    function allowance(address owner, address spender) external view returns (uint256);\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * > Beware that changing an allowance with this method brings the risk\n+     * that someone may use both the old and the new allowance by unfortunate\n+     * transaction ordering. One possible solution to mitigate this race\n+     * condition is to first reduce the spender's allowance to 0 and set the\n+     * desired value afterwards:\n+     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n+     *\n+     * Emits an `Approval` event.\n+     */\n+    function approve(address spender, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n+     * allowance mechanism. `amount` is then deducted from the caller's\n+     * allowance.\n+     *\n+     * Returns a boolean value indicating whether the operation succeeded.\n+     *\n+     * Emits a `Transfer` event.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n+\n+    /**\n+     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n+     * another (`to`).\n+     *\n+     * Note that `value` may be zero.\n+     */\n+    event Transfer(address indexed from, address indexed to, uint256 value);\n+\n+    /**\n+     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n+     * a call to `approve`. `value` is the new allowance.\n+     */\n+    event Approval(address indexed owner, address indexed spender, uint256 value);\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n+\n+pragma solidity ^0.5.0;\n+\n+/**\n+ * @dev Wrappers over Solidity's arithmetic operations with added overflow\n+ * checks.\n+ *\n+ * Arithmetic operations in Solidity wrap on overflow. This can easily result\n+ * in bugs, because programmers usually assume that an overflow raises an\n+ * error, which is the standard behavior in high level programming languages.\n+ * `SafeMath` restores this intuition by reverting the transaction when an\n+ * operation overflows.\n+ *\n+ * Using this library instead of the unchecked operations eliminates an entire\n+ * class of bugs, so it's recommended to use it always.\n+ */\n+library SafeMath {\n+    /**\n+     * @dev Returns the addition of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `+` operator.\n+     *\n+     * Requirements:\n+     * - Addition cannot overflow.\n+     */\n+    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n+        uint256 c = a + b;\n+        /// SwapArgumentsOperatorMutation(`c >= a` |==> `a >= c`) of: `require(c >= a, \"SafeMath: addition overflow\");`\n+        require(a >= c, \"SafeMath: addition overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the subtraction of two unsigned integers, reverting on\n+     * overflow (when the result is negative).\n+     *\n+     * Counterpart to Solidity's `-` operator.\n+     *\n+     * Requirements:\n+     * - Subtraction cannot overflow.\n+     */\n+    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b <= a, \"SafeMath: subtraction overflow\");\n+        uint256 c = a - b;\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the multiplication of two unsigned integers, reverting on\n+     * overflow.\n+     *\n+     * Counterpart to Solidity's `*` operator.\n+     *\n+     * Requirements:\n+     * - Multiplication cannot overflow.\n+     */\n+    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n+        // benefit is lost if 'b' is also tested.\n+        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n+        if (a == 0) {\n+            return 0;\n+        }\n+\n+        uint256 c = a * b;\n+        require(c / a == b, \"SafeMath: multiplication overflow\");\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the integer division of two unsigned integers. Reverts on\n+     * division by zero. The result is rounded towards zero.\n+     *\n+     * Counterpart to Solidity's `/` operator. Note: this function uses a\n+     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n+     * uses an invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n+        // Solidity only automatically asserts when dividing by 0\n+        require(b > 0, \"SafeMath: division by zero\");\n+        uint256 c = a / b;\n+        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n+     * Reverts when dividing by zero.\n+     *\n+     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n+     * opcode (which leaves remaining gas untouched) while Solidity uses an\n+     * invalid opcode to revert (consuming all remaining gas).\n+     *\n+     * Requirements:\n+     * - The divisor cannot be zero.\n+     */\n+    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n+        require(b != 0, \"SafeMath: modulo by zero\");\n+        return a % b;\n+    }\n+}\n+\n+// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+\n+/**\n+ * @dev Implementation of the `IERC20` interface.\n+ *\n+ * This implementation is agnostic to the way tokens are created. This means\n+ * that a supply mechanism has to be added in a derived contract using `_mint`.\n+ * For a generic mechanism see `ERC20Mintable`.\n+ *\n+ * *For a detailed writeup see our guide [How to implement supply\n+ * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n+ *\n+ * We have followed general OpenZeppelin guidelines: functions revert instead\n+ * of returning `false` on failure. This behavior is nonetheless conventional\n+ * and does not conflict with the expectations of ERC20 applications.\n+ *\n+ * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n+ * This allows applications to reconstruct the allowance for all accounts just\n+ * by listening to said events. Other implementations of the EIP may not emit\n+ * these events, as it isn't required by the specification.\n+ *\n+ * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n+ * functions have been added to mitigate the well-known issues around setting\n+ * allowances. See `IERC20.approve`.\n+ */\n+contract ERC20 is IERC20 {\n+    using SafeMath for uint256;\n+\n+    mapping (address => uint256) private _balances;\n+\n+    mapping (address => mapping (address => uint256)) private _allowances;\n+\n+    uint256 private _totalSupply;\n+\n+    /**\n+     * @dev See `IERC20.totalSupply`.\n+     */\n+    function totalSupply() public view returns (uint256) {\n+        return _totalSupply;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.balanceOf`.\n+     */\n+    function balanceOf(address account) public view returns (uint256) {\n+        return _balances[account];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transfer`.\n+     *\n+     * Requirements:\n+     *\n+     * - `recipient` cannot be the zero address.\n+     * - the caller must have a balance of at least `amount`.\n+     */\n+    function transfer(address recipient, uint256 amount) public returns (bool) {\n+        _transfer(msg.sender, recipient, amount);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.allowance`.\n+     */\n+    function allowance(address owner, address spender) public view returns (uint256) {\n+        return _allowances[owner][spender];\n+    }\n+\n+    /**\n+     * @dev See `IERC20.approve`.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function approve(address spender, uint256 value) public returns (bool) {\n+        _approve(msg.sender, spender, value);\n+        return true;\n+    }\n+\n+    /**\n+     * @dev See `IERC20.transferFrom`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance. This is not\n+     * required by the EIP. See the note at the beginning of `ERC20`;\n+     *\n+     * Requirements:\n+     * - `sender` and `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `value`.\n+     * - the caller must have allowance for `sender`'s tokens of at least\n+     * `amount`.\n+     */\n+    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n+        _transfer(sender, recipient, amount);\n+        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically increases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     */\n+    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n+     *\n+     * This is an alternative to `approve` that can be used as a mitigation for\n+     * problems described in `IERC20.approve`.\n+     *\n+     * Emits an `Approval` event indicating the updated allowance.\n+     *\n+     * Requirements:\n+     *\n+     * - `spender` cannot be the zero address.\n+     * - `spender` must have allowance for the caller of at least\n+     * `subtractedValue`.\n+     */\n+    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n+        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n+        return true;\n+    }\n+\n+    /**\n+     * @dev Moves tokens `amount` from `sender` to `recipient`.\n+     *\n+     * This is internal function is equivalent to `transfer`, and can be used to\n+     * e.g. implement automatic token fees, slashing mechanisms, etc.\n+     *\n+     * Emits a `Transfer` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `sender` cannot be the zero address.\n+     * - `recipient` cannot be the zero address.\n+     * - `sender` must have a balance of at least `amount`.\n+     */\n+    function _transfer(address sender, address recipient, uint256 amount) internal {\n+        require(sender != address(0), \"ERC20: transfer from the zero address\");\n+        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n+\n+        _balances[sender] = _balances[sender].sub(amount);\n+        _balances[recipient] = _balances[recipient].add(amount);\n+        emit Transfer(sender, recipient, amount);\n+    }\n+\n+    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n+     * the total supply.\n+     *\n+     * Emits a `Transfer` event with `from` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `to` cannot be the zero address.\n+     */\n+    function _mint(address account, uint256 amount) internal {\n+        require(account != address(0), \"ERC20: mint to the zero address\");\n+\n+        _totalSupply = _totalSupply.add(amount);\n+        _balances[account] = _balances[account].add(amount);\n+        emit Transfer(address(0), account, amount);\n+    }\n+\n+     /**\n+     * @dev Destroys `amount` tokens from `account`, reducing the\n+     * total supply.\n+     *\n+     * Emits a `Transfer` event with `to` set to the zero address.\n+     *\n+     * Requirements\n+     *\n+     * - `account` cannot be the zero address.\n+     * - `account` must have at least `amount` tokens.\n+     */\n+    function _burn(address account, uint256 value) internal {\n+        require(account != address(0), \"ERC20: burn from the zero address\");\n+\n+        _totalSupply = _totalSupply.sub(value);\n+        _balances[account] = _balances[account].sub(value);\n+        emit Transfer(account, address(0), value);\n+    }\n+\n+    /**\n+     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n+     *\n+     * This is internal function is equivalent to `approve`, and can be used to\n+     * e.g. set automatic allowances for certain subsystems, etc.\n+     *\n+     * Emits an `Approval` event.\n+     *\n+     * Requirements:\n+     *\n+     * - `owner` cannot be the zero address.\n+     * - `spender` cannot be the zero address.\n+     */\n+    function _approve(address owner, address spender, uint256 value) internal {\n+        require(owner != address(0), \"ERC20: approve from the zero address\");\n+        require(spender != address(0), \"ERC20: approve to the zero address\");\n+\n+        _allowances[owner][spender] = value;\n+        emit Approval(owner, spender, value);\n+    }\n+\n+    /**\n+     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n+     * from the caller's allowance.\n+     *\n+     * See `_burn` and `_approve`.\n+     */\n+    function _burnFrom(address account, uint256 amount) internal {\n+        _burn(account, amount);\n+        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n+    }\n+}\n+\n+// File: contracts\\ERC20\\TokenMintERC20Token.sol\n+\n+pragma solidity ^0.5.0;\n+\n+\n+/**\n+ * @title TokenMintERC20Token\n+ * @author TokenMint (visit https://tokenmint.io)\n+ *\n+ * @dev Standard ERC20 token with burning and optional functions implemented.\n+ * For full specification of ERC-20 standard see:\n+ * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n+ */\n+contract TokenMintERC20Token is ERC20 {\n+\n+    string private _name;\n+    string private _symbol;\n+    uint8 private _decimals;\n+\n+    /**\n+     * @dev Constructor.\n+     * @param name name of the token\n+     * @param symbol symbol of the token, 3-4 chars is recommended\n+     * @param decimals number of decimal places of one token unit, 18 is widely used\n+     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n+     * @param tokenOwnerAddress address that gets 100% of token supply\n+     */\n+    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n+      _name = name;\n+      _symbol = symbol;\n+      _decimals = decimals;\n+\n+      // set tokenOwnerAddress as owner of all tokens\n+      _mint(tokenOwnerAddress, totalSupply);\n+\n+      // pay the service fee for contract deployment\n+      feeReceiver.transfer(msg.value);\n+    }\n+\n+    /**\n+     * @dev Burns a specific amount of tokens.\n+     * @param value The amount of lowest token units to be burned.\n+     */\n+    function burn(uint256 value) public {\n+      _burn(msg.sender, value);\n+    }\n+\n+    // optional functions from ERC20 stardard\n+\n+    /**\n+     * @return the name of the token.\n+     */\n+    function name() public view returns (string memory) {\n+      return _name;\n+    }\n+\n+    /**\n+     * @return the symbol of the token.\n+     */\n+    function symbol() public view returns (string memory) {\n+      return _symbol;\n+    }\n+\n+    /**\n+     * @return the number of decimals of the token.\n+     */\n+    function decimals() public view returns (uint8) {\n+      return _decimals;\n+    }\n+\n+     \n }\n\\ No newline at end of file\n",
    "id": "10",
    "name": "mutants/10/verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "original": "verisol_test/0x836775359fd7b19409f2914719c67e4db7073eab.etherscan.io-TokenMintERC20Token.sol",
    "sourceroot": "/home/liuye/Projects/InvConPlus"
  }
]